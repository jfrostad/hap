{smcl}
{com}{sf}{ul off}{txt}{.-}
      name:  {res}<unnamed>
       {txt}log:  {res}/ihme/homes/albrja/repos/hap/extract/91740log.smcl
  {txt}log type:  {res}smcl
 {txt}opened on:  {res} 1 Oct 2019, 13:49:47

{com}. do 1_extract.do
{txt}
{com}. /***********************************************************************************************************
>  Author: Patrick Liu (pyliu@uw.edu) edited by Manny Garcia (gmanny@uw.edu)                                                                  
>  Date: 7/13/2015
>  Project: ubCov
>  Purpose: Run Script
> ***********************************************************************************************************/
. // do /homes/jfrostad/_code/lbd/hap/extract/1_extract.do
. 
. //////////////////////////////////
> // Setup
. //////////////////////////////////
> 
. if c(os) == "Unix" {c -(}
.     local j "/home/j"
.     local l "/share/limited_use/LIMITED_USE"
.     set odbcmgr unixodbc
. {c )-}
{txt}
{com}. else if c(os) == "Windows" {c -(}
.     local j "J:"
.     local l "L:/LIMITED_USE"
. {c )-}
{txt}
{com}. 
. clear all
{txt}  {hline 81} begin clear {hline}
  - if _caller() < 10 {c -(}
    _clear_9 `0'
    exit
    {c )-}
  - version 10
  - syntax [anything]
  - tokenize `anything'
  = tokenize all
  - if `"`2'"' != "" {c -(}
  = if `""' != "" {c -(}
    display as err "`2' not allowed"
    exit 198
    {c )-}
  - if "`1'"=="" {c -(}
  = if "all"=="" {c -(}
    drop _all
    label drop _all
    {c )-}
  - else if "`1'"=="mata" {c -(}
  = else if "all"=="mata" {c -(}
    mata: mata clear
    {c )-}
  - else if inlist("`1'", "results", "matrix") {c -(}
  = else if inlist("all", "results", "matrix") {c -(}
    return clear
    clearreturn
    ereturn clear
    sreturn clear
    _return drop _all
    if ("`1'" == "matrix") {c -(}
    matrix drop _all
    _est drop _all
    {c )-}
    {c )-}
  - else if "`1'"=="programs" {c -(}
  = else if "all"=="programs" {c -(}
    program drop _all
    {c )-}
  - else if "`1'"=="ado" {c -(}
  = else if "all"=="ado" {c -(}
    program drop _allado
    {c )-}
  - else if "`1'"=="*" | "`1'"=="all" {c -(}
  = else if "all"=="*" | "all"=="all" {c -(}
  - capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
  - capture
  - if (0`semmods') {c -(}
  = if (0) {c -(}
    display as err "-clear all- not allowed while an SEM Builder is open"
    exit 1
    {c )-}
  - drop _all
  - label drop _all
    {hline 79} begin label {hline}
    - version 10.0
    - gettoken val : 0
    - if (strpos("`val'", "val") > 0 ) {c -(}
    = if (strpos("drop", "val") > 0 ) {c -(}
      gettoken val 0 : 0
      syntax anything [, nofix]
      if "`fix'" != "" {c -(}
      local fix ", nofix"
      {c )-}
      gettoken var rest : anything
      while `"`rest'"' != "" {c -(}
      gettoken lab rest : rest
      local label "`lab'"
      {c )-}
      local vlist : list anything - lab
      if "`lab'" == "." {c -(}
      local lab ""
      {c )-}
      foreach var of varlist `vlist' {c -(}
      _label `val' `var' `lab' `fix'
      {c )-}
      {c )-}
    - else {c -(}
    - _label `macval(0)'
    = _label drop _all
    - {c )-}
    {hline 81} end label {hline}
  - matrix drop _all
  - scalar drop _all
  - constraint drop _all
  - eq drop _all
    {hline 82} begin eq {hline}
    - version 3.1
    - if "$S_eqnum"=="" {c -(}
    = if ""=="" {c -(}
    - global S_eqnum 0
    - {c )-}
    - if "`1'"=="?" | "`1'"=="??" {c -(}
    = if "drop"=="?" | "drop"=="??" {c -(}
      if "`3'"!="" {c -(}
      error 198
      {c )-}
      _crceqnm `2'
      local ename "${c -(}S_eqeq`r(n_eq)'{c )-}"
      if "`1'"=="?" & "`ename'"!= "" {c -(}
      local varlist "req ex"
      capture parse "`ename'"
      if _rc {c -(}
      di in red "`r(eqname)':" _col(11) "`ename'"
      local varlist "req ex"
      parse "`ename'"
      {c )-}
      local ename "`varlist'"
      {c )-}
      ret local eq "`ename'"
      ret local eqname "`r(eqname)'"
      global S_1 `return(eq)'
      global S_3 `return(eqname)'
      exit
      {c )-}
    - if "`1'"=="dir" | "`1'"=="list" {c -(}
    = if "drop"=="dir" | "drop"=="list" {c -(}
      local cmd "`1'"
      mac shift
      if "`1'"=="" {c -(}
      local 1 "_all"
      {c )-}
      _crceqlu `*'
      parse "`r(eqnums)'", parse(" ")
      if "`cmd'"=="dir" {c -(}
      while "`1'"!="" {c -(}
      di in gr "${c -(}S_eqnm`1'{c )-}"
      mac shift
      {c )-}
      exit
      {c )-}
      while "`1'"!="" {c -(}
      di in gr "${c -(}S_eqnm`1'{c )-}:" _col(11) in ye "${c -(}S_eqeq`1'{c )-}"
      mac shift
      {c )-}
      exit
      {c )-}
    - if "`1'"=="drop" {c -(}
    = if "drop"=="drop" {c -(}
    - mac shift
    - if "`*'"=="" {c -(}
    = if "_all"=="" {c -(}
      error 198
      {c )-}
    - local arg "`*'"
    = local arg "_all"
    - _crceqlu `*'
    = _crceqlu _all
      {hline 71} begin eq._crceqlu {hline}
      - version 3.1
      - if "`*'" == "" {c -(} exit {c )-}
      = if "_all" == "" {c -(} exit {c )-}
      - if "`*'" == "_all" {c -(}
      = if "_all" == "_all" {c -(}
      - local i 1
      - while `i'<=$S_eqnum {c -(}
      = while 1<=0 {c -(}
        if "${c -(}S_eqnm`i'{c )-}"!="" {c -(}
        ret local eqnums "`return(eqnums)' `i'"
        {c )-}
        local i=`i'+1
        {c )-}
      - exit
      {hline 73} end eq._crceqlu {hline}
    - parse "`r(eqnums)'", parse(" ")
    = parse "", parse(" ")
    - while "`1'"!="" {c -(}
    = while ""!="" {c -(}
      _crceqdp `1'
      mac shift
      {c )-}
    - if "`arg'"=="_all" {c -(}
    = if "_all"=="_all" {c -(}
    - global S_eqnum
    - {c )-}
    - exit
    {hline 84} end eq {hline}
  - file close _all
  - postutil clear
  - _return drop _all
  - discard
  - program drop _all
  - timer clear
  - mata: mata clear
  - {c )-}
  - else {c -(}
    display as err "`1' not allowed"
    exit 198
    {c )-}
  {hline 83} end clear {hline}

{com}. set more off
{txt}
{com}. set obs 1
{txt}obs was 0, now 1

{com}. 
. // Settings
. local central_root "`j'/WORK/01_covariates/common/ubcov_central"
{txt}
{com}. local topics hap //ENTER YOUR TOPIC HERE
{txt}
{com}. 
. // Load functions
. cd "`central_root'"
{res}/snfs1/WORK/01_covariates/common/ubcov_central
{txt}
{com}. do "`central_root'/modules/extract/core/load.do"
{txt}
{com}. qui {c -(}
  {txt}- foreach path in `paths' {c -(}
  = foreach path in modules/extract/core/ modules/extract/core/addons/ {c -(}
  - local files : dir "./`path'" files "*.do"
  = local files : dir "./modules/extract/core/" files "*.do"
  - foreach file in `files' {c -(}
  = foreach file in "sourcing.do" "batch.do" "label.do" "utility.do" "mapping.do" "extraction.do" "load.do" "validate.do" "init.do" "merge.do" "generate.do" {c -(}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "sourcing.do" != "load.do" do "modules/extract/core//sourcing.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "batch.do" != "load.do" do "modules/extract/core//batch.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "label.do" != "load.do" do "modules/extract/core//label.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "utility.do" != "load.do" do "modules/extract/core//utility.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "mapping.do" != "load.do" do "modules/extract/core//mapping.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "extraction.do" != "load.do" do "modules/extract/core//extraction.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "load.do" != "load.do" do "modules/extract/core//load.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "validate.do" != "load.do" do "modules/extract/core//validate.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "init.do" != "load.do" do "modules/extract/core//init.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "merge.do" != "load.do" do "modules/extract/core//merge.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "generate.do" != "load.do" do "modules/extract/core//generate.do"
  - {c )-}
  - {c )-}
  - local files : dir "./`path'" files "*.do"
  = local files : dir "./modules/extract/core/addons/" files "*.do"
  - foreach file in `files' {c -(}
  = foreach file in "psu_mapping.do" "collapse.do" "custom.do" "mergexy.do" "india_urban.do" "age_calculator.do" "translate_labels.do" "reshape2.do" "gbd_subnat.do" {c -(}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "psu_mapping.do" != "load.do" do "modules/extract/core/addons//psu_mapping.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "collapse.do" != "load.do" do "modules/extract/core/addons//collapse.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "custom.do" != "load.do" do "modules/extract/core/addons//custom.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "mergexy.do" != "load.do" do "modules/extract/core/addons//mergexy.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "india_urban.do" != "load.do" do "modules/extract/core/addons//india_urban.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "age_calculator.do" != "load.do" do "modules/extract/core/addons//age_calculator.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "translate_labels.do" != "load.do" do "modules/extract/core/addons//translate_labels.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "reshape2.do" != "load.do" do "modules/extract/core/addons//reshape2.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "gbd_subnat.do" != "load.do" do "modules/extract/core/addons//gbd_subnat.do"
  - {c )-}
  - {c )-}
    {hline 77} begin adopath {hline}
    - version 6
    - gettoken op 0: 0, parse("+- ")
    - if `"`op'"'=="+" {c -(}
    = if `"+"'=="+" {c -(}
    - gettoken op: 0, parse("+- ")
    - if `"`op'"' == "+" {c -(}
    = if `"modules/extract/core/addons/"' == "+" {c -(}
      gettoken op 0: 0, parse("+- ")
      local op "++"
      {c )-}
    - else local op "+"
    - Chkrest `op' `0'
    = Chkrest +  modules/extract/core/addons/
      {hline 67} begin adopath.Chkrest {hline}
      - gettoken op 0: 0
      - local hold `"`0'"'
      = local hold `"  modules/extract/core/addons/"'
      - gettoken mytok 0: 0
      - sret local token `"`mytok'"'
      = sret local token `"modules/extract/core/addons/"'
      - if trim(`"`s(token)'"')=="" {c -(}
      = if trim(`"modules/extract/core/addons/"')=="" {c -(}
        error 198
        {c )-}
      - if trim(`"`0'"') != "" {c -(}
      = if trim(`""') != "" {c -(}
        capture noisily error 198
        local hold = trim(`"`hold'"')
        di in red `"perhaps you meant to type  adopath `op' "`hold'""'
        exit 198
        {c )-}
      {hline 69} end adopath.Chkrest {hline}
    - local dir `"`s(token)'"'
    = local dir `"modules/extract/core/addons/"'
    - sret clear
    - capture adopath - `"`dir'"'
    = capture adopath - `"modules/extract/core/addons/"'
      {hline 75} begin adopath {hline}
      - version 6
      - gettoken op 0: 0, parse("+- ")
      - if `"`op'"'=="+" {c -(}
      = if `"-"'=="+" {c -(}
        gettoken op: 0, parse("+- ")
        if `"`op'"' == "+" {c -(}
        gettoken op 0: 0, parse("+- ")
        local op "++"
        {c )-}
        else local op "+"
        Chkrest `op' `0'
        local dir `"`s(token)'"'
        sret clear
        capture adopath - `"`dir'"'
        if "`op'" == "++" {c -(}
        global S_ADO `"`"`dir'"';$S_ADO"'
        {c )-}
        else global S_ADO `"$S_ADO;`"`dir'"'"'
        adopath
        exit
        {c )-}
      - parse `"$S_ADO"', parse(" ;")
      = parse `"`"BASE"';`"SITE"';`"."';`"PERSONAL"';`"PLUS"';`"OLDPLACE"';`"modules/extract/core/addons/"'"', parse(" ;")
      - local n 0
      - while `"`1'"' != "" {c -(}
      = while `"BASE"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"BASE"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 0 + 1
      - local e`n' `"`1'"'
      = local e1 `"BASE"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"SITE"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"SITE"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 1 + 1
      - local e`n' `"`1'"'
      = local e2 `"SITE"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"."' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"."' != ";" {c -(}
      - local n = `n' + 1
      = local n = 2 + 1
      - local e`n' `"`1'"'
      = local e3 `"."'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"PERSONAL"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"PERSONAL"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 3 + 1
      - local e`n' `"`1'"'
      = local e4 `"PERSONAL"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"PLUS"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"PLUS"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 4 + 1
      - local e`n' `"`1'"'
      = local e5 `"PLUS"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"OLDPLACE"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"OLDPLACE"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 5 + 1
      - local e`n' `"`1'"'
      = local e6 `"OLDPLACE"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"modules/extract/core/addons/"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"modules/extract/core/addons/"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 6 + 1
      - local e`n' `"`1'"'
      = local e7 `"modules/extract/core/addons/"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `""' != "" {c -(}
        if `"`1'"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
        mac shift
        {c )-}
      - if `"`op'"' == "" {c -(}
      = if `"-"' == "" {c -(}
        local i 1
        while `i' <= `n' {c -(}
        IsKey `"`e`i''"'
        if r(builtin) {c -(}
        local realdir : sysdir `"`e`i''"'
        di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
        {c )-}
        else {c -(}
        di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
        {c )-}
        local i = `i' + 1
        {c )-}
        exit
        {c )-}
      - if `"`op'"'=="-" {c -(}
      = if `"-"'=="-" {c -(}
      - Chkrest - `0'
      = Chkrest -  `"modules/extract/core/addons/"'
        {hline 65} begin adopath.Chkrest {hline}
        - gettoken op 0: 0
        - local hold `"`0'"'
        = local hold `"  `"modules/extract/core/addons/"'"'
        - gettoken mytok 0: 0
        - sret local token `"`mytok'"'
        = sret local token `"modules/extract/core/addons/"'
        - if trim(`"`s(token)'"')=="" {c -(}
        = if trim(`"modules/extract/core/addons/"')=="" {c -(}
          error 198
          {c )-}
        - if trim(`"`0'"') != "" {c -(}
        = if trim(`""') != "" {c -(}
          capture noisily error 198
          local hold = trim(`"`hold'"')
          di in red `"perhaps you meant to type  adopath `op' "`hold'""'
          exit 198
          {c )-}
        {hline 67} end adopath.Chkrest {hline}
      - local dir `"`s(token)'"'
      = local dir `"modules/extract/core/addons/"'
      - sret clear
      - capture confirm number `dir'
      = capture confirm number modules/extract/core/addons/
      - if _rc==0 {c -(}
        if `dir' > `n' | `dir'<1 {c -(}
        di in red "no `dir'th element in current adopath"
        exit 111
        {c )-}
        global S_ADO
        local i 1
        local sim
        while `i' <= `n' {c -(}
        if `i' != `dir' {c -(}
        global S_ADO `"$S_ADO`sim'`"`e`i''"'"'
        local sim ";"
        {c )-}
        local i = `i' + 1
        {c )-}
        adopath
        exit
        {c )-}
      - local i 1
      - while `i' <= `n' {c -(}
      = while 1 <= 7 {c -(}
      - if `"`e`i''"' == `"`dir'"' {c -(}
      = if `"BASE"' == `"modules/extract/core/addons/"' {c -(}
        adopath - `i'
        exit
        {c )-}
      - local i = `i' + 1
      = local i = 1 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 2 <= 7 {c -(}
      - if `"`e`i''"' == `"`dir'"' {c -(}
      = if `"SITE"' == `"modules/extract/core/addons/"' {c -(}
        adopath - `i'
        exit
        {c )-}
      - local i = `i' + 1
      = local i = 2 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 3 <= 7 {c -(}
      - if `"`e`i''"' == `"`dir'"' {c -(}
      = if `"."' == `"modules/extract/core/addons/"' {c -(}
        adopath - `i'
        exit
        {c )-}
      - local i = `i' + 1
      = local i = 3 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 4 <= 7 {c -(}
      - if `"`e`i''"' == `"`dir'"' {c -(}
      = if `"PERSONAL"' == `"modules/extract/core/addons/"' {c -(}
        adopath - `i'
        exit
        {c )-}
      - local i = `i' + 1
      = local i = 4 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 5 <= 7 {c -(}
      - if `"`e`i''"' == `"`dir'"' {c -(}
      = if `"PLUS"' == `"modules/extract/core/addons/"' {c -(}
        adopath - `i'
        exit
        {c )-}
      - local i = `i' + 1
      = local i = 5 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 6 <= 7 {c -(}
      - if `"`e`i''"' == `"`dir'"' {c -(}
      = if `"OLDPLACE"' == `"modules/extract/core/addons/"' {c -(}
        adopath - `i'
        exit
        {c )-}
      - local i = `i' + 1
      = local i = 6 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 7 <= 7 {c -(}
      - if `"`e`i''"' == `"`dir'"' {c -(}
      = if `"modules/extract/core/addons/"' == `"modules/extract/core/addons/"' {c -(}
      - adopath - `i'
      = adopath - 7
        {hline 73} begin adopath {hline}
        - version 6
        - gettoken op 0: 0, parse("+- ")
        - if `"`op'"'=="+" {c -(}
        = if `"-"'=="+" {c -(}
          gettoken op: 0, parse("+- ")
          if `"`op'"' == "+" {c -(}
          gettoken op 0: 0, parse("+- ")
          local op "++"
          {c )-}
          else local op "+"
          Chkrest `op' `0'
          local dir `"`s(token)'"'
          sret clear
          capture adopath - `"`dir'"'
          if "`op'" == "++" {c -(}
          global S_ADO `"`"`dir'"';$S_ADO"'
          {c )-}
          else global S_ADO `"$S_ADO;`"`dir'"'"'
          adopath
          exit
          {c )-}
        - parse `"$S_ADO"', parse(" ;")
        = parse `"`"BASE"';`"SITE"';`"."';`"PERSONAL"';`"PLUS"';`"OLDPLACE"';`"modules/extract/core/addons/"'"', parse(" ;")
        - local n 0
        - while `"`1'"' != "" {c -(}
        = while `"BASE"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `"BASE"' != ";" {c -(}
        - local n = `n' + 1
        = local n = 0 + 1
        - local e`n' `"`1'"'
        = local e1 `"BASE"'
        - {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `";"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `";"' != ";" {c -(}
          local n = `n' + 1
          local e`n' `"`1'"'
          {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `"SITE"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `"SITE"' != ";" {c -(}
        - local n = `n' + 1
        = local n = 1 + 1
        - local e`n' `"`1'"'
        = local e2 `"SITE"'
        - {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `";"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `";"' != ";" {c -(}
          local n = `n' + 1
          local e`n' `"`1'"'
          {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `"."' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `"."' != ";" {c -(}
        - local n = `n' + 1
        = local n = 2 + 1
        - local e`n' `"`1'"'
        = local e3 `"."'
        - {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `";"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `";"' != ";" {c -(}
          local n = `n' + 1
          local e`n' `"`1'"'
          {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `"PERSONAL"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `"PERSONAL"' != ";" {c -(}
        - local n = `n' + 1
        = local n = 3 + 1
        - local e`n' `"`1'"'
        = local e4 `"PERSONAL"'
        - {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `";"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `";"' != ";" {c -(}
          local n = `n' + 1
          local e`n' `"`1'"'
          {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `"PLUS"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `"PLUS"' != ";" {c -(}
        - local n = `n' + 1
        = local n = 4 + 1
        - local e`n' `"`1'"'
        = local e5 `"PLUS"'
        - {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `";"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `";"' != ";" {c -(}
          local n = `n' + 1
          local e`n' `"`1'"'
          {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `"OLDPLACE"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `"OLDPLACE"' != ";" {c -(}
        - local n = `n' + 1
        = local n = 5 + 1
        - local e`n' `"`1'"'
        = local e6 `"OLDPLACE"'
        - {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `";"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `";"' != ";" {c -(}
          local n = `n' + 1
          local e`n' `"`1'"'
          {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `"modules/extract/core/addons/"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `"modules/extract/core/addons/"' != ";" {c -(}
        - local n = `n' + 1
        = local n = 6 + 1
        - local e`n' `"`1'"'
        = local e7 `"modules/extract/core/addons/"'
        - {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `""' != "" {c -(}
          if `"`1'"' != ";" {c -(}
          local n = `n' + 1
          local e`n' `"`1'"'
          {c )-}
          mac shift
          {c )-}
        - if `"`op'"' == "" {c -(}
        = if `"-"' == "" {c -(}
          local i 1
          while `i' <= `n' {c -(}
          IsKey `"`e`i''"'
          if r(builtin) {c -(}
          local realdir : sysdir `"`e`i''"'
          di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
          {c )-}
          else {c -(}
          di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
          {c )-}
          local i = `i' + 1
          {c )-}
          exit
          {c )-}
        - if `"`op'"'=="-" {c -(}
        = if `"-"'=="-" {c -(}
        - Chkrest - `0'
        = Chkrest -  7
          {hline 63} begin adopath.Chkrest {hline}
          - gettoken op 0: 0
          - local hold `"`0'"'
          = local hold `"  7"'
          - gettoken mytok 0: 0
          - sret local token `"`mytok'"'
          = sret local token `"7"'
          - if trim(`"`s(token)'"')=="" {c -(}
          = if trim(`"7"')=="" {c -(}
            error 198
            {c )-}
          - if trim(`"`0'"') != "" {c -(}
          = if trim(`""') != "" {c -(}
            capture noisily error 198
            local hold = trim(`"`hold'"')
            di in red `"perhaps you meant to type  adopath `op' "`hold'""'
            exit 198
            {c )-}
          {hline 65} end adopath.Chkrest {hline}
        - local dir `"`s(token)'"'
        = local dir `"7"'
        - sret clear
        - capture confirm number `dir'
        = capture confirm number 7
        - if _rc==0 {c -(}
        - if `dir' > `n' | `dir'<1 {c -(}
        = if 7 > 7 | 7<1 {c -(}
          di in red "no `dir'th element in current adopath"
          exit 111
          {c )-}
        - global S_ADO
        - local i 1
        - local sim
        - while `i' <= `n' {c -(}
        = while 1 <= 7 {c -(}
        - if `i' != `dir' {c -(}
        = if 1 != 7 {c -(}
        - global S_ADO `"$S_ADO`sim'`"`e`i''"'"'
        = global S_ADO `"`"BASE"'"'
        - local sim ";"
        - {c )-}
        - local i = `i' + 1
        = local i = 1 + 1
        - {c )-}
        - while `i' <= `n' {c -(}
        = while 2 <= 7 {c -(}
        - if `i' != `dir' {c -(}
        = if 2 != 7 {c -(}
        - global S_ADO `"$S_ADO`sim'`"`e`i''"'"'
        = global S_ADO `"`"BASE"';`"SITE"'"'
        - local sim ";"
        - {c )-}
        - local i = `i' + 1
        = local i = 2 + 1
        - {c )-}
        - while `i' <= `n' {c -(}
        = while 3 <= 7 {c -(}
        - if `i' != `dir' {c -(}
        = if 3 != 7 {c -(}
        - global S_ADO `"$S_ADO`sim'`"`e`i''"'"'
        = global S_ADO `"`"BASE"';`"SITE"';`"."'"'
        - local sim ";"
        - {c )-}
        - local i = `i' + 1
        = local i = 3 + 1
        - {c )-}
        - while `i' <= `n' {c -(}
        = while 4 <= 7 {c -(}
        - if `i' != `dir' {c -(}
        = if 4 != 7 {c -(}
        - global S_ADO `"$S_ADO`sim'`"`e`i''"'"'
        = global S_ADO `"`"BASE"';`"SITE"';`"."';`"PERSONAL"'"'
        - local sim ";"
        - {c )-}
        - local i = `i' + 1
        = local i = 4 + 1
        - {c )-}
        - while `i' <= `n' {c -(}
        = while 5 <= 7 {c -(}
        - if `i' != `dir' {c -(}
        = if 5 != 7 {c -(}
        - global S_ADO `"$S_ADO`sim'`"`e`i''"'"'
        = global S_ADO `"`"BASE"';`"SITE"';`"."';`"PERSONAL"';`"PLUS"'"'
        - local sim ";"
        - {c )-}
        - local i = `i' + 1
        = local i = 5 + 1
        - {c )-}
        - while `i' <= `n' {c -(}
        = while 6 <= 7 {c -(}
        - if `i' != `dir' {c -(}
        = if 6 != 7 {c -(}
        - global S_ADO `"$S_ADO`sim'`"`e`i''"'"'
        = global S_ADO `"`"BASE"';`"SITE"';`"."';`"PERSONAL"';`"PLUS"';`"OLDPLACE"'"'
        - local sim ";"
        - {c )-}
        - local i = `i' + 1
        = local i = 6 + 1
        - {c )-}
        - while `i' <= `n' {c -(}
        = while 7 <= 7 {c -(}
        - if `i' != `dir' {c -(}
        = if 7 != 7 {c -(}
          global S_ADO `"$S_ADO`sim'`"`e`i''"'"'
          local sim ";"
          {c )-}
        - local i = `i' + 1
        = local i = 7 + 1
        - {c )-}
        - while `i' <= `n' {c -(}
        = while 8 <= 7 {c -(}
          if `i' != `dir' {c -(}
          global S_ADO `"$S_ADO`sim'`"`e`i''"'"'
          local sim ";"
          {c )-}
          local i = `i' + 1
          {c )-}
        - adopath
          {hline 71} begin adopath {hline}
          - version 6
          - gettoken op 0: 0, parse("+- ")
          - if `"`op'"'=="+" {c -(}
          = if `""'=="+" {c -(}
            gettoken op: 0, parse("+- ")
            if `"`op'"' == "+" {c -(}
            gettoken op 0: 0, parse("+- ")
            local op "++"
            {c )-}
            else local op "+"
            Chkrest `op' `0'
            local dir `"`s(token)'"'
            sret clear
            capture adopath - `"`dir'"'
            if "`op'" == "++" {c -(}
            global S_ADO `"`"`dir'"';$S_ADO"'
            {c )-}
            else global S_ADO `"$S_ADO;`"`dir'"'"'
            adopath
            exit
            {c )-}
          - parse `"$S_ADO"', parse(" ;")
          = parse `"`"BASE"';`"SITE"';`"."';`"PERSONAL"';`"PLUS"';`"OLDPLACE"'"', parse(" ;")
          - local n 0
          - while `"`1'"' != "" {c -(}
          = while `"BASE"' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `"BASE"' != ";" {c -(}
          - local n = `n' + 1
          = local n = 0 + 1
          - local e`n' `"`1'"'
          = local e1 `"BASE"'
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `";"' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `";"' != ";" {c -(}
            local n = `n' + 1
            local e`n' `"`1'"'
            {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `"SITE"' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `"SITE"' != ";" {c -(}
          - local n = `n' + 1
          = local n = 1 + 1
          - local e`n' `"`1'"'
          = local e2 `"SITE"'
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `";"' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `";"' != ";" {c -(}
            local n = `n' + 1
            local e`n' `"`1'"'
            {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `"."' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `"."' != ";" {c -(}
          - local n = `n' + 1
          = local n = 2 + 1
          - local e`n' `"`1'"'
          = local e3 `"."'
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `";"' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `";"' != ";" {c -(}
            local n = `n' + 1
            local e`n' `"`1'"'
            {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `"PERSONAL"' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `"PERSONAL"' != ";" {c -(}
          - local n = `n' + 1
          = local n = 3 + 1
          - local e`n' `"`1'"'
          = local e4 `"PERSONAL"'
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `";"' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `";"' != ";" {c -(}
            local n = `n' + 1
            local e`n' `"`1'"'
            {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `"PLUS"' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `"PLUS"' != ";" {c -(}
          - local n = `n' + 1
          = local n = 4 + 1
          - local e`n' `"`1'"'
          = local e5 `"PLUS"'
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `";"' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `";"' != ";" {c -(}
            local n = `n' + 1
            local e`n' `"`1'"'
            {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `"OLDPLACE"' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `"OLDPLACE"' != ";" {c -(}
          - local n = `n' + 1
          = local n = 5 + 1
          - local e`n' `"`1'"'
          = local e6 `"OLDPLACE"'
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `""' != "" {c -(}
            if `"`1'"' != ";" {c -(}
            local n = `n' + 1
            local e`n' `"`1'"'
            {c )-}
            mac shift
            {c )-}
          - if `"`op'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local i 1
          - while `i' <= `n' {c -(}
          = while 1 <= 6 {c -(}
          - IsKey `"`e`i''"'
          = IsKey `"BASE"'
            {hline 63} begin adopath.IsKey {hline}
            - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
            = if `"BASE"'==substr(`"BASE"',1,8) {c -(}
            - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
            = if `"BASE"'=="UPDATES" | `"BASE"'=="BASE" | `"BASE"'=="SITE" | `"BASE"'=="STBPLUS" | `"BASE"'=="PLUS" | `"BASE"'=="PERSONAL" | `"BASE"'=="OLDPLACE" | `"BASE"'=="FUTURE" {c -(}
            - return scalar builtin = 1
            - exit
            {hline 65} end adopath.IsKey {hline}
          - if r(builtin) {c -(}
          - local realdir : sysdir `"`e`i''"'
          = local realdir : sysdir `"BASE"'
          - di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
          = di in gr `"  [1]"' _col(8) `"(BASE)"' _col(20) `"""' in ye `"/opt/stata13/ado/base/"' in gr `"""'
          - {c )-}
          - else {c -(}
            di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
            {c )-}
          - local i = `i' + 1
          = local i = 1 + 1
          - {c )-}
          - while `i' <= `n' {c -(}
          = while 2 <= 6 {c -(}
          - IsKey `"`e`i''"'
          = IsKey `"SITE"'
            {hline 63} begin adopath.IsKey {hline}
            - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
            = if `"SITE"'==substr(`"SITE"',1,8) {c -(}
            - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
            = if `"SITE"'=="UPDATES" | `"SITE"'=="BASE" | `"SITE"'=="SITE" | `"SITE"'=="STBPLUS" | `"SITE"'=="PLUS" | `"SITE"'=="PERSONAL" | `"SITE"'=="OLDPLACE" | `"SITE"'=="FUTURE" {c -(}
            - return scalar builtin = 1
            - exit
            {hline 65} end adopath.IsKey {hline}
          - if r(builtin) {c -(}
          - local realdir : sysdir `"`e`i''"'
          = local realdir : sysdir `"SITE"'
          - di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
          = di in gr `"  [2]"' _col(8) `"(SITE)"' _col(20) `"""' in ye `"/opt/ado/"' in gr `"""'
          - {c )-}
          - else {c -(}
            di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
            {c )-}
          - local i = `i' + 1
          = local i = 2 + 1
          - {c )-}
          - while `i' <= `n' {c -(}
          = while 3 <= 6 {c -(}
          - IsKey `"`e`i''"'
          = IsKey `"."'
            {hline 63} begin adopath.IsKey {hline}
            - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
            = if `"."'==substr(`"."',1,8) {c -(}
            - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
            = if `"."'=="UPDATES" | `"."'=="BASE" | `"."'=="SITE" | `"."'=="STBPLUS" | `"."'=="PLUS" | `"."'=="PERSONAL" | `"."'=="OLDPLACE" | `"."'=="FUTURE" {c -(}
              return scalar builtin = 1
              exit
              {c )-}
            - {c )-}
            - return scalar builtin = 0
            {hline 65} end adopath.IsKey {hline}
          - if r(builtin) {c -(}
            local realdir : sysdir `"`e`i''"'
            di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
            {c )-}
          - else {c -(}
          - di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
          = di in gr `"  [3]"' _col(20) `"""' in ye `"."' in gr `"""'
          - {c )-}
          - local i = `i' + 1
          = local i = 3 + 1
          - {c )-}
          - while `i' <= `n' {c -(}
          = while 4 <= 6 {c -(}
          - IsKey `"`e`i''"'
          = IsKey `"PERSONAL"'
            {hline 63} begin adopath.IsKey {hline}
            - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
            = if `"PERSONAL"'==substr(`"PERSONAL"',1,8) {c -(}
            - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
            = if `"PERSONAL"'=="UPDATES" | `"PERSONAL"'=="BASE" | `"PERSONAL"'=="SITE" | `"PERSONAL"'=="STBPLUS" | `"PERSONAL"'=="PLUS" | `"PERSONAL"'=="PERSONAL" | `"PERSONAL"'=="OLDPLACE" | `"PERSONAL"'=="FUTURE" {c -(}
            - return scalar builtin = 1
            - exit
            {hline 65} end adopath.IsKey {hline}
          - if r(builtin) {c -(}
          - local realdir : sysdir `"`e`i''"'
          = local realdir : sysdir `"PERSONAL"'
          - di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
          = di in gr `"  [4]"' _col(8) `"(PERSONAL)"' _col(20) `"""' in ye `"~/ado/personal/"' in gr `"""'
          - {c )-}
          - else {c -(}
            di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
            {c )-}
          - local i = `i' + 1
          = local i = 4 + 1
          - {c )-}
          - while `i' <= `n' {c -(}
          = while 5 <= 6 {c -(}
          - IsKey `"`e`i''"'
          = IsKey `"PLUS"'
            {hline 63} begin adopath.IsKey {hline}
            - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
            = if `"PLUS"'==substr(`"PLUS"',1,8) {c -(}
            - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
            = if `"PLUS"'=="UPDATES" | `"PLUS"'=="BASE" | `"PLUS"'=="SITE" | `"PLUS"'=="STBPLUS" | `"PLUS"'=="PLUS" | `"PLUS"'=="PERSONAL" | `"PLUS"'=="OLDPLACE" | `"PLUS"'=="FUTURE" {c -(}
            - return scalar builtin = 1
            - exit
            {hline 65} end adopath.IsKey {hline}
          - if r(builtin) {c -(}
          - local realdir : sysdir `"`e`i''"'
          = local realdir : sysdir `"PLUS"'
          - di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
          = di in gr `"  [5]"' _col(8) `"(PLUS)"' _col(20) `"""' in ye `"~/ado/plus/"' in gr `"""'
          - {c )-}
          - else {c -(}
            di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
            {c )-}
          - local i = `i' + 1
          = local i = 5 + 1
          - {c )-}
          - while `i' <= `n' {c -(}
          = while 6 <= 6 {c -(}
          - IsKey `"`e`i''"'
          = IsKey `"OLDPLACE"'
            {hline 63} begin adopath.IsKey {hline}
            - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
            = if `"OLDPLACE"'==substr(`"OLDPLACE"',1,8) {c -(}
            - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
            = if `"OLDPLACE"'=="UPDATES" | `"OLDPLACE"'=="BASE" | `"OLDPLACE"'=="SITE" | `"OLDPLACE"'=="STBPLUS" | `"OLDPLACE"'=="PLUS" | `"OLDPLACE"'=="PERSONAL" | `"OLDPLACE"'=="OLDPLACE" | `"OLDPLACE"'=="FUTURE" {c -(}
            - return scalar builtin = 1
            - exit
            {hline 65} end adopath.IsKey {hline}
          - if r(builtin) {c -(}
          - local realdir : sysdir `"`e`i''"'
          = local realdir : sysdir `"OLDPLACE"'
          - di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
          = di in gr `"  [6]"' _col(8) `"(OLDPLACE)"' _col(20) `"""' in ye `"~/ado/"' in gr `"""'
          - {c )-}
          - else {c -(}
            di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
            {c )-}
          - local i = `i' + 1
          = local i = 6 + 1
          - {c )-}
          - while `i' <= `n' {c -(}
          = while 7 <= 6 {c -(}
            IsKey `"`e`i''"'
            if r(builtin) {c -(}
            local realdir : sysdir `"`e`i''"'
            di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
            {c )-}
            else {c -(}
            di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
            {c )-}
            local i = `i' + 1
            {c )-}
          - exit
          {hline 73} end adopath {hline}
        - exit
        {hline 75} end adopath {hline}
      - exit
      {hline 77} end adopath {hline}
    - if "`op'" == "++" {c -(}
    = if "+" == "++" {c -(}
      global S_ADO `"`"`dir'"';$S_ADO"'
      {c )-}
    - else global S_ADO `"$S_ADO;`"`dir'"'"'
    = else global S_ADO `"`"BASE"';`"SITE"';`"."';`"PERSONAL"';`"PLUS"';`"OLDPLACE"';`"modules/extract/core/addons/"'"'
    - adopath
      {hline 75} begin adopath {hline}
      - version 6
      - gettoken op 0: 0, parse("+- ")
      - if `"`op'"'=="+" {c -(}
      = if `""'=="+" {c -(}
        gettoken op: 0, parse("+- ")
        if `"`op'"' == "+" {c -(}
        gettoken op 0: 0, parse("+- ")
        local op "++"
        {c )-}
        else local op "+"
        Chkrest `op' `0'
        local dir `"`s(token)'"'
        sret clear
        capture adopath - `"`dir'"'
        if "`op'" == "++" {c -(}
        global S_ADO `"`"`dir'"';$S_ADO"'
        {c )-}
        else global S_ADO `"$S_ADO;`"`dir'"'"'
        adopath
        exit
        {c )-}
      - parse `"$S_ADO"', parse(" ;")
      = parse `"`"BASE"';`"SITE"';`"."';`"PERSONAL"';`"PLUS"';`"OLDPLACE"';`"modules/extract/core/addons/"'"', parse(" ;")
      - local n 0
      - while `"`1'"' != "" {c -(}
      = while `"BASE"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"BASE"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 0 + 1
      - local e`n' `"`1'"'
      = local e1 `"BASE"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"SITE"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"SITE"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 1 + 1
      - local e`n' `"`1'"'
      = local e2 `"SITE"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"."' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"."' != ";" {c -(}
      - local n = `n' + 1
      = local n = 2 + 1
      - local e`n' `"`1'"'
      = local e3 `"."'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"PERSONAL"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"PERSONAL"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 3 + 1
      - local e`n' `"`1'"'
      = local e4 `"PERSONAL"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"PLUS"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"PLUS"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 4 + 1
      - local e`n' `"`1'"'
      = local e5 `"PLUS"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"OLDPLACE"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"OLDPLACE"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 5 + 1
      - local e`n' `"`1'"'
      = local e6 `"OLDPLACE"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"modules/extract/core/addons/"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"modules/extract/core/addons/"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 6 + 1
      - local e`n' `"`1'"'
      = local e7 `"modules/extract/core/addons/"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `""' != "" {c -(}
        if `"`1'"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
        mac shift
        {c )-}
      - if `"`op'"' == "" {c -(}
      = if `""' == "" {c -(}
      - local i 1
      - while `i' <= `n' {c -(}
      = while 1 <= 7 {c -(}
      - IsKey `"`e`i''"'
      = IsKey `"BASE"'
        {hline 67} begin adopath.IsKey {hline}
        - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
        = if `"BASE"'==substr(`"BASE"',1,8) {c -(}
        - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
        = if `"BASE"'=="UPDATES" | `"BASE"'=="BASE" | `"BASE"'=="SITE" | `"BASE"'=="STBPLUS" | `"BASE"'=="PLUS" | `"BASE"'=="PERSONAL" | `"BASE"'=="OLDPLACE" | `"BASE"'=="FUTURE" {c -(}
        - return scalar builtin = 1
        - exit
        {hline 69} end adopath.IsKey {hline}
      - if r(builtin) {c -(}
      - local realdir : sysdir `"`e`i''"'
      = local realdir : sysdir `"BASE"'
      - di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
      = di in gr `"  [1]"' _col(8) `"(BASE)"' _col(20) `"""' in ye `"/opt/stata13/ado/base/"' in gr `"""'
      - {c )-}
      - else {c -(}
        di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
        {c )-}
      - local i = `i' + 1
      = local i = 1 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 2 <= 7 {c -(}
      - IsKey `"`e`i''"'
      = IsKey `"SITE"'
        {hline 67} begin adopath.IsKey {hline}
        - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
        = if `"SITE"'==substr(`"SITE"',1,8) {c -(}
        - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
        = if `"SITE"'=="UPDATES" | `"SITE"'=="BASE" | `"SITE"'=="SITE" | `"SITE"'=="STBPLUS" | `"SITE"'=="PLUS" | `"SITE"'=="PERSONAL" | `"SITE"'=="OLDPLACE" | `"SITE"'=="FUTURE" {c -(}
        - return scalar builtin = 1
        - exit
        {hline 69} end adopath.IsKey {hline}
      - if r(builtin) {c -(}
      - local realdir : sysdir `"`e`i''"'
      = local realdir : sysdir `"SITE"'
      - di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
      = di in gr `"  [2]"' _col(8) `"(SITE)"' _col(20) `"""' in ye `"/opt/ado/"' in gr `"""'
      - {c )-}
      - else {c -(}
        di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
        {c )-}
      - local i = `i' + 1
      = local i = 2 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 3 <= 7 {c -(}
      - IsKey `"`e`i''"'
      = IsKey `"."'
        {hline 67} begin adopath.IsKey {hline}
        - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
        = if `"."'==substr(`"."',1,8) {c -(}
        - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
        = if `"."'=="UPDATES" | `"."'=="BASE" | `"."'=="SITE" | `"."'=="STBPLUS" | `"."'=="PLUS" | `"."'=="PERSONAL" | `"."'=="OLDPLACE" | `"."'=="FUTURE" {c -(}
          return scalar builtin = 1
          exit
          {c )-}
        - {c )-}
        - return scalar builtin = 0
        {hline 69} end adopath.IsKey {hline}
      - if r(builtin) {c -(}
        local realdir : sysdir `"`e`i''"'
        di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
        {c )-}
      - else {c -(}
      - di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
      = di in gr `"  [3]"' _col(20) `"""' in ye `"."' in gr `"""'
      - {c )-}
      - local i = `i' + 1
      = local i = 3 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 4 <= 7 {c -(}
      - IsKey `"`e`i''"'
      = IsKey `"PERSONAL"'
        {hline 67} begin adopath.IsKey {hline}
        - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
        = if `"PERSONAL"'==substr(`"PERSONAL"',1,8) {c -(}
        - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
        = if `"PERSONAL"'=="UPDATES" | `"PERSONAL"'=="BASE" | `"PERSONAL"'=="SITE" | `"PERSONAL"'=="STBPLUS" | `"PERSONAL"'=="PLUS" | `"PERSONAL"'=="PERSONAL" | `"PERSONAL"'=="OLDPLACE" | `"PERSONAL"'=="FUTURE" {c -(}
        - return scalar builtin = 1
        - exit
        {hline 69} end adopath.IsKey {hline}
      - if r(builtin) {c -(}
      - local realdir : sysdir `"`e`i''"'
      = local realdir : sysdir `"PERSONAL"'
      - di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
      = di in gr `"  [4]"' _col(8) `"(PERSONAL)"' _col(20) `"""' in ye `"~/ado/personal/"' in gr `"""'
      - {c )-}
      - else {c -(}
        di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
        {c )-}
      - local i = `i' + 1
      = local i = 4 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 5 <= 7 {c -(}
      - IsKey `"`e`i''"'
      = IsKey `"PLUS"'
        {hline 67} begin adopath.IsKey {hline}
        - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
        = if `"PLUS"'==substr(`"PLUS"',1,8) {c -(}
        - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
        = if `"PLUS"'=="UPDATES" | `"PLUS"'=="BASE" | `"PLUS"'=="SITE" | `"PLUS"'=="STBPLUS" | `"PLUS"'=="PLUS" | `"PLUS"'=="PERSONAL" | `"PLUS"'=="OLDPLACE" | `"PLUS"'=="FUTURE" {c -(}
        - return scalar builtin = 1
        - exit
        {hline 69} end adopath.IsKey {hline}
      - if r(builtin) {c -(}
      - local realdir : sysdir `"`e`i''"'
      = local realdir : sysdir `"PLUS"'
      - di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
      = di in gr `"  [5]"' _col(8) `"(PLUS)"' _col(20) `"""' in ye `"~/ado/plus/"' in gr `"""'
      - {c )-}
      - else {c -(}
        di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
        {c )-}
      - local i = `i' + 1
      = local i = 5 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 6 <= 7 {c -(}
      - IsKey `"`e`i''"'
      = IsKey `"OLDPLACE"'
        {hline 67} begin adopath.IsKey {hline}
        - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
        = if `"OLDPLACE"'==substr(`"OLDPLACE"',1,8) {c -(}
        - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
        = if `"OLDPLACE"'=="UPDATES" | `"OLDPLACE"'=="BASE" | `"OLDPLACE"'=="SITE" | `"OLDPLACE"'=="STBPLUS" | `"OLDPLACE"'=="PLUS" | `"OLDPLACE"'=="PERSONAL" | `"OLDPLACE"'=="OLDPLACE" | `"OLDPLACE"'=="FUTURE" {c -(}
        - return scalar builtin = 1
        - exit
        {hline 69} end adopath.IsKey {hline}
      - if r(builtin) {c -(}
      - local realdir : sysdir `"`e`i''"'
      = local realdir : sysdir `"OLDPLACE"'
      - di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
      = di in gr `"  [6]"' _col(8) `"(OLDPLACE)"' _col(20) `"""' in ye `"~/ado/"' in gr `"""'
      - {c )-}
      - else {c -(}
        di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
        {c )-}
      - local i = `i' + 1
      = local i = 6 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 7 <= 7 {c -(}
      - IsKey `"`e`i''"'
      = IsKey `"modules/extract/core/addons/"'
        {hline 67} begin adopath.IsKey {hline}
        - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
        = if `"modules/extract/core/addons/"'==substr(`"modules/extract/core/addons/"',1,8) {c -(}
          if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
          return scalar builtin = 1
          exit
          {c )-}
          {c )-}
        - return scalar builtin = 0
        {hline 69} end adopath.IsKey {hline}
      - if r(builtin) {c -(}
        local realdir : sysdir `"`e`i''"'
        di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
        {c )-}
      - else {c -(}
      - di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
      = di in gr `"  [7]"' _col(20) `"""' in ye `"modules/extract/core/addons/"' in gr `"""'
      - {c )-}
      - local i = `i' + 1
      = local i = 7 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 8 <= 7 {c -(}
        IsKey `"`e`i''"'
        if r(builtin) {c -(}
        local realdir : sysdir `"`e`i''"'
        di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
        {c )-}
        else {c -(}
        di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
        {c )-}
        local i = `i' + 1
        {c )-}
      - exit
      {hline 77} end adopath {hline}
    - exit
    {hline 79} end adopath {hline}
    {hline 74} begin ubcov_path {hline}
    - syntax
    - local pwd = subinstr(c(pwd), "\", "/", .)
    - preserve
    - clear
      {hline 77} begin clear {hline}
      - if _caller() < 10 {c -(}
        _clear_9 `0'
        exit
        {c )-}
      - version 10
      - syntax [anything]
      - tokenize `anything'
      = tokenize 
      - if `"`2'"' != "" {c -(}
      = if `""' != "" {c -(}
        display as err "`2' not allowed"
        exit 198
        {c )-}
      - if "`1'"=="" {c -(}
      = if ""=="" {c -(}
      - drop _all
      - label drop _all
        {hline 75} begin label {hline}
        - version 10.0
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {c -(}
        = if (strpos("drop", "val") > 0 ) {c -(}
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {c -(}
          local fix ", nofix"
          {c )-}
          gettoken var rest : anything
          while `"`rest'"' != "" {c -(}
          gettoken lab rest : rest
          local label "`lab'"
          {c )-}
          local vlist : list anything - lab
          if "`lab'" == "." {c -(}
          local lab ""
          {c )-}
          foreach var of varlist `vlist' {c -(}
          _label `val' `var' `lab' `fix'
          {c )-}
          {c )-}
        - else {c -(}
        - _label `macval(0)'
        = _label drop _all
        - {c )-}
        {hline 77} end label {hline}
      - {c )-}
      - else if "`1'"=="mata" {c -(}
      = else if ""=="mata" {c -(}
        mata: mata clear
        {c )-}
      - else if inlist("`1'", "results", "matrix") {c -(}
      = else if inlist("", "results", "matrix") {c -(}
        return clear
        clearreturn
        ereturn clear
        sreturn clear
        _return drop _all
        if ("`1'" == "matrix") {c -(}
        matrix drop _all
        _est drop _all
        {c )-}
        {c )-}
      - else if "`1'"=="programs" {c -(}
      = else if ""=="programs" {c -(}
        program drop _all
        {c )-}
      - else if "`1'"=="ado" {c -(}
      = else if ""=="ado" {c -(}
        program drop _allado
        {c )-}
      - else if "`1'"=="*" | "`1'"=="all" {c -(}
      = else if ""=="*" | ""=="all" {c -(}
        capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
        capture
        if (0`semmods') {c -(}
        display as err "-clear all- not allowed while an SEM Builder is open"
        exit 1
        {c )-}
        drop _all
        label drop _all
        matrix drop _all
        scalar drop _all
        constraint drop _all
        eq drop _all
        file close _all
        postutil clear
        _return drop _all
        discard
        program drop _all
        timer clear
        mata: mata clear
        {c )-}
      - else {c -(}
        display as err "`1' not allowed"
        exit 198
        {c )-}
      {hline 79} end clear {hline}
    - set obs 1
    - gen root = "`pwd'"
    = gen root = "/snfs1/WORK/01_covariates/common/ubcov_central"
    - split root, p("ubcov_central")
      {hline 77} begin split {hline}
      - version 7, missing
      - syntax varname(str) [if] [in] [, Generate(str) noTrim Parse(str asis) DESTRING force float Ignore(string) percent Limit(numlist int >0 max=1) ]
      - marksample touse, strok
      - qui count if `touse'
      = qui count if __000000
      - if r(N) == 0 {c -(}
        error 2000
        {c )-}
      - if `"`parse'"' == `""' | `"`parse'"' == `""""' {c -(}
      = if `""ubcov_central""' == `""' | `""ubcov_central""' == `""""' {c -(}
        if "`trim'" != "" {c -(}
        di as err "parsing on spaces incompatible with notrim"
        exit 198
        {c )-}
        local parse `"" ""'
        local trm "trim"
        {c )-}
      - if `"`parse'"' == `""' | `"`parse'"' == `""""' {c -(}
      = if `""ubcov_central""' == `""' | `""ubcov_central""' == `""""' {c -(}
        local parse `"" ""'
        local trm "trim"
        {c )-}
      - local nparse : word count `parse'
      = local nparse : word count "ubcov_central"
      - tokenize `"`parse'"'
      = tokenize `""ubcov_central""'
      - if `"`generate'"' != "" {c -(}
      = if `""' != "" {c -(}
        confirm name `generate'
        if `: word count `generate'' > 1 {c -(}
        di as err "invalid stub `generate'"
        exit 198
        {c )-}
        {c )-}
      - qui {c -(}
      - tempvar vw tp mp pl
      - gen int `tp' = 0
      = gen int __000002 = 0
      - gen int `mp' = 0
      = gen int __000003 = 0
      - gen int `pl' = 0
      = gen int __000004 = 0
      - gen str1 `vw' = ""
      = gen str1 __000001 = ""
      - if "`trim'" == "" {c -(}
      = if "" == "" {c -(}
      - replace `vw' = trim(`varlist') if `touse'
      = replace __000001 = trim(root) if __000000
      - {c )-}
      - else {c -(}
        replace `vw' = `varlist' if `touse'
        {c )-}
      - {c )-}
      - if "`generate'" == "" {c -(}
      = if "" == "" {c -(}
      - local generate "`varlist'"
      = local generate "root"
      - {c )-}
      - local j = 0
      - local go = 1
      - if "`limit'" == "" {c -(}
      = if "" == "" {c -(}
      - local limit .
      - {c )-}
      - qui while `go' & `j' < `limit' {c -(}
      = qui while 1 & 0 < . {c -(}
      - replace `mp' = .
      = replace __000003 = .
      - replace `pl' = 0
      = replace __000004 = 0
      - forval i = 1 / `nparse' {c -(}
      = forval i = 1 / 1 {c -(}
      - forval i = 1 / `nparse' {c -(}
      - replace `tp' = index(`vw', `"``i''"')
      = replace __000002 = index(__000001, `"ubcov_central"')
      - replace `mp' = min(`tp', `mp') if `tp'
      = replace __000003 = min(__000002, __000003) if __000002
      - replace `pl' = length(`"``i''"') if `mp' == `tp'
      = replace __000004 = length(`"ubcov_central"') if __000003 == __000002
      - {c )-}
      - local ++j
      - tempvar part`j'
      = tempvar part1
      - gen str1 `part`j'' = ""
      = gen str1 __000005 = ""
      - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
      = replace __000005 = substr(__000001, 1, __000003-1) if __000003 < .
      - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
      = replace __000001 = (substr(__000001, __000003+__000004, .)) if __000003 < .
      - replace `part`j'' = `vw' if `mp' >= .
      = replace __000005 = __000001 if __000003 >= .
      - replace `vw' = "" if `mp' >= .
      = replace __000001 = "" if __000003 >= .
      - local newvars "`newvars'`generate'`j' "
      = local newvars "root1 "
      - capture assert `vw' == ""
      = capture assert __000001 == ""
      - local go = _rc
      - {c )-}
      - qui while `go' & `j' < `limit' {c -(}
      = qui while 0 & 1 < . {c -(}
        replace `mp' = .
        replace `pl' = 0
        forval i = 1 / `nparse' {c -(}
        replace `tp' = index(`vw', `"``i''"')
        replace `mp' = min(`tp', `mp') if `tp'
        replace `pl' = length(`"``i''"') if `mp' == `tp'
        {c )-}
        local ++j
        tempvar part`j'
        gen str1 `part`j'' = ""
        replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
        replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
        replace `part`j'' = `vw' if `mp' >= .
        replace `vw' = "" if `mp' >= .
        local newvars "`newvars'`generate'`j' "
        capture assert `vw' == ""
        local go = _rc
        {c )-}
      - capture confirm new var `newvars'
      = capture confirm new var root1 
      - if _rc {c -(}
        di as err "invalid stub `generate'"
        exit _rc
        {c )-}
      - qui forval i = 1 / `j' {c -(}
      = qui forval i = 1 / 1 {c -(}
      - qui forval i = 1 / `j' {c -(}
      - gen str1 `generate'`i' = ""
      = gen str1 root1 = ""
      - replace `generate'`i' = `part`i''
      = replace root1 = __000005
      - {c )-}
      - return local varlist "`newvars'"
      = return local varlist "root1 "
      - return local nvars "`j'"
      = return local nvars "1"
      - local s = cond(`j' > 1, "s", "")
      = local s = cond(1 > 1, "s", "")
      - if "`destring'" != "" {c -(}
      = if "" != "" {c -(}
        di as res "variable`s' born as string: "
        {c )-}
      - else di as res "variable`s' created as string: "
      = else di as res "variable created as string: "
      - ds `newvars'
      = ds root1 
        {hline 78} begin ds {hline}
        - version 9
        - local version : di "version " string(_caller()) ":"
        - if (_caller() <= 4) {c -(}
          `version' describe, simple
          exit
          {c )-}
        - else {c -(}
        - ds_util `0'
        = ds_util root1 
          {hline 71} begin ds_util {hline}
          - version 8
          - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detail Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
          - if "`varlist'" == "" {c -(}
          = if "root1" == "" {c -(}
            exit
            {c )-}
          - if !inrange(`indent',0,244) {c -(}
          = if !inrange(0,0,244) {c -(}
            di as err "indent() should be in the range 0..244"
            exit 198
            {c )-}
          - if !inrange(`varwidth',5,32) {c -(}
          = if !inrange(12,5,32) {c -(}
            di as err "varwidth() should be in the range 5..32"
            exit 198
            {c )-}
          - if !inrange(`skip',1,10) {c -(}
          = if !inrange(2,1,10) {c -(}
            di as err "skip() should be in the range 1..10"
            exit 198
            {c )-}
          - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
          = local nopts = (`""' != "") + (`""' != "") + ("" != "")
          - if `nopts' == 3 {c -(}
          = if 0 == 3 {c -(}
            di as err "may not combine options has(), not(), and not"
            exit 198
            {c )-}
          - else if `nopts' == 2 {c -(}
          = else if 0 == 2 {c -(}
            if (`"`has'"' == "") {c -(}
            di as err "may not combine options not() and not"
            exit 198
            {c )-}
            else if (`"`not'"' == "") {c -(}
            di as err "may not combine options has() and not"
            exit 198
            {c )-}
            else if (`"`not2'"' == "") {c -(}
            di as err "may not combine options has() and not()"
            exit 198
            {c )-}
            {c )-}
          - if `"`not'"' != "" {c -(}
          = if `""' != "" {c -(}
            local has `"`not'"'
            local opt "not"
            {c )-}
          - else if `"`has'"' != "" {c -(}
          = else if `""' != "" {c -(}
            local opt "has"
            {c )-}
          - local inse = "`insensitive'" != ""
          = local inse = "" != ""
          - if `"`has'"' != "" {c -(}
          = if `""' != "" {c -(}
            CheckHas `"`has'"' "`opt'" "`inse'"
            if "`what'" == "varl" | "`what'" == "vall" {c -(}
            VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
            {c )-}
            else if "`what'" == "f" {c -(}
            Format `"`which'"' "`varlist'" "`inse'"
            {c )-}
            else if "`what'" == "c" {c -(}
            Char `"`which'"' "`varlist'" "`inse'"
            {c )-}
            else if "`what'" == "t" {c -(}
            Type `"`which'"' "`varlist'"
            {c )-}
            if `"`not'"' != "" {c -(}
            local varlist : list varlist - vlist
            {c )-}
            else if `"`has'"' != "" {c -(}
            local varlist "`vlist'"
            {c )-}
            {c )-}
          - if `"`not2'"' != "" {c -(}
          = if `""' != "" {c -(}
            unab all : *
            local varlist : list all - varlist
            {c )-}
          - if "`varlist'" == "" {c -(}
          = if "root1" == "" {c -(}
            exit
            {c )-}
          - if "`alpha'" != "" {c -(}
          = if "" != "" {c -(}
            local varlist : list sort varlist
            {c )-}
          - if "`detail'" != "" {c -(}
          = if "" != "" {c -(}
            describe `varlist'
            {c )-}
          - else {c -(}
          - local nvar : word count `varlist'
          = local nvar : word count root1
          - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
          = local ncol = int((99 + 2) / (12 + 2))
          - local i 0
          - local vlist
          - foreach v of local varlist {c -(}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" root1"'
          - {c )-}
          - DisplayInCols txt `indent' `skip' 0 `vlist'
          = DisplayInCols txt 0 2 0  root1
            {hline 55} begin ds_util.DisplayInCols {hline}
            - gettoken sty 0 : 0
            - gettoken indent 0 : 0
            - gettoken pad 0 : 0
            - gettoken wid 0 : 0
            - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
            = local indent = cond(0==. | 0<0, 0, 0)
            - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
            = local pad = cond(2==. | 2<1, 2, 2)
            - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
            = local wid = cond(0==. | 0<0, 0, 0)
            - local n : list sizeof 0
            - if `n'==0 {c -(}
            = if 1==0 {c -(}
              exit
              {c )-}
            - foreach x of local 0 {c -(}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(0, length(`"root1"'))
            - {c )-}
            - local wid = `wid' + `pad'
            = local wid = 5 + 2
            - local cols = int((`c(linesize)'+1-`indent')/`wid')
            = local cols = int((99+1-0)/7)
            - if `cols' < 2 {c -(}
            = if 14 < 2 {c -(}
              if `indent' {c -(}
              local col "_column(`=`indent'+1')"
              {c )-}
              foreach x of local 0 {c -(}
              di as `sty' `col' `"`x'"'
              {c )-}
              exit
              {c )-}
            - local lines = `n'/`cols'
            = local lines = 1/14
            - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
            = local lines = int(cond(.0714285714285714>int(.0714285714285714), .0714285714285714+1, .0714285714285714))
            - forvalues i=1(1)`lines' {c -(}
            = forvalues i=1(1)1 {c -(}
            - local top = min((`cols')*`lines'+`i', `n')
            = local top = min((14)*1+1, 1)
            - local col = `indent' + 1
            = local col = 0 + 1
            - forvalues j=`i'(`lines')`top' {c -(}
            = forvalues j=1(1)1 {c -(}
            - local x : word `j' of `0'
            = local x : word 1 of   root1
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(1) "root1" _c
            - local col = `col' + `wid'
            = local col = 1 + 7
            - {c )-}
            - di as `sty'
            = di as txt
            - {c )-}
            {hline 57} end ds_util.DisplayInCols {hline}
          - {c )-}
          - return local varlist `varlist'
          = return local varlist root1
          {hline 73} end ds_util {hline}
        - exit
        {hline 80} end ds {hline}
      - if "`destring'" != "" {c -(}
      = if "" != "" {c -(}
        if `"`ignore'"' != "" {c -(}
        local ignore `"ignore(`ignore')"'
        {c )-}
        destring `newvars', replace `force' `float' `ignore' `percent'
        {c )-}
      {hline 79} end split {hline}
    - local root = root1[1] + "/ubcov_central"
    - restore
    - insheet using "`root'/paths.csv", clear names
    = insheet using "/snfs1/WORK/01_covariates/common//ubcov_central/paths.csv", clear names
    - qui: ds
      {hline 80} begin ds {hline}
      - version 9
      - local version : di "version " string(_caller()) ":"
      - if (_caller() <= 4) {c -(}
        `version' describe, simple
        exit
        {c )-}
      - else {c -(}
      - ds_util `0'
      = ds_util 
        {hline 73} begin ds_util {hline}
        - version 8
        - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detail Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
        - if "`varlist'" == "" {c -(}
        = if "object class path1 path2 path3 path4 path5" == "" {c -(}
          exit
          {c )-}
        - if !inrange(`indent',0,244) {c -(}
        = if !inrange(0,0,244) {c -(}
          di as err "indent() should be in the range 0..244"
          exit 198
          {c )-}
        - if !inrange(`varwidth',5,32) {c -(}
        = if !inrange(12,5,32) {c -(}
          di as err "varwidth() should be in the range 5..32"
          exit 198
          {c )-}
        - if !inrange(`skip',1,10) {c -(}
        = if !inrange(2,1,10) {c -(}
          di as err "skip() should be in the range 1..10"
          exit 198
          {c )-}
        - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
        = local nopts = (`""' != "") + (`""' != "") + ("" != "")
        - if `nopts' == 3 {c -(}
        = if 0 == 3 {c -(}
          di as err "may not combine options has(), not(), and not"
          exit 198
          {c )-}
        - else if `nopts' == 2 {c -(}
        = else if 0 == 2 {c -(}
          if (`"`has'"' == "") {c -(}
          di as err "may not combine options not() and not"
          exit 198
          {c )-}
          else if (`"`not'"' == "") {c -(}
          di as err "may not combine options has() and not"
          exit 198
          {c )-}
          else if (`"`not2'"' == "") {c -(}
          di as err "may not combine options has() and not()"
          exit 198
          {c )-}
          {c )-}
        - if `"`not'"' != "" {c -(}
        = if `""' != "" {c -(}
          local has `"`not'"'
          local opt "not"
          {c )-}
        - else if `"`has'"' != "" {c -(}
        = else if `""' != "" {c -(}
          local opt "has"
          {c )-}
        - local inse = "`insensitive'" != ""
        = local inse = "" != ""
        - if `"`has'"' != "" {c -(}
        = if `""' != "" {c -(}
          CheckHas `"`has'"' "`opt'" "`inse'"
          if "`what'" == "varl" | "`what'" == "vall" {c -(}
          VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
          {c )-}
          else if "`what'" == "f" {c -(}
          Format `"`which'"' "`varlist'" "`inse'"
          {c )-}
          else if "`what'" == "c" {c -(}
          Char `"`which'"' "`varlist'" "`inse'"
          {c )-}
          else if "`what'" == "t" {c -(}
          Type `"`which'"' "`varlist'"
          {c )-}
          if `"`not'"' != "" {c -(}
          local varlist : list varlist - vlist
          {c )-}
          else if `"`has'"' != "" {c -(}
          local varlist "`vlist'"
          {c )-}
          {c )-}
        - if `"`not2'"' != "" {c -(}
        = if `""' != "" {c -(}
          unab all : *
          local varlist : list all - varlist
          {c )-}
        - if "`varlist'" == "" {c -(}
        = if "object class path1 path2 path3 path4 path5" == "" {c -(}
          exit
          {c )-}
        - if "`alpha'" != "" {c -(}
        = if "" != "" {c -(}
          local varlist : list sort varlist
          {c )-}
        - if "`detail'" != "" {c -(}
        = if "" != "" {c -(}
          describe `varlist'
          {c )-}
        - else {c -(}
        - local nvar : word count `varlist'
        = local nvar : word count object class path1 path2 path3 path4 path5
        - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
        = local ncol = int((99 + 2) / (12 + 2))
        - local i 0
        - local vlist
        - foreach v of local varlist {c -(}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" object"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" object class"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" object class path1"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" object class path1 path2"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" object class path1 path2 path3"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" object class path1 path2 path3 path4"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" object class path1 path2 path3 path4 path5"'
        - {c )-}
        - DisplayInCols txt `indent' `skip' 0 `vlist'
        = DisplayInCols txt 0 2 0  object class path1 path2 path3 path4 path5
          {hline 57} begin ds_util.DisplayInCols {hline}
          - gettoken sty 0 : 0
          - gettoken indent 0 : 0
          - gettoken pad 0 : 0
          - gettoken wid 0 : 0
          - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
          = local indent = cond(0==. | 0<0, 0, 0)
          - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
          = local pad = cond(2==. | 2<1, 2, 2)
          - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
          = local wid = cond(0==. | 0<0, 0, 0)
          - local n : list sizeof 0
          - if `n'==0 {c -(}
          = if 7==0 {c -(}
            exit
            {c )-}
          - foreach x of local 0 {c -(}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(0, length(`"object"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(6, length(`"class"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(6, length(`"path1"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(6, length(`"path2"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(6, length(`"path3"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(6, length(`"path4"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(6, length(`"path5"'))
          - {c )-}
          - local wid = `wid' + `pad'
          = local wid = 6 + 2
          - local cols = int((`c(linesize)'+1-`indent')/`wid')
          = local cols = int((99+1-0)/8)
          - if `cols' < 2 {c -(}
          = if 12 < 2 {c -(}
            if `indent' {c -(}
            local col "_column(`=`indent'+1')"
            {c )-}
            foreach x of local 0 {c -(}
            di as `sty' `col' `"`x'"'
            {c )-}
            exit
            {c )-}
          - local lines = `n'/`cols'
          = local lines = 7/12
          - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
          = local lines = int(cond(.5833333333333334>int(.5833333333333334), .5833333333333334+1, .5833333333333334))
          - forvalues i=1(1)`lines' {c -(}
          = forvalues i=1(1)1 {c -(}
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((12)*1+1, 7)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {c -(}
          = forvalues j=1(1)7 {c -(}
          - local x : word `j' of `0'
          = local x : word 1 of   object class path1 path2 path3 path4 path5
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "object" _c
          - local col = `col' + `wid'
          = local col = 1 + 8
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 2 of   object class path1 path2 path3 path4 path5
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(9) "class" _c
          - local col = `col' + `wid'
          = local col = 9 + 8
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 3 of   object class path1 path2 path3 path4 path5
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(17) "path1" _c
          - local col = `col' + `wid'
          = local col = 17 + 8
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 4 of   object class path1 path2 path3 path4 path5
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(25) "path2" _c
          - local col = `col' + `wid'
          = local col = 25 + 8
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 5 of   object class path1 path2 path3 path4 path5
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(33) "path3" _c
          - local col = `col' + `wid'
          = local col = 33 + 8
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 6 of   object class path1 path2 path3 path4 path5
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(41) "path4" _c
          - local col = `col' + `wid'
          = local col = 41 + 8
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 7 of   object class path1 path2 path3 path4 path5
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(49) "path5" _c
          - local col = `col' + `wid'
          = local col = 49 + 8
          - {c )-}
          - di as `sty'
          = di as txt
          - {c )-}
          {hline 59} end ds_util.DisplayInCols {hline}
        - {c )-}
        - return local varlist `varlist'
        = return local varlist object class path1 path2 path3 path4 path5
        {hline 75} end ds_util {hline}
      - exit
      {hline 82} end ds {hline}
    - local npath: word `c(k)' of `r(varlist)'
    = local npath: word 7 of object class path1 path2 path3 path4 path5
    - while regexm("`npath'", "[a-z]") {c -(}
    = while regexm("path5", "[a-z]") {c -(}
    - local npath = regexr("`npath'", "[a-z]", "")
    = local npath = regexr("path5", "[a-z]", "")
    - {c )-}
    - while regexm("`npath'", "[a-z]") {c -(}
    = while regexm("ath5", "[a-z]") {c -(}
    - local npath = regexr("`npath'", "[a-z]", "")
    = local npath = regexr("ath5", "[a-z]", "")
    - {c )-}
    - while regexm("`npath'", "[a-z]") {c -(}
    = while regexm("th5", "[a-z]") {c -(}
    - local npath = regexr("`npath'", "[a-z]", "")
    = local npath = regexr("th5", "[a-z]", "")
    - {c )-}
    - while regexm("`npath'", "[a-z]") {c -(}
    = while regexm("h5", "[a-z]") {c -(}
    - local npath = regexr("`npath'", "[a-z]", "")
    = local npath = regexr("h5", "[a-z]", "")
    - {c )-}
    - while regexm("`npath'", "[a-z]") {c -(}
    = while regexm("5", "[a-z]") {c -(}
      local npath = regexr("`npath'", "[a-z]", "")
      {c )-}
    - forvalues i = 1/`npath' {c -(}
    = forvalues i = 1/5 {c -(}
    - forvalues n = 1/`=_N' {c -(}
    = forvalues n = 1/29 {c -(}
    - local obj = object[`n']
    = local obj = object[1]
    - local path = path`i'[`n']
    = local path = path1[1]
    - if "`path'" != "" {c -(}
    = if "J:/WORK/01_covariates/common/ubcov_central" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("J:/WORK/01_covariates/common/ubcov_central", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
    - else {c -(}
    - global `obj' `path'
    = global central_root J:/WORK/01_covariates/common/ubcov_central
    - {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global central_root = subinstr("J:/WORK/01_covariates/common/ubcov_central", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global central_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[2]
    - local path = path`i'[`n']
    = local path = path1[2]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[3]
    - local path = path`i'[`n']
    = local path = path1[3]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[4]
    - local path = path`i'[`n']
    = local path = path1[4]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[5]
    - local path = path`i'[`n']
    = local path = path1[5]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[6]
    - local path = path`i'[`n']
    = local path = path1[6]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[7]
    - local path = path`i'[`n']
    = local path = path1[7]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[8]
    - local path = path`i'[`n']
    = local path = path1[8]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[9]
    - local path = path`i'[`n']
    = local path = path1[9]
    - if "`path'" != "" {c -(}
    = if "J:/WORK/01_covariates/common/ubcov_library/extract/topics" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("J:/WORK/01_covariates/common/ubcov_library/extract/topics", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
    - else {c -(}
    - global `obj' `path'
    = global topics_root J:/WORK/01_covariates/common/ubcov_library/extract/topics
    - {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global topics_root = subinstr("J:/WORK/01_covariates/common/ubcov_library/extract/topics", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global topics_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_library/extract/topics", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[10]
    - local path = path`i'[`n']
    = local path = path1[10]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[11]
    - local path = path`i'[`n']
    = local path = path1[11]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[12]
    - local path = path`i'[`n']
    = local path = path1[12]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[13]
    - local path = path`i'[`n']
    = local path = path1[13]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[14]
    - local path = path`i'[`n']
    = local path = path1[14]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[15]
    - local path = path`i'[`n']
    = local path = path1[15]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[16]
    - local path = path`i'[`n']
    = local path = path1[16]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[17]
    - local path = path`i'[`n']
    = local path = path1[17]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[18]
    - local path = path`i'[`n']
    = local path = path1[18]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[19]
    - local path = path`i'[`n']
    = local path = path1[19]
    - if "`path'" != "" {c -(}
    = if "/share/covariates/ubcov" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("/share/covariates/ubcov", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
    - else {c -(}
    - global `obj' `path'
    = global cluster_root /share/covariates/ubcov
    - {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global cluster_root = subinstr("/share/covariates/ubcov", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global cluster_root = subinstr("/share/covariates/ubcov", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[20]
    - local path = path`i'[`n']
    = local path = path1[20]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[21]
    - local path = path`i'[`n']
    = local path = path1[21]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[22]
    - local path = path`i'[`n']
    = local path = path1[22]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[23]
    - local path = path`i'[`n']
    = local path = path1[23]
    - if "`path'" != "" {c -(}
    = if "J:/WORK/01_covariates/common/ubcov_library/" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("J:/WORK/01_covariates/common/ubcov_library/", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
    - else {c -(}
    - global `obj' `path'
    = global ubcov_library J:/WORK/01_covariates/common/ubcov_library/
    - {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global ubcov_library = subinstr("J:/WORK/01_covariates/common/ubcov_library/", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global ubcov_library = subinstr("/home/j/WORK/01_covariates/common/ubcov_library/", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[24]
    - local path = path`i'[`n']
    = local path = path1[24]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[25]
    - local path = path`i'[`n']
    = local path = path1[25]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[26]
    - local path = path`i'[`n']
    = local path = path1[26]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[27]
    - local path = path`i'[`n']
    = local path = path1[27]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[28]
    - local path = path`i'[`n']
    = local path = path1[28]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[29]
    - local path = path`i'[`n']
    = local path = path1[29]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - {c )-}
    - forvalues n = 1/`=_N' {c -(}
    = forvalues n = 1/29 {c -(}
    - local obj = object[`n']
    = local obj = object[1]
    - local path = path`i'[`n']
    = local path = path2[1]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[2]
    - local path = path`i'[`n']
    = local path = path2[2]
    - if "`path'" != "" {c -(}
    = if "central_root, /modules" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("central_root, /modules", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "central_root, /modules", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global modules_root "/home/j/WORK/01_covariates/common/ubcov_central/modules"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global modules_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global modules_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[3]
    - local path = path`i'[`n']
    = local path = path2[3]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[4]
    - local path = path`i'[`n']
    = local path = path2[4]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[5]
    - local path = path`i'[`n']
    = local path = path2[5]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[6]
    - local path = path`i'[`n']
    = local path = path2[6]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[7]
    - local path = path`i'[`n']
    = local path = path2[7]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[8]
    - local path = path`i'[`n']
    = local path = path2[8]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[9]
    - local path = path`i'[`n']
    = local path = path2[9]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[10]
    - local path = path`i'[`n']
    = local path = path2[10]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[11]
    - local path = path`i'[`n']
    = local path = path2[11]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[12]
    - local path = path`i'[`n']
    = local path = path2[12]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[13]
    - local path = path`i'[`n']
    = local path = path2[13]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[14]
    - local path = path`i'[`n']
    = local path = path2[14]
    - if "`path'" != "" {c -(}
    = if "central_root, /functions" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("central_root, /functions", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "central_root, /functions", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global functions_root "/home/j/WORK/01_covariates/common/ubcov_central/functions"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global functions_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global functions_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[15]
    - local path = path`i'[`n']
    = local path = path2[15]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[16]
    - local path = path`i'[`n']
    = local path = path2[16]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[17]
    - local path = path`i'[`n']
    = local path = path2[17]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[18]
    - local path = path`i'[`n']
    = local path = path2[18]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[19]
    - local path = path`i'[`n']
    = local path = path2[19]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[20]
    - local path = path`i'[`n']
    = local path = path2[20]
    - if "`path'" != "" {c -(}
    = if "cluster_root, /model" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("cluster_root, /model", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "cluster_root, /model", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global cluster_model "/share/covariates/ubcov/model"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global cluster_model = subinstr("/share/covariates/ubcov/model", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global cluster_model = subinstr("/share/covariates/ubcov/model", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[21]
    - local path = path`i'[`n']
    = local path = path2[21]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[22]
    - local path = path`i'[`n']
    = local path = path2[22]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[23]
    - local path = path`i'[`n']
    = local path = path2[23]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[24]
    - local path = path`i'[`n']
    = local path = path2[24]
    - if "`path'" != "" {c -(}
    = if "ubcov_library, /databases" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("ubcov_library, /databases", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "ubcov_library, /databases", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global model_db_root "/home/j/WORK/01_covariates/common/ubcov_library//databases"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global model_db_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global model_db_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[25]
    - local path = path`i'[`n']
    = local path = path2[25]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[26]
    - local path = path`i'[`n']
    = local path = path2[26]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[27]
    - local path = path`i'[`n']
    = local path = path2[27]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[28]
    - local path = path`i'[`n']
    = local path = path2[28]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[29]
    - local path = path`i'[`n']
    = local path = path2[29]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - {c )-}
    - forvalues n = 1/`=_N' {c -(}
    = forvalues n = 1/29 {c -(}
    - local obj = object[`n']
    = local obj = object[1]
    - local path = path`i'[`n']
    = local path = path3[1]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[2]
    - local path = path`i'[`n']
    = local path = path3[2]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[3]
    - local path = path`i'[`n']
    = local path = path3[3]
    - if "`path'" != "" {c -(}
    = if "modules_root,  /model" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("modules_root,  /model", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "modules_root,  /model", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global model_root "/home/j/WORK/01_covariates/common/ubcov_central/modules/model"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global model_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global model_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[4]
    - local path = path`i'[`n']
    = local path = path3[4]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[5]
    - local path = path`i'[`n']
    = local path = path3[5]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[6]
    - local path = path`i'[`n']
    = local path = path3[6]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[7]
    - local path = path`i'[`n']
    = local path = path3[7]
    - if "`path'" != "" {c -(}
    = if "modules_root, /extract" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("modules_root, /extract", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "modules_root, /extract", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global extract_root "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global extract_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global extract_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[8]
    - local path = path`i'[`n']
    = local path = path3[8]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[9]
    - local path = path`i'[`n']
    = local path = path3[9]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[10]
    - local path = path`i'[`n']
    = local path = path3[10]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[11]
    - local path = path`i'[`n']
    = local path = path3[11]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[12]
    - local path = path`i'[`n']
    = local path = path3[12]
    - if "`path'" != "" {c -(}
    = if "modules_root, /collapse" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("modules_root, /collapse", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "modules_root, /collapse", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global collapse_root "/home/j/WORK/01_covariates/common/ubcov_central/modules/collapse"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global collapse_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/collapse", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global collapse_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/collapse", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[13]
    - local path = path`i'[`n']
    = local path = path3[13]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[14]
    - local path = path`i'[`n']
    = local path = path3[14]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[15]
    - local path = path`i'[`n']
    = local path = path3[15]
    - if "`path'" != "" {c -(}
    = if "functions_root, /shells" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("functions_root, /shells", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "functions_root, /shells", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global shells_root "/home/j/WORK/01_covariates/common/ubcov_central/functions/shells"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global shells_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/shells", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global shells_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/shells", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[16]
    - local path = path`i'[`n']
    = local path = path3[16]
    - if "`path'" != "" {c -(}
    = if "functions_root, /cluster_tools.r" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("functions_root, /cluster_tools.r", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "functions_root, /cluster_tools.r", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global cluster_tools "/home/j/WORK/01_covariates/common/ubcov_central/functions/cluster_tools.r"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global cluster_tools = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/cluster_tools.r", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global cluster_tools = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/cluster_tools.r", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[17]
    - local path = path`i'[`n']
    = local path = path3[17]
    - if "`path'" != "" {c -(}
    = if "functions_root, /utilitybelt/db_tools.r" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("functions_root, /utilitybelt/db_tools.r", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "functions_root, /utilitybelt/db_tools.r", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global db_tools "/home/j/WORK/01_covariates/common/ubcov_central/functions/utilitybelt/db_tools.r"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global db_tools = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/utilitybelt/db_tools.r", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global db_tools = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/utilitybelt/db_tools.r", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[18]
    - local path = path`i'[`n']
    = local path = path3[18]
    - if "`path'" != "" {c -(}
    = if "functions_root, /ubcov_tools.r" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("functions_root, /ubcov_tools.r", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "functions_root, /ubcov_tools.r", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global ubcov_tools "/home/j/WORK/01_covariates/common/ubcov_central/functions/ubcov_tools.r"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global ubcov_tools = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/ubcov_tools.r", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global ubcov_tools = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/ubcov_tools.r", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[19]
    - local path = path`i'[`n']
    = local path = path3[19]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[20]
    - local path = path`i'[`n']
    = local path = path3[20]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[21]
    - local path = path`i'[`n']
    = local path = path3[21]
    - if "`path'" != "" {c -(}
    = if "cluster_model, /data" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("cluster_model, /data", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "cluster_model, /data", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global cluster_model_data "/share/covariates/ubcov/model/data"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global cluster_model_data = subinstr("/share/covariates/ubcov/model/data", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global cluster_model_data = subinstr("/share/covariates/ubcov/model/data", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[22]
    - local path = path`i'[`n']
    = local path = path3[22]
    - if "`path'" != "" {c -(}
    = if "cluster_model, /output" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("cluster_model, /output", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "cluster_model, /output", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global cluster_model_output "/share/covariates/ubcov/model/output"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global cluster_model_output = subinstr("/share/covariates/ubcov/model/output", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global cluster_model_output = subinstr("/share/covariates/ubcov/model/output", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[23]
    - local path = path`i'[`n']
    = local path = path3[23]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[24]
    - local path = path`i'[`n']
    = local path = path3[24]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[25]
    - local path = path`i'[`n']
    = local path = path3[25]
    - if "`path'" != "" {c -(}
    = if "model_db_root, /data_db.csv" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("model_db_root, /data_db.csv", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "model_db_root, /data_db.csv", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global data_db "/home/j/WORK/01_covariates/common/ubcov_library//databases/data_db.csv"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global data_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/data_db.csv", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global data_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/data_db.csv", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[26]
    - local path = path`i'[`n']
    = local path = path3[26]
    - if "`path'" != "" {c -(}
    = if "model_db_root, /model_db.csv" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("model_db_root, /model_db.csv", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "model_db_root, /model_db.csv", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global model_db "/home/j/WORK/01_covariates/common/ubcov_library//databases/model_db.csv"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global model_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/model_db.csv", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global model_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/model_db.csv", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[27]
    - local path = path`i'[`n']
    = local path = path3[27]
    - if "`path'" != "" {c -(}
    = if "model_db_root, /run_db.csv" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("model_db_root, /run_db.csv", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "model_db_root, /run_db.csv", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global run_db "/home/j/WORK/01_covariates/common/ubcov_library//databases/run_db.csv"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global run_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/run_db.csv", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global run_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/run_db.csv", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[28]
    - local path = path`i'[`n']
    = local path = path3[28]
    - if "`path'" != "" {c -(}
    = if "model_db_root, /me_db.csv" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("model_db_root, /me_db.csv", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "model_db_root, /me_db.csv", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global me_db "/home/j/WORK/01_covariates/common/ubcov_library//databases/me_db.csv"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global me_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/me_db.csv", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global me_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/me_db.csv", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[29]
    - local path = path`i'[`n']
    = local path = path3[29]
    - if "`path'" != "" {c -(}
    = if "model_db_root, /outliers" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("model_db_root, /outliers", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "model_db_root, /outliers", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global outlier_root "/home/j/WORK/01_covariates/common/ubcov_library//databases/outliers"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global outlier_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/outliers", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global outlier_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/outliers", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - {c )-}
    - forvalues n = 1/`=_N' {c -(}
    = forvalues n = 1/29 {c -(}
    - local obj = object[`n']
    = local obj = object[1]
    - local path = path`i'[`n']
    = local path = path4[1]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[2]
    - local path = path`i'[`n']
    = local path = path4[2]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[3]
    - local path = path`i'[`n']
    = local path = path4[3]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[4]
    - local path = path`i'[`n']
    = local path = path4[4]
    - if "`path'" != "" {c -(}
    = if "model_root, /templates" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("model_root, /templates", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "model_root, /templates", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global model_templates "/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global model_templates = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global model_templates = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[5]
    - local path = path`i'[`n']
    = local path = path4[5]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[6]
    - local path = path`i'[`n']
    = local path = path4[6]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[7]
    - local path = path`i'[`n']
    = local path = path4[7]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[8]
    - local path = path`i'[`n']
    = local path = path4[8]
    - if "`path'" != "" {c -(}
    = if "extract_root, /core" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("extract_root, /core", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "extract_root, /core", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global extract_core "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global extract_core = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global extract_core = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[9]
    - local path = path`i'[`n']
    = local path = path4[9]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[10]
    - local path = path`i'[`n']
    = local path = path4[10]
    - if "`path'" != "" {c -(}
    = if "extract_root, /survey" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("extract_root, /survey", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "extract_root, /survey", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global survey_root "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/survey"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global survey_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/survey", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global survey_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/survey", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[11]
    - local path = path`i'[`n']
    = local path = path4[11]
    - if "`path'" != "" {c -(}
    = if "extract_root, /databases" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("extract_root, /databases", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "extract_root, /databases", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global extract_databases "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/databases"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global extract_databases = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/databases", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global extract_databases = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/databases", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[12]
    - local path = path`i'[`n']
    = local path = path4[12]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[13]
    - local path = path`i'[`n']
    = local path = path4[13]
    - if "`path'" != "" {c -(}
    = if "collapse_root, /launch.r" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("collapse_root, /launch.r", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "collapse_root, /launch.r", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global collapse_launch "/home/j/WORK/01_covariates/common/ubcov_central/modules/collapse/launch.r"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global collapse_launch = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/collapse/launch.r", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global collapse_launch = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/collapse/launch.r", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[14]
    - local path = path`i'[`n']
    = local path = path4[14]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[15]
    - local path = path`i'[`n']
    = local path = path4[15]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[16]
    - local path = path`i'[`n']
    = local path = path4[16]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[17]
    - local path = path`i'[`n']
    = local path = path4[17]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[18]
    - local path = path`i'[`n']
    = local path = path4[18]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[19]
    - local path = path`i'[`n']
    = local path = path4[19]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[20]
    - local path = path`i'[`n']
    = local path = path4[20]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[21]
    - local path = path`i'[`n']
    = local path = path4[21]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[22]
    - local path = path`i'[`n']
    = local path = path4[22]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[23]
    - local path = path`i'[`n']
    = local path = path4[23]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[24]
    - local path = path`i'[`n']
    = local path = path4[24]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[25]
    - local path = path`i'[`n']
    = local path = path4[25]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[26]
    - local path = path`i'[`n']
    = local path = path4[26]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[27]
    - local path = path`i'[`n']
    = local path = path4[27]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[28]
    - local path = path`i'[`n']
    = local path = path4[28]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[29]
    - local path = path`i'[`n']
    = local path = path4[29]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - {c )-}
    - forvalues n = 1/`=_N' {c -(}
    = forvalues n = 1/29 {c -(}
    - local obj = object[`n']
    = local obj = object[1]
    - local path = path`i'[`n']
    = local path = path5[1]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[2]
    - local path = path`i'[`n']
    = local path = path5[2]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[3]
    - local path = path`i'[`n']
    = local path = path5[3]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[4]
    - local path = path`i'[`n']
    = local path = path5[4]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[5]
    - local path = path`i'[`n']
    = local path = path5[5]
    - if "`path'" != "" {c -(}
    = if "model_templates, /data_template.csv" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("model_templates, /data_template.csv", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "model_templates, /data_template.csv", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global data_template "/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates/data_template.csv"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global data_template = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates/data_template.csv", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global data_template = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates/data_template.csv", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[6]
    - local path = path`i'[`n']
    = local path = path5[6]
    - if "`path'" != "" {c -(}
    = if "model_templates, /model_db.csv" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("model_templates, /model_db.csv", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "model_templates, /model_db.csv", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global model_template "/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates/model_db.csv"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global model_template = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates/model_db.csv", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global model_template = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates/model_db.csv", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[7]
    - local path = path`i'[`n']
    = local path = path5[7]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[8]
    - local path = path`i'[`n']
    = local path = path5[8]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[9]
    - local path = path`i'[`n']
    = local path = path5[9]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[10]
    - local path = path`i'[`n']
    = local path = path5[10]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[11]
    - local path = path`i'[`n']
    = local path = path5[11]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[12]
    - local path = path`i'[`n']
    = local path = path5[12]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[13]
    - local path = path`i'[`n']
    = local path = path5[13]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[14]
    - local path = path`i'[`n']
    = local path = path5[14]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[15]
    - local path = path`i'[`n']
    = local path = path5[15]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[16]
    - local path = path`i'[`n']
    = local path = path5[16]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[17]
    - local path = path`i'[`n']
    = local path = path5[17]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[18]
    - local path = path`i'[`n']
    = local path = path5[18]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[19]
    - local path = path`i'[`n']
    = local path = path5[19]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[20]
    - local path = path`i'[`n']
    = local path = path5[20]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[21]
    - local path = path`i'[`n']
    = local path = path5[21]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[22]
    - local path = path`i'[`n']
    = local path = path5[22]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[23]
    - local path = path`i'[`n']
    = local path = path5[23]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[24]
    - local path = path`i'[`n']
    = local path = path5[24]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[25]
    - local path = path`i'[`n']
    = local path = path5[25]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[26]
    - local path = path`i'[`n']
    = local path = path5[26]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[27]
    - local path = path`i'[`n']
    = local path = path5[27]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[28]
    - local path = path`i'[`n']
    = local path = path5[28]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[29]
    - local path = path`i'[`n']
    = local path = path5[29]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - {c )-}
    {hline 76} end ubcov_path {hline}
    {hline 79} begin clear {hline}
    - if _caller() < 10 {c -(}
      _clear_9 `0'
      exit
      {c )-}
    - version 10
    - syntax [anything]
    - tokenize `anything'
    = tokenize 
    - if `"`2'"' != "" {c -(}
    = if `""' != "" {c -(}
      display as err "`2' not allowed"
      exit 198
      {c )-}
    - if "`1'"=="" {c -(}
    = if ""=="" {c -(}
    - drop _all
    - label drop _all
      {hline 77} begin label {hline}
      - version 10.0
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("drop", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - _label `macval(0)'
      = _label drop _all
      - {c )-}
      {hline 79} end label {hline}
    - {c )-}
    - else if "`1'"=="mata" {c -(}
    = else if ""=="mata" {c -(}
      mata: mata clear
      {c )-}
    - else if inlist("`1'", "results", "matrix") {c -(}
    = else if inlist("", "results", "matrix") {c -(}
      return clear
      clearreturn
      ereturn clear
      sreturn clear
      _return drop _all
      if ("`1'" == "matrix") {c -(}
      matrix drop _all
      _est drop _all
      {c )-}
      {c )-}
    - else if "`1'"=="programs" {c -(}
    = else if ""=="programs" {c -(}
      program drop _all
      {c )-}
    - else if "`1'"=="ado" {c -(}
    = else if ""=="ado" {c -(}
      program drop _allado
      {c )-}
    - else if "`1'"=="*" | "`1'"=="all" {c -(}
    = else if ""=="*" | ""=="all" {c -(}
      capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
      capture
      if (0`semmods') {c -(}
      display as err "-clear all- not allowed while an SEM Builder is open"
      exit 1
      {c )-}
      drop _all
      label drop _all
      matrix drop _all
      scalar drop _all
      constraint drop _all
      eq drop _all
      file close _all
      postutil clear
      _return drop _all
      discard
      program drop _all
      timer clear
      mata: mata clear
      {c )-}
    - else {c -(}
      display as err "`1' not allowed"
      exit 198
      {c )-}
    {hline 81} end clear {hline}

{com}. 
{txt}end of do-file

{com}. 
. // Load the base code for ubCov
. local paths  `central_root'/modules/extract/core/ `central_root'/modules/extract/core/addons/
{txt}
{com}. foreach path in `paths' {c -(}
{txt}  2{com}.     local files : dir "`path'" files "*.do"
{txt}  3{com}.     foreach file in `files' {c -(}
{txt}  4{com}.         if "`file'" != "run.do" do "`path'/`file'"
{txt}  5{com}.     {c )-}
{txt}  6{com}. {c )-}
{txt}- foreach path in `paths' {c -(}
= foreach path in /home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core/ /home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core/addons/ {c -(}
- local files : dir "`path'" files "*.do"
= local files : dir "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core/" files "*.do"
- foreach file in `files' {c -(}
= foreach file in "sourcing.do" "batch.do" "label.do" "utility.do" "mapping.do" "extraction.do" "load.do" "validate.do" "init.do" "merge.do" "generate.do" {c -(}
- if "`file'" != "run.do" do "`path'/`file'"
= if "sourcing.do" != "run.do" do "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core//sourcing.do"

{com}. /***********************************************************************************************************
>  Author: Patrick Liu (pyliu@uw.edu)                                                                                                                                             
>  Date: 7/13/2015
>  Project: ubCov
>  Purpose: Sourcing functions
>                                                                                                                                                                         
> ***********************************************************************************************************/
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>                                                                                                          
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. cap program drop get_cooper
{txt}
{com}. program define get_cooper
{txt}  1{com}. 
.         syntax, project_nid(str)
{txt}  2{com}. 
.         local host "ghdx-db-pi01"
{txt}  3{com}.         local db "ghdx"
{txt}  4{com}.         local query "SELECT record_nid as nid FROM ghdx.cooper WHERE project_nid = `project_nid'"
{txt}  5{com}.         run_query, host(`host') db(`db') query(`query')
{txt}  6{com}. 
. end
{txt}
{com}. 
. 
. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
> 
. cap program drop get_topic_nids
{txt}
{com}. program define get_topic_nids
{txt}  1{com}. 
.         syntax, topic(str)
{txt}  2{com}. 
.         gs_db, obj(topic)
{txt}  3{com}.         keep if topic_name == "`topic'"
{txt}  4{com}.         local project_nid = `=cooper_project[1]'
{txt}  5{com}.         get_cooper, project_nid(`project_nid')
{txt}  6{com}. 
. end
{txt}
{com}. 
. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
> 
. cap program drop new_topic_rows
{txt}
{com}. program define new_topic_rows
{txt}  1{com}. 
.         syntax, topic(str)
{txt}  2{com}. qui {c -(}
{txt}  3{com}.         // Get all topic nids
.         get_topic_nids, topic(`topic')
{txt}  4{com}.         duplicates drop nid, force
{txt}  5{com}.         tostring nid, replace
{txt}  6{com}.         tempfile topic_nids
{txt}  7{com}.         save `topic_nids', replace
{txt}  8{com}.         // Get existing nids in codebook
.         gs_db, obj(codebook) topic(`topic')
{txt}  9{com}.         if _N > 0 {c -(}
{txt} 10{com}.         keep nid
{txt} 11{com}.         duplicates drop nid, force
{txt} 12{com}.         // Merge to find new topic nids
.         merge 1:1 nid using `topic_nids', keep(2) nogen
{txt} 13{com}.         tempfile new_nids
{txt} 14{com}.         save `new_nids', replace
{txt} 15{com}.         {c )-}
{txt} 16{com}.         else {c -(}
{txt} 17{com}.         use `topic_nids', clear
{txt} 18{com}.         tostring nid, replace
{txt} 19{com}.         tempfile new_nids
{txt} 20{com}.         save `new_nids', replace
{txt} 21{com}.         {c )-}
{txt} 22{com}.         // Merge on master codebook to get info
.         gs_db, obj(codebook) topic(basic)
{txt} 23{com}.         merge m:1 nid using `new_nids', keep(3) nogen
{txt} 24{com}.         // Mark if ubcov_id marked
.         gen need_basic = 0 if !mi(ubcov_id)
{txt} 25{com}.         replace need_basic = 1 if mi(ubcov_id)
{txt} 26{com}.         keep survey_name nid ihme_loc_id year_start year_end survey_module file_path need_basic
{txt} 27{com}.         tab need_basic if need_basic == 1
{txt} 28{com}.         local need_basic = `r(N)'
{txt} 29{com}.         local ready = `=_N' - `need_basic'
{txt} 30{com}.         // Sort
.         sort need_basic survey_name year_start
{txt} 31{com}. {c )-}
{txt} 32{com}.         // Output
.         di as error "Returned `=_N' new microdata hits for the topic (`topic')."
{txt} 33{com}.         di as error "Number that need basic info: `need_basic'"
{txt} 34{com}.         di as error "Number ready to go: `ready'"
{txt} 35{com}. 
. end
{txt}
{com}. 
. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
> 
. 
. 
{txt}end of do-file
- {c )-}
- if "`file'" != "run.do" do "`path'/`file'"
= if "batch.do" != "run.do" do "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core//batch.do"

{com}. /***********************************************************************************************************
>  Author: Patrick Liu (pyliu@uw.edu)                                                                                                                                             
>  Date: 7/13/2015
>  Project: ubCov
>  Purpose: Batch Run
>                                                                                                                                                                         
> ***********************************************************************************************************/
. 
. cap program drop batch_extract
{txt}
{com}. program define batch_extract
{txt}  1{com}.         
.         syntax, topics(str) cluster_project(str) output_path(str) store_vals_path(str) run_log_path(str) db_path(str) [memory(integer 3) fthreads(integer 1) h_rt(str) central_root(str) ubcov_ids(str) logs_path(str) keep]
{txt}  2{com}. 
.         // Settings
.                 // Multiple topics
.                 local n : list sizeof topics
{txt}  3{com}.                 if `n' > 1 local topics_arg = subinstr("`topics'", " ", "#", .)
{txt}  4{com}.                 else local topics_arg `topics'
{txt}  5{com}.                 // Central root
.                 if mi("`central_root'") local central_root "$central_root"
{txt}  6{com}.                 // Job name
.                 local job_name "ubcov_`c(username)'_`topics_arg'"
{txt}  7{com}.                 // Batch script
.                 local script "`central_root'/modules/extract/cluster/run_batch.do"
{txt}  8{com}.                 // Job logs
.                 if !mi("`logs_path'") local logs_path logs(`logs_path')
{txt}  9{com}.                 else local logs_path
{txt} 10{com}.                 // Run-Time
.                 if mi("`h_rt'") local h_rt "00:10:00"
{txt} 11{com}. 
.         // Check output_path exists
.         local dir `c(pwd)'
{txt} 12{com}.         cap cd `output_path'
{txt} 13{com}.         if _rc di as error "Output path not found. Please create"
{txt} 14{com}.         qui cd `dir'
{txt} 15{com}. 
.         // If ids not specified, initialize and pull all ubcov_ids
.         init, topics(`topics') save(`db_path')
{txt} 16{com}.         get, codebook
{txt} 17{com}.         if mi("`ubcov_ids'") qui levelsof ubcov_id, l(ubcov_ids) clean
{txt} 18{com}.         else {c -(}
{txt} 19{com}.                 gen kitten_keep = .
{txt} 20{com}.                 foreach id in `ubcov_ids' {c -(}
{txt} 21{com}.                         replace kitten_keep = 1 if ubcov_id == `id'
{txt} 22{com}.                 {c )-}
{txt} 23{com}.                 keep if kitten_keep == 1
{txt} 24{com}.                 drop kitten_keep
{txt} 25{com}.         {c )-}
{txt} 26{com}.         tempfile runlog
{txt} 27{com}.         save `runlog', replace
{txt} 28{com}. 
.         // Launch
.         foreach ubcov_id in `ubcov_ids' {c -(}
{txt} 29{com}.                 qsub, job_name(`job_name'_`ubcov_id') script(`script') ///
>                                 fthreads(`fthreads') memory(`memory') h_rt(`h_rt') cluster_project(`cluster_project') ///
>                                 arguments(`topics_arg' `ubcov_id' `output_path' `central_root' `store_vals_path' `db_path' `keep') ///
>                                 `logs_path'
{txt} 30{com}.         {c )-}
{txt} 31{com}.         // Hold
.         job_hold, job_name(`job_name')
{txt} 32{com}. 
.         // Finish
.         // List ubcov_ids of successful outputs pattern (*_`ubcov_id'.csv)
.         qui {c -(}
{txt} 33{com}.         list_files, path("`output_path'")
{txt} 34{com}.         localregexs, local("`r(files)'") pattern("[0-9]*.csv")
{txt} 35{com}.         local ubcov_ids = subinstr("`r(str)'", ".csv", "", .)
{txt} 36{com}.         // Tag completed extractions and save
.         use `runlog', clear
{txt} 37{com}.         gen run_complete = .
{txt} 38{com}.         foreach id in `ubcov_ids' {c -(}
{txt} 39{com}.                 replace run_complete = 1 if ubcov_id == `id'
{txt} 40{com}.         {c )-}
{txt} 41{com}.         replace run_complete = 0 if run_complete != 1
{txt} 42{com}.         export delimited "`run_log_path'/ubcov_runlog_`topics_arg'.csv", replace
{txt} 43{com}.         {c )-}
{txt} 44{com}. 
.         // Display failed jobs
.         qui: levelsof ubcov_id if run_complete == 0, l(failed) clean
{txt} 45{com}.         if !mi("`failed'") di as error "Failed job ubcov_ids : `failed'"
{txt} 46{com}.         di as error "COMPLETE, RUN LOG SAVED : `run_log_path'/ubcov_runlog_`topics_arg'.csv"
{txt} 47{com}. 
. end
{txt}
{com}. 
. 
. 
. 
. 
. 
. 
. 
{txt}end of do-file
- {c )-}
- if "`file'" != "run.do" do "`path'/`file'"
= if "label.do" != "run.do" do "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core//label.do"

{com}. /***********************************************************************************************************
>  Author: Patrick Liu (pyliu@uw.edu)                                                                                                                                             
>  Date: 7/13/2015
>  Project: ubCov
>  Purpose: Label
>                                                                                                                                                                         
> ***********************************************************************************************************/
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
> 
> Table of Contents:
> 
> - label_vars
> - label_vals
>                                                                  
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>                                                                                                          label blocks
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. cap program drop label_vars
{txt}
{com}. program define label_vars
{txt}  1{com}. 
.         syntax, file_path(str) [labelvars(str)]
{txt}  2{com}. 
.         ////////////////////////////////////////////////
>         // Pull in label database
.         preserve 
{txt}  3{com}.                 get, labels
{txt}  4{com}.                 keep if file_path == "`file_path'" & !mi(variable_label)
{txt}  5{com}.                 local n = _N
{txt}  6{com}.         
.         // If any to label
.         if `n' > 0 {c -(}
{txt}  7{com}.                 tempfile temp
{txt}  8{com}.                 save `temp', replace
{txt}  9{com}.                 // Gen label command for each variable
.                 levelsof variable, l(vars) clean
{txt} 10{com}.                 foreach var in `vars' {c -(}
{txt} 11{com}.                         use `temp', clear
{txt} 12{com}.                         keep if variable == "`var'"
{txt} 13{com}.                         // Create a local called lab_`var' which is the label define command
.                         local lab_`var' `=variable_label[1]'
{txt} 14{com}.                 {c )-}
{txt} 15{com}.         {c )-}
{txt} 16{com}.         // Open data back up
.         restore
{txt} 17{com}.         //////////////////////////////////////////////
> 
.         if `n' > 0 {c -(}
{txt} 18{com}.                 // Go through each variable and apply labels
.                 foreach var in `vars' {c -(}
{txt} 19{com}.                         cap confirm variable `var'
{txt} 20{com}.                         if !_rc {c -(}
{txt} 21{com}.                                 // Make sure that var is numeric
.                                 label var `var' `"`lab_`var''"'
{txt} 22{com}.                                 di as error "Label Variable || Labeling variable (`var')"
{txt} 23{com}.                         {c )-}
{txt} 24{com}.                         else {c -(}
{txt} 25{com}.                                 di as error "Label Variable || Variable (`var') not in label database for file (`file_path')"
{txt} 26{com}.                         {c )-}
{txt} 27{com}.                 {c )-}
{txt} 28{com}.         {c )-}       
{txt} 29{com}.         
. end
{txt}
{com}. 
. ////////////////////////////////
> 
. cap program drop label_vals
{txt}
{com}. program define label_vals
{txt}  1{com}. 
.         syntax, file_path(str) [labelvars(str)]
{txt}  2{com}. 
.         ////////////////////////////////////////////////
>         // Pull in label database
.         preserve 
{txt}  3{com}.                 get, labels
{txt}  4{com}.                 keep if file_path == "`file_path'" & !mi(value_num)
{txt}  5{com}.                 local n = _N
{txt}  6{com}.         
.         // If any to label
.         if `n' > 0 {c -(}
{txt}  7{com}.                 tempfile temp
{txt}  8{com}.                 save `temp', replace
{txt}  9{com}.                 // Gen label command for each variable
.                 levelsof variable, l(vars) clean
{txt} 10{com}.                 foreach var in `vars' {c -(}
{txt} 11{com}.                         use `temp', clear
{txt} 12{com}.                         keep if variable == "`var'"
{txt} 13{com}.                         // Create a local called lab_`var' which is the label define command
.                         local lab_`var'
{txt} 14{com}.                         forvalues i = 1/`=_N' {c -(}
{txt} 15{com}.                                 local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
{txt} 16{com}.                         {c )-}
{txt} 17{com}.                 {c )-}
{txt} 18{com}.         {c )-}
{txt} 19{com}.         // Open data back up
.         restore
{txt} 20{com}.         //////////////////////////////////////////////
> 
.         if `n' > 0 {c -(}
{txt} 21{com}.                 // Go through each variable and apply labels
.                 foreach var in `vars' {c -(}
{txt} 22{com}.                         cap confirm variable `var'
{txt} 23{com}.                         if !_rc {c -(}
{txt} 24{com}.                                 // Make sure that var is numeric
.                                 destring `var', replace force
{txt} 25{com}.                                 cap label drop lab
{txt} 26{com}.                                 label define lab_`var' `lab_`var''
{txt} 27{com}.                                 label values `var' lab_`var'
{txt} 28{com}.                                 di as error "Label Values || Labeling values for variable (`var')"
{txt} 29{com}.                         {c )-}
{txt} 30{com}.                         else {c -(}
{txt} 31{com}.                                 di as error "Label Values || Variable (`var') not in label database for file (`file_path')"
{txt} 32{com}.                         {c )-}
{txt} 33{com}.                 {c )-}
{txt} 34{com}.         {c )-}       
{txt} 35{com}.         
. end
{txt}
{com}. 
. ////////////////////////////////

{txt}end of do-file
- {c )-}
- if "`file'" != "run.do" do "`path'/`file'"
= if "utility.do" != "run.do" do "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core//utility.do"

{com}. 
. /***********************************************************************************************************
>  Author: Patrick Liu (pyliu@uw.edu)
>  Date: 7/13/2015
>  Project: ubCov
>  Purpose: Utility functions
> 
> ***********************************************************************************************************/
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
> 
> 
> Table of Contents:
> 
> General utility
> - rload
> - load
> - stop
> - list_files
> - drop_dupe_vars
> 
> Local and string manipulation
> - inlist2
> - concat2
> - str_occur
> - str_split
> - date_split
> - localsub
> 
> ubCov utility
> - ubcov_path
> - var_labels
> - translate
> 
> Database
> - create_connection_string
> - run_query
> - gs_load
> 
> Cluster
> - qsub
> - job_hold
> 
> 
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>                                                                                                                 general utility
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. 
. cap program drop rload
{txt}
{com}. program define rload
{txt}  1{com}. 
.         syntax anything
{txt}  2{com}. 
.         local input `anything'
{txt}  3{com}. 
.         // Prep output
.         tempfile output
{txt}  4{com}. 
.         // Open in R and save as CSV
.         !RScript --vanilla "$central_root/modules/extract/core/addons/load.r" `input' `output'
{txt}  5{com}. 
.         // Open CSV
.         insheet using `output', clear
{txt}  6{com}. 
. end
{txt}
{com}. 
. /////////////////////////////////////////////////////
> 
. cap program drop load
{txt}
{com}. program define load
{txt}  1{com}. 
.         syntax anything, [delimiter(str)]
{txt}  2{com}. 
.         local path `anything'
{txt}  3{com}. 
.         // Set OS
.         if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
{txt}  4{com}.                 local path = subinstr("`path'", "J:", "$j", .)
{txt}  5{com}.         {c )-}
{txt}  6{com}.         else if c(os) == "Windows" {c -(}
{txt}  7{com}.                 local path = subinstr("`path'", "/home/j", "$j", .)
{txt}  8{com}.         {c )-}
{txt}  9{com}.         // Detect extension
.         tokenize `path', p(".")
{txt} 10{com}.         local file = "`1'"
{txt} 11{com}.         local ext = lower("`3'")
{txt} 12{com}.         if "`ext'" == "" {c -(}
{txt} 13{com}.                 di as error "Path needs a file extension"
{txt} 14{com}.                 STOP
{txt} 15{com}.         {c )-}
{txt} 16{com}.         // Open
.         if "`ext'" == "dta" {c -(}
{txt} 17{com}.                 use "`path'", clear
{txt} 18{com}.         {c )-}
{txt} 19{com}.         else if inlist("`ext'", "csv", "tab") {c -(}
{txt} 20{com}.                 if mi("`delimiter'") import delimited using "`path'", clear
{txt} 21{com}.                 else import delimited using "`path'", clear delimiters("`delimiter'")
{txt} 22{com}.         {c )-}
{txt} 23{com}.         else if inlist("`ext'", "txt") {c -(}
{txt} 24{com}.                 import delimited using "`path'", clear delim(" ")
{txt} 25{com}.         {c )-}
{txt} 26{com}.         else if inlist("`ext'", "xlsx", "xls") {c -(}
{txt} 27{com}.                 import excel using "`path'", clear first
{txt} 28{com}.         {c )-}
{txt} 29{com}.         else if inlist("`ext'", "dbf") {c -(}
{txt} 30{com}.                 rload "`path'"
{txt} 31{com}.         {c )-}
{txt} 32{com}.         else if inlist("`ext'", "sav") {c -(}
{txt} 33{com}.                 cap which usespss
{txt} 34{com}.                 if _rc {c -(}
{txt} 35{com}.                         net from http://radyakin.org/transfer/usespss/beta
{txt} 36{com}.                         net install usespss
{txt} 37{com}.                 {c )-}
{txt} 38{com}.                 cap qui: usespss "`path'", clear
{txt} 39{com}.                 if _rc {c -(}
{txt} 40{com}.                         rload "`path'"
{txt} 41{com}.                 {c )-}
{txt} 42{com}.         {c )-}
{txt} 43{com}.         else if inlist("`ext'", "xpt") {c -(}
{txt} 44{com}.                 clear
{txt} 45{com}.                 fdause `path'
{txt} 46{com}.         {c )-}
{txt} 47{com}.         else if inlist("`ext'", "da") {c -(}
{txt} 48{com}.                 infile using "`file'.dct", using("`file'.da") clear
{txt} 49{com}.         {c )-}
{txt} 50{com}.         else {c -(}
{txt} 51{com}.                 di as error "`ext' not accepted"
{txt} 52{com}.         {c )-}
{txt} 53{com}.         // Rename lower
.         drop_dupe_vars
{txt} 54{com}.         cap rename *, lower
{txt} 55{com}. 
. end
{txt}
{com}. 
. ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
> 
. cap program drop stop
{txt}
{com}. program define stop
{txt}  1{com}. 
.         syntax, msg(str) [cond(str)] [warn(integer)]
{txt}  2{com}. 
.         if !mi("`cond'") {c -(}
{txt}  3{com}.                 if `cond' local continue 1
{txt}  4{com}.                 else local continue 0
{txt}  5{com}.         {c )-}
{txt}  6{com}.         else local continue 1
{txt}  7{com}.         if `continue' {c -(}
{txt}  8{com}.                 noisily: di as error "`msg'"
{txt}  9{com}.                 if !mi("`warn'") sleep `warn'
{txt} 10{com}.                 else STOP
{txt} 11{com}.         {c )-}
{txt} 12{com}. 
. end
{txt}
{com}. 
. ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
> 
. cap program drop list_files
{txt}
{com}. program define list_files, return
{txt}  1{com}. 
.         syntax, path(str) [pattern(str) recursive full]
{txt}  2{com}. 
.         // Options
. 
. 
.         // Pattern
.         if mi("`pattern'") local pattern "*"
{txt}  3{com}. 
.         // Files
.         local files : dir "`path'" files `pattern'
{txt}  4{com}. 
.         // If full name
.         if !mi("`full'") {c -(}
{txt}  5{com}.                 local fullfiles
{txt}  6{com}.                 foreach i in `files' {c -(}
{txt}  7{com}.                         local fullfiles `fullfiles' "`path'/`i'"
{txt}  8{com}.                 {c )-}
{txt}  9{com}.                 local files `fullfiles'
{txt} 10{com}.         {c )-}
{txt} 11{com}. 
.         // If recursive
.         if !mi("`recursive'") {c -(}
{txt} 12{com}.                 local dirs : dir "`path'" dirs "*"
{txt} 13{com}.                 foreach dir in `dirs' {c -(}
{txt} 14{com}.                         list_files, path("`path'/`dir'") pattern(`patten') `recursive' `full'
{txt} 15{com}.                         local files `files' `r(files)'
{txt} 16{com}.                 {c )-}
{txt} 17{com}.         {c )-}
{txt} 18{com}. 
.         return local files `files'
{txt} 19{com}. 
. end
{txt}
{com}. 
. ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
> 
. cap program drop drop_dupe_vars
{txt}
{com}. program define drop_dupe_vars
{txt}  1{com}. 
.         syntax
{txt}  2{com}. 
.         qui: ds
{txt}  3{com}.         local vars `r(varlist)'
{txt}  4{com}.         local lowervars =  lower( `"`vars'"' )
{txt}  5{com}.         local dups : list dups lowervars
{txt}  6{com}.         if "`dups'" != "" {c -(}
{txt}  7{com}.         foreach dup in `dups' {c -(}
{txt}  8{com}.                 local pos : list posof `"`dup'"' in lowervars
{txt}  9{com}.                 if `pos' != 0 {c -(}
{txt} 10{com}.                         local drop : word `pos' of `vars'
{txt} 11{com}.                         drop `drop'
{txt} 12{com}.         {c )-}
{txt} 13{com}.         {c )-}
{txt} 14{com}.         {c )-}
{txt} 15{com}. 
. end
{txt}
{com}. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>                                                                                                  local and string manipulation
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. cap program drop inlist2
{txt}
{com}. program define inlist2, rclass
{txt}  1{com}. 
.         syntax, obj(str) vals(str) [cond(str) str(str) string]
{txt}  2{com}. 
.         // Set condition
.         if !mi("`cond'") {c -(}
{txt}  3{com}.                 if !inlist("`cond'", "&", "|") {c -(}
{txt}  4{com}.                         STOP
{txt}  5{com}.                 {c )-}
{txt}  6{com}.                 local cond `cond'
{txt}  7{com}.         {c )-}
{txt}  8{com}.         else {c -(}
{txt}  9{com}.                 local cond |
{txt} 10{com}.         {c )-}
{txt} 11{com}. 
.         // Generate command obj == val1 | obj == val2 | ...
.         local i 1
{txt} 12{com}.         local cmd 1==0
{txt} 13{com}.         foreach val in `vals' {c -(}
{txt} 14{com}.                 if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
{txt} 15{com}.                 else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
{txt} 16{com}.                 else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
{txt} 17{com}.                 // Checking if obj type is the same as value type, skip if missing
.                 else {c -(}
{txt} 18{com}.                         cap confirm numeric variable `obj'
{txt} 19{com}.                         if !_rc local num_obj 1
{txt} 20{com}.                         else local num_obj 0
{txt} 21{com}.                         cap confirm number `val'
{txt} 22{com}.                         if !_rc local num_val 1
{txt} 23{com}.                         else local num_val 0
{txt} 24{com}.                         if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
{txt} 25{com}.                         else if `num_obj' == 0 & `num_val' ==  1 local cmd `cmd' `cond' `obj' == "`val'"
{txt} 26{com}.                         else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
{txt} 27{com}.                 {c )-}
{txt} 28{com}.         local ++i
{txt} 29{com}.         {c )-}
{txt} 30{com}. 
.         return local cmd "`cmd'"
{txt} 31{com}. 
. end
{txt}
{com}. 
. //////////////////////////////////////////////////////////////////////////
> 
. cap program drop concat2
{txt}
{com}. program define concat2
{txt}  1{com}. 
.         syntax, vars(str) gen(str) [p(str) destring]
{txt}  2{com}. qui {c -(}
{txt}  3{com}.         // Set parser to nothing if not present
.         if mi("`p'") local p = ""
{txt}  4{com}. 
.         // Gen out variable
.         gen `gen' = ""
{txt}  5{com}. 
.         // Concatenate
.         local cmd
{txt}  6{com}.         local i = 1
{txt}  7{com}.         foreach var in `vars' {c -(}
{txt}  8{com}.                 // Destring prior to concatenation to remove leading 0's
.                 cap confirm string variable `var'
{txt}  9{com}.                 if !_rc & !mi("`destring'") {c -(}
{txt} 10{com}.                         cap destring `var', gen(`var'_puppies)
{txt} 11{com}.                         if _rc cap decode `var', gen(`var'_puppies)
{txt} 12{com}.                         local `var' `var'_puppies
{txt} 13{com}.                 {c )-}
{txt} 14{com}.                 local destring 0
{txt} 15{com}.                 cap confirm string variable `var'
{txt} 16{com}.                 if _rc {c -(}
{txt} 17{com}.                         tostring `var', gen(`var'_kittens) format(%20.0g)
{txt} 18{com}.                         local temp `var'_kittens
{txt} 19{com}.                         local destring 1
{txt} 20{com}.                 {c )-}
{txt} 21{com}.                 else local temp `var'
{txt} 22{com}.                 replace `temp' = trim(`temp')
{txt} 23{com}.                 if `i' == 1 replace `gen' = `temp'
{txt} 24{com}.                 else replace `gen' = `gen' + `"`p'"' + `temp'
{txt} 25{com}.                 if `destring' cap drop `var'_kittens
{txt} 26{com}.                 if !mi("`destring'") cap drop `var'_puppies
{txt} 27{com}.                 local ++i
{txt} 28{com}.         {c )-}
{txt} 29{com}. {c )-}
{txt} 30{com}. end
{txt}
{com}. 
. //////////////////////////////////////////////////////////////////////////
> 
. cap program drop str_occur
{txt}
{com}. program define str_occur, rclass
{txt}  1{com}. 
.         syntax, str(str) p(str)
{txt}  2{com}. 
.         local count = 0
{txt}  3{com}.         while regexm(`"`str'"', "`p'") {c -(}
{txt}  4{com}.                 local str : subinstr local str "`p'" " "
{txt}  5{com}.                 local ++count
{txt}  6{com}.         {c )-}
{txt}  7{com}. 
.         return scalar N = `count'
{txt}  8{com}. 
. end
{txt}
{com}. 
. //////////////////////////////////////////////////////////////////////////
> 
. cap program drop str_split
{txt}
{com}. program define str_split, rclass
{txt}  1{com}. 
.         syntax anything, p(str)
{txt}  2{com}. 
.         local noparse = subinstr(`"`anything'"', "`p'", " ", .)
{txt}  3{com}.         local i 0
{txt}  4{com}.         foreach val in `noparse' {c -(}
{txt}  5{com}.                 local ++i
{txt}  6{com}.                 return local _`i' = "`val'"
{txt}  7{com}.         {c )-}
{txt}  8{com}. 
.         return scalar N = `i'
{txt}  9{com}. 
. end
{txt}
{com}. 
. 
. /////////////////////////////////////////////////////////////////////////
> 
. cap program drop date_split
{txt}
{com}. program define date_split
{txt}  1{com}. 
.         syntax anything, format(str) [newstem(str)]
{txt}  2{com}. 
.         // Setup
.         local var `anything'
{txt}  3{com}.         local labels day month year
{txt}  4{com}.         local chars d m y
{txt}  5{com}. 
.         // Set stem of new vars
.         if !mi("`newstem'") local stem `newstem'
{txt}  6{com}.         else local stem `var'
{txt}  7{com}. 
.         // STATA date vars
.         if regexm("`format'", "%") {c -(}
{txt}  8{com}.                 foreach label in `labels' {c -(}
{txt}  9{com}.                         local cmd `label'(`var')
{txt} 10{com}.                         gen `stem'_`label' = `cmd'
{txt} 11{com}.                 {c )-}
{txt} 12{com}.         {c )-}
{txt} 13{com}. 
.         // Otherwise if string
.         else {c -(}
{txt} 14{com}.         // Make sure string and if not set string tempvar
.         cap confirm string variable `var'
{txt} 15{com}.         if _rc {c -(}
{txt} 16{com}.                 tostring `var', gen(`var'_kittens)
{txt} 17{com}.                 local var `var'_kittens
{txt} 18{com}.                 local temp `var'
{txt} 19{com}.         {c )-}
{txt} 20{com}. 
.         // Split out any spaces for the time being
.         if regexm("`format'", "%") & regexm("`format'", " ") {c -(}
{txt} 21{com}.                 split `var', p(" ")
{txt} 22{com}.                 replace `var' = `var'1
{txt} 23{com}.                 drop `r(varlist)'
{txt} 24{com}.         {c )-}
{txt} 25{com}. 
.         // IF PARSED (any non alpha char in format)
.         if regexm("`format'", "[^a-zA-Z\d\s:]") | regexm("`format'", " ") {c -(}
{txt} 26{com}.                 // Save parse character
.                 if regexm("`format'", "[^a-zA-Z\d\s:]") local parse = regexs(0)
{txt} 27{com}.                 if regexm("`format'", " ") local parse = regexs(0)
{txt} 28{com}.                 // Save order of D M Y in format
.                 local clean = subinstr("`format'", "`parse'", " ", .)
{txt} 29{com}.                 local order
{txt} 30{com}.                 foreach i in `clean' {c -(}
{txt} 31{com}.                         local chr = substr("`i'", 1, 1)
{txt} 32{com}.                         local order `order' `chr'
{txt} 33{com}.                 {c )-}
{txt} 34{com}.                 // Split into columns and figure out which is which
.                 split `var', p(`"`parse'"') destring
{txt} 35{com}.                 local newvars `r(varlist)'
{txt} 36{com}.                 // Rename the variables to day, month and year
.                 foreach char in `order' {c -(}
{txt} 37{com}.                         if "`char'" == "d" local label day
{txt} 38{com}.                         if "`char'" == "m" local label month
{txt} 39{com}.                         if "`char'" == "y" local label year
{txt} 40{com}.                         gettoken newvar newvars: newvars
{txt} 41{com}.                         rename `newvar' `stem'_`label'
{txt} 42{com}.                 {c )-}
{txt} 43{com}.         {c )-}
{txt} 44{com}.         // ELSE
.         if !regexm("`format'", "[^a-zA-Z\d\s:]") {c -(}
{txt} 45{com}.                 // Add leading zero if needed
.                         local n = strlen("`format'") // Make this better
{txt} 46{com}.                         replace `var' = "0" + `var' if strlen(`var') < `n'
{txt} 47{com}. 
.         // Split
.         foreach char in `chars' {c -(}
{txt} 48{com}.                 gettoken label labels: labels
{txt} 49{com}.                 local first = strpos("`format'", "`char'")
{txt} 50{com}.                 local last = strlen("`format'")-strpos(strreverse("`format'"),"`char'")+1
{txt} 51{com}.                 local length = `last'-`first'+1
{txt} 52{com}.                 di "`char': `first' `last' `length'"
{txt} 53{com}.                 if `first' != 0 {c -(}
{txt} 54{com}.                         gen `stem'_`label' = substr(`var', `first', `length')
{txt} 55{com}.                         destring `stem'_`label', replace force
{txt} 56{com}.                 {c )-}
{txt} 57{com}.         {c )-}
{txt} 58{com}.         {c )-}
{txt} 59{com}. 
.         // Drop temp variable
.         cap drop `temp'
{txt} 60{com}.         {c )-}
{txt} 61{com}. 
. end
{txt}
{com}. 
. //////////////////////////////////////////////////////////////////////////
> 
. cap program drop localsub
{txt}
{com}. program define localsub, rclass
{txt}  1{com}. 
.         syntax, local(str) sub(str)
{txt}  2{com}. 
.         local out
{txt}  3{com}.         foreach item in `local' {c -(}
{txt}  4{com}.                 if regexm("`item'", "`sub'") {c -(}
{txt}  5{com}.                         local out `out' `item'
{txt}  6{com}.                 {c )-}
{txt}  7{com}.         {c )-}
{txt}  8{com}. 
.         return local sub `out'
{txt}  9{com}. 
. end
{txt}
{com}. 
. //////////////////////////////////////////////////////////////////////////
> 
. cap program drop localregexs
{txt}
{com}. program define localregexs, rclass
{txt}  1{com}. 
.         syntax, local(str) pattern(str)
{txt}  2{com}. 
.         local out
{txt}  3{com}.         foreach item in `local' {c -(}
{txt}  4{com}.                 if regexm("`item'", "`pattern'") {c -(}
{txt}  5{com}.                         local hit = regexs(0)
{txt}  6{com}.                         local out `out' `hit'
{txt}  7{com}.                 {c )-}
{txt}  8{com}.         {c )-}
{txt}  9{com}. 
.         return local str `out'
{txt} 10{com}. 
. end
{txt}
{com}. 
. 
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>                                                                                                                 ubcov utility
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. cap program drop ubcov_path
{txt}
{com}. program define ubcov_path
{txt}  1{com}. 
.         syntax
{txt}  2{com}. 
.         // Find path.csv
.         local pwd = subinstr(c(pwd), "\", "/", .)
{txt}  3{com}.         preserve
{txt}  4{com}.                 clear
{txt}  5{com}.                 set obs 1
{txt}  6{com}.                 gen root = "`pwd'"
{txt}  7{com}.                 split root, p("ubcov_central")
{txt}  8{com}.                 local root = root1[1] + "/ubcov_central"
{txt}  9{com}.         restore
{txt} 10{com}. 
.         // Load paths.csv
.         insheet using "`root'/paths.csv", clear names
{txt} 11{com}. 
.         // Detect
.         qui: ds
{txt} 12{com}.         local npath: word `c(k)' of `r(varlist)'
{txt} 13{com}.         while regexm("`npath'", "[a-z]") {c -(}
{txt} 14{com}.                 local npath = regexr("`npath'", "[a-z]", "")
{txt} 15{com}.         {c )-}
{txt} 16{com}. 
.         // Set paths as globals
.         forvalues i = 1/`npath' {c -(}
{txt} 17{com}.         forvalues n = 1/`=_N' {c -(}
{txt} 18{com}.                 local obj = object[`n']
{txt} 19{com}.                 local path = path`i'[`n']
{txt} 20{com}.                 if "`path'" != "" {c -(}
{txt} 21{com}.                         if regexm("`path'", ",") {c -(}
{txt} 22{com}.                                 tokenize "`path'", p(" ,")
{txt} 23{com}.                                 global `obj' "${c -(}`1'{c )-}`3'"
{txt} 24{com}.                         {c )-}
{txt} 25{com}.                         else {c -(}
{txt} 26{com}.                                 global `obj' `path'
{txt} 27{com}.                         {c )-}
{txt} 28{com}.                         // OS
.                         if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
{txt} 29{com}.                                 global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
{txt} 30{com}.                                 global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
{txt} 31{com}.                         {c )-}
{txt} 32{com}.                         else if c(os) == "Windows" {c -(}
{txt} 33{com}.                                 global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
{txt} 34{com}.                                 global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
{txt} 35{com}.                         {c )-}
{txt} 36{com}.                 {c )-}
{txt} 37{com}.         {c )-}
{txt} 38{com}.         {c )-}
{txt} 39{com}. 
. end
{txt}
{com}. 
. //////////////////////////////////////////////////////////////////////////
> 
. cap program drop var_labels
{txt}
{com}. program define var_labels
{txt}  1{com}. 
.         syntax [, lookfor(str)]
{txt}  2{com}. qui {c -(}
{txt}  3{com}.         // Browse
.         cap drop var
{txt}  4{com}.         cap drop label
{txt}  5{com}.         gen var = ""
{txt}  6{com}.         gen label = ""
{txt}  7{com}.         quietly ds
{txt}  8{com}.         local i 1
{txt}  9{com}.         foreach var in `r(varlist)' {c -(}
{txt} 10{com}.                 replace var = "`var'" in `i'
{txt} 11{com}.                 local label : variable label `var'
{txt} 12{com}.                 replace label = "`label'" in `i'
{txt} 13{com}.         local ++i
{txt} 14{com}.         {c )-}
{txt} 15{com}. {c )-}
{txt} 16{com}. 
.         if !mi("`lookfor'") {c -(}
{txt} 17{com}.                 br var label if regexm(var, "`lookfor'") | regexm(label, "`lookfor'")
{txt} 18{com}.         {c )-}
{txt} 19{com}.         else br var label
{txt} 20{com}. 
. end
{txt}
{com}. 
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>                                                                                                                   database
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. 
. /*
> This function determines which connection string to use for sql queries.
> It's intended to be used whenever a function needs to be portable,
> ie, you need a function to make few assumptions about dsn and other
> machine specific settings.
> 
> Usage:
> create_connection_string
> local conn_string = r(conn_string)
> 
> odbc, load ("select foo from baz") `conn_string'
> 
> Arguments: None required.
> Optional arguments are server, database, user, password
> Defaults are modeling-cod-db, shared and our readonly user/pw
> Returns: r(conn_string)
> 
> Author: Joe Wagner
> 
> */
. 
. cap program drop create_connection_string
{txt}
{com}. program create_connection_string, rclass
{txt}  1{com}.    syntax, [server(string) database(string) ///
>      user(string) password(string)]
{txt}  2{com}. 
.    // set unix odbc manager
.    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
{txt}  3{com}.         set odbcmgr unixodbc
{txt}  4{com}.         local j = "/home/j"
{txt}  5{com}.         {c )-}
{txt}  6{com}.    else {c -(}
{txt}  7{com}.         local j = "J:"
{txt}  8{com}.    {c )-}
{txt}  9{com}. 
.    preserve
{txt} 10{com}. 
.    local DEFAULT_CREDENTIALS = "`j'/temp/central_comp/credentials/default.csv"
{txt} 11{com}. 
.    // set default arguments, if not specified
.    if "`server'" == ""   local server = "modeling-cod-db"
{txt} 12{com}.    if "`database'" == "" local database = "shared"
{txt} 13{com}.    if "`user'" == "" & "`password'" == "" {c -(}
{txt} 14{com}.         import delimited using "`DEFAULT_CREDENTIALS'", clear varnames(1)
{txt} 15{com}.         qui levelsof user, local(user) cl
{txt} 16{com}.         qui levelsof pw, local(password) cl
{txt} 17{com}.    {c )-}
{txt} 18{com}. 
.    // assign drivers to attempt to connect with
.    local driver1 = `"MySQL ODBC 5.2 Unicode Driver"'
{txt} 19{com}.    local driver2 = `"MySQL ODBC 5.3 Unicode Driver"'
{txt} 20{com}. 
.    // Loop through all connection strings and see if any work
.    local passes = 0
{txt} 21{com}.    foreach driver in "`driver1'" "`driver2'" {c -(}
{txt} 22{com}. 
.       local conn_string = `"conn("DRIVER={c -(}`driver'{c )-};"' ///
>         + `"SERVER=`server'.ihme.washington.edu;DATABASE=`database';"' ///
>         + `"UID=`user';PWD=`password';")"'
{txt} 23{com}. 
.       cap odbc exec("select 1"), `conn_string'
{txt} 24{com}. 
.       if !_rc {c -(}
{txt} 25{com}.          return local conn_string "`conn_string'"
{txt} 26{com}.                  local passes = 1
{txt} 27{com}.          {c )-}
{txt} 28{com}. 
.       {c )-}
{txt} 29{com}. 
.    restore
{txt} 30{com}. 
.    if `passes' != 1 {c -(}
{txt} 31{com}.       di as error "Invalid connection arguments supplied"
{txt} 32{com}.       error(999)
{txt} 33{com}.       {c )-}
{txt} 34{com}. 
. end
{txt}
{com}. 
. /////////////////////////////////////////////////////////////////////////
> 
. cap program drop run_query
{txt}
{com}. program define run_query
{txt}  1{com}. 
.         syntax, host(str) db(str) query(str)
{txt}  2{com}. 
.         create_connection_string, server(`host') database(`db')
{txt}  3{com}.         local con `r(conn_string)'
{txt}  4{com}.         # delim ;
{txt}delimiter now ;
{com}.         odbc load, exec(`"`query'"') `con' clear;
{txt}  5{com}.         # delim cr
{txt}delimiter now cr
{com}. 
.  end
{txt}
{com}. 
. //////////////////////////////////////////////////////////////////////////
> 
. cap program drop gs_load
{txt}
{com}. program define gs_load
{txt}  1{com}. 
.         syntax, key(str)
{txt}  2{com}. 
.         preserve
{txt}  3{com}.                 clear
{txt}  4{com}.                 set obs 1
{txt}  5{com}.                 gen blah = 1
{txt}  6{com}.                 tempfile temp
{txt}  7{com}.                 save `temp', replace
{txt}  8{com}.         restore
{txt}  9{com}. 
.         local link "https://docs.google.com/spreadsheets/d/`key'/export?format=csv"
{txt} 10{com}.         copy "`link'" `temp'
{txt} 11{com}.         import delimited using `temp', clear varnames(1) stringcols(_all) charset("utf-8")
{txt} 12{com}. 
. end
{txt}
{com}. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>                                                                                                                 cluster utility
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. cap program drop qsub
{txt}
{com}. program define qsub
{txt}  1{com}. 
.         syntax, job_name(str) script(str) fthreads(integer) memory(integer) h_rt(str) [arguments(str) hold(str) cluster_project(str) logs(str)]
{txt}  2{com}. 
.         local cmd qsub
{txt}  3{com}. 
.         // Required
.                 // Job name
.                 local job_name -N `job_name'
{txt}  4{com}.                 // Detect language and check if py, r, do
.                 tokenize "`script'", p(".")
{txt}  5{com}.                 local lang = lower("`3'")
{txt}  6{com}.                 if !inlist("`lang'", "py", "r", "do") {c -(}
{txt}  7{com}.                         di as error "Unidentified language, please consult a translator"
{txt}  8{com}.                         STOP
{txt}  9{com}.                 {c )-}
{txt} 10{com}.                 // Get path to shell script
.                 qui: ubcov_path
{txt} 11{com}.                 local shell "$shells_root/`lang'.sh"
{txt} 12{com}.                 // Slots
.                 local fthreads fthread=`fthreads'
{txt} 13{com}.                 local memory  m_mem_free=`memory'G
{txt} 14{com}.                 local h_rt h_rt=`h_rt'
{txt} 15{com}. 
.         // Build base command
.         local cmd `cmd' `job_name' -l `fthreads' -l `memory' -l `h_rt' -q all.q -l archive=TRUE
{txt} 16{com}. 
.         // Optional arguments
.                 // Cluster project
.                 if !mi("`cluster_project'") {c -(}
{txt} 17{com}.                         local cluster_project -P `cluster_project'
{txt} 18{com}.                         local cmd `cmd' `cluster_project'
{txt} 19{com}.                 {c )-}
{txt} 20{com}.                 // Hold
.                 if !mi("`hold'") {c -(}
{txt} 21{com}.                         local hold -hold_jid `hold'
{txt} 22{com}.                         local cmd `cmd' `hold'
{txt} 23{com}.                 {c )-}
{txt} 24{com}.                 // Logs
.                 if !mi("`logs'") {c -(}
{txt} 25{com}.                         local logs -o `logs' -e `logs'
{txt} 26{com}.                         local cmd `cmd' `logs'
{txt} 27{com}.                 {c )-}
{txt} 28{com}. 
. 
.         // Adding script and arguments to command
.                 // Shell file
.                 local cmd `cmd' `shell'
{txt} 29{com}.                 // Script
.                 local cmd `cmd' `script'
{txt} 30{com}.                 // Arguments, first argument is path to script
.                 if !mi("`arguments'") {c -(}
{txt} 31{com}.                         local cmd `cmd' `arguments'
{txt} 32{com}.                 {c )-}
{txt} 33{com}. 
.         // Submit job
.         !`cmd'
{txt} 34{com}. 
. end
{txt}
{com}. 
. //////////////////////////////////////////////////////////////////////////
> 
. cap program drop job_check
{txt}
{com}. program define job_check, return
{txt}  1{com}. 
.         syntax, job_name(str)
{txt}  2{com}. 
.         // Setup temp
.         tempfile temp
{txt}  3{com}. 
.         // Command
.         local cmd "qstat -r | grep `job_name' | wc -l >> `temp'"
{txt}  4{com}.         !`cmd'
{txt}  5{com}. 
.         // Retrieve output
.         tempname fh
{txt}  6{com}.         file open `fh' using "`temp'", read
{txt}  7{com}.         file read `fh' line
{txt}  8{com}.         local n `line'
{txt}  9{com}. 
.         return local pass `n'
{txt} 10{com}. end
{txt}
{com}. 
. //////////////////////////////////////////////////////////////////////////
> 
. cap program drop job_hold
{txt}
{com}. program define job_hold
{txt}  1{com}. 
. 
.         syntax, job_name(str)
{txt}  2{com}. 
.         // Give it a sec to launch
.         sleep 3000
{txt}  3{com}. 
.         // Start timer
.         timer clear 1
{txt}  4{com}.         timer on 1
{txt}  5{com}. 
.         // Check command
.         local cmd "qstat -r | grep `job_name' | wc -l"
{txt}  6{com}. 
.         // Wait for job to finish
.         local pass 0
{txt}  7{com}.         while !`pass' {c -(}
{txt}  8{com}.                 // Check if job is done
.                 job_check, job_name(`job_name')
{txt}  9{com}.                 if `r(pass)' == 0 {c -(}
{txt} 10{com}.                         local pass 1
{txt} 11{com}.                 {c )-}
{txt} 12{com}.                 else {c -(}
{txt} 13{com}.                         sleep 5000
{txt} 14{com}.                 {c )-}
{txt} 15{com}.         {c )-}
{txt} 16{com}. 
.         // End timer
.         timer off 1
{txt} 17{com}.         timer list 1
{txt} 18{com}. 
. end
{txt}
{com}. 
{txt}end of do-file
- {c )-}
- if "`file'" != "run.do" do "`path'/`file'"
= if "mapping.do" != "run.do" do "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core//mapping.do"

{com}. /***********************************************************************************************************
>  Author: Patrick Liu (pyliu@uw.edu)                                                                                                                                             
>  Date: 7/13/2015
>  Project: ubCov
>  Purpose: Mapping
>                                                                                                                                                                         
> ***********************************************************************************************************/
. 
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>                                                                                                          mapping blocks
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. cap program drop map_indicators
{txt}
{com}. program define map_indicators, return
{txt}  1{com}. 
.         syntax, topic(str) [bypass_map] [store_vals] [cluster] [output_path(str)]
{txt}  2{com}. 
. qui{c -(}
{txt}  3{com}. 
.         /////////////
>         // Settings
.         /////////////
> 
.         // Save data
.         tempfile data
{txt}  4{com}.         save `data', replace
{txt}  5{com}. 
.         // Set vars based on presence in dataset
.         local vars
{txt}  6{com}.         foreach var in $map_indicators {c -(}
{txt}  7{com}.                 cap confirm string var `var'
{txt}  8{com}.                 if !_rc local vars `vars' `var'
{txt}  9{com}.         {c )-}
{txt} 10{com}. 
.         // Pull and clean map
.         gs_db, obj(value_map) topic(`topic')
{txt} 11{com}.                 // Map checks
.                 // Be evil and don't let anyone use this until things are fully mapped
.                 qui: tab value if mi(category_indicator_name)
{txt} 12{com}.                 if `r(N)' > 0 {c -(}
{txt} 13{com}.                         di as error "Incomplete maps for topic (`topic')"
{txt} 14{com}.                         if mi("`bypass_map'") {c -(}
{txt} 15{com}.                                 di as error "All values must be mapped to continue"
{txt} 16{com}.                                 STOP
{txt} 17{com}.                         {c )-}
{txt} 18{com}.                 {c )-}
{txt} 19{com}.                 // Check if anything is mapped
.                 if `r(N)' == _N {c -(}
{txt} 20{com}.                         di as error "No maps filled for topic(`topic')"
{txt} 21{com}.                         STOP
{txt} 22{com}.                 {c )-}
{txt} 23{com}.                 // Check that all vars are in map
.                 levelsof indicator, l(var_check) clean
{txt} 24{com}.                 local no_var : list vars - var_check
{txt} 25{com}.                 if !mi("`no_var'") {c -(}
{txt} 26{com}.                         di as error "Need to prime map (set one value to map) for indicators (`no_var')"
{txt} 27{com}.                         STOP
{txt} 28{com}.                 {c )-}
{txt} 29{com}.         // Clean map
.         levelsof indicator, l(indicators) clean
{txt} 30{com}.         split category_indicator_name, p("|")
{txt} 31{com}.         foreach i in `indicators' {c -(}
{txt} 32{com}.                 gen `i' = value if indicator == "`i'"
{txt} 33{com}.                 gen `i'_mapped = category_indicator_name1 if indicator == "`i'"
{txt} 34{com}.         {c )-}
{txt} 35{com}.         drop category_indicator_name*
{txt} 36{com}.         tempfile map
{txt} 37{com}.         save `map', replace
{txt} 38{com}. 
.         /////////////
>         // Map
.         /////////////
>         local map_out
{txt} 39{com}.         // Map into dataset
.         foreach var in `vars' {c -(}
{txt} 40{com}.                 // Prep map
.                 use `map', clear
{txt} 41{com}.                 keep `var' `var'_mapped
{txt} 42{com}.                 drop if mi(`var')
{txt} 43{com}.                 replace `var' = trim(lower(`var'))
{txt} 44{com}.                 duplicates drop `var', force
{txt} 45{com}.                 tempfile map_clean
{txt} 46{com}.                 save `map_clean', replace
{txt} 47{com}.                 // Prep data
.                 use `data', clear
{txt} 48{com}.                 replace `var' = trim(lower(`var'))
{txt} 49{com}.                 // Map
.                         // If categ_multi_bin
.                         qui: tab `var' if regexm(`var', "###")
{txt} 50{com}.                         if `r(N)' > 0 {c -(}
{txt} 51{com}.                                 // Uncollapse and map
.                                 split `var', p("###")
{txt} 52{com}.                                 rename `var' `var'_kitten // Temp rename so can merge
{txt} 53{com}.                                 local varlist `r(varlist)'
{txt} 54{com}.                                 local n_vars : list sizeof varlist
{txt} 55{com}.                                 local new_`var'
{txt} 56{com}.                                 forvalues n = 1/`n_vars' {c -(}
{txt} 57{com}.                                         rename `var'`n' `var' // Rename to match map
{txt} 58{com}.                                         merge m:1 `var' using `map_clean', gen(kittenmerge) keep(1 3)
{txt} 59{com}.                                         // Store unmapped values
.                                         levelsof `var' if mi(`var'_mapped) & kittenmerge == 1, l(new_`var'`n')
{txt} 60{com}.                                         local new_`var': list new_`var' | new_`var'`n'
{txt} 61{com}.                                         local new_`var': list uniq new_`var'
{txt} 62{com}.                                         // Drop var`n' (currently var), drop kittenmerge, and rename mapped
.                                         drop `var' kittenmerge
{txt} 63{com}.                                         rename `var'_mapped `var'_mapped`n'
{txt} 64{com}.                                 {c )-}
{txt} 65{com}.                                 // Collapse merged values
.                                 gen `var'_mapped = ""
{txt} 66{com}.                                 forvalues n = 1/`n_vars' {c -(}
{txt} 67{com}.                                         replace `var'_mapped = `var'_mapped + "###" + `var'_mapped`n' if !mi(`var'_mapped`n') & !mi(`var'_mapped)
{txt} 68{com}.                                         replace `var'_mapped = `var'_mapped`n' if !mi(`var'_mapped`n') & mi(`var'_mapped) 
{txt} 69{com}.                                         drop `var'_mapped`n'
{txt} 70{com}.                                 {c )-}
{txt} 71{com}.                                 // Rename back
.                                 rename `var'_kitten `var'
{txt} 72{com}.                         {c )-}
{txt} 73{com}.                         // If categ_str
.                         else {c -(}
{txt} 74{com}.                                 merge m:1 `var' using `map_clean', gen(kittenmerge) keep(1 3)
{txt} 75{com}.                                 // Store unmapped values
.                                 levelsof `var' if mi(`var'_mapped) & kittenmerge == 1, l(new_`var')
{txt} 76{com}.                                 drop kittenmerge
{txt} 77{com}.                         {c )-}
{txt} 78{com}.                         // Map variable out
.                         local map_out `map_out' `var'_mapped
{txt} 79{com}.                 // Save
.                 save `data', replace
{txt} 80{com}.         {c )-}
{txt} 81{com}. 
.         /////////////
>         // Save
.         /////////////
> 
.         // Store unmapped values
.         local continue 0
{txt} 82{com}.         foreach var in `vars' {c -(}
{txt} 83{com}.                 local n : list sizeof new_`var'
{txt} 84{com}.                 if `n' > 0 local continue 1
{txt} 85{com}.         {c )-}
{txt} 86{com}.         if `continue' {c -(}
{txt} 87{com}.                 clear
{txt} 88{com}.                 set obs 1
{txt} 89{com}.                 foreach var in `vars' {c -(}
{txt} 90{com}.                                 gen value_`var' = ""
{txt} 91{com}.                                 local n : list sizeof new_`var'
{txt} 92{com}.                                 if `n' > _N set obs `n'
{txt} 93{com}.                                 forvalues i = 1/`n' {c -(}
{txt} 94{com}.                                         local word : word `i' of `new_`var''
{txt} 95{com}.                                         replace value_`var' = `"`word'"' if _n == `i'
{txt} 96{com}.                                 {c )-}
{txt} 97{com}.                 {c )-}
{txt} 98{com}.                 gen row = _n
{txt} 99{com}.                 reshape long value_, i(row) j(indicator) string
{txt}100{com}.                 // Clean
.                 rename value_ value
{txt}101{com}.                 keep if !mi(value)
{txt}102{com}.                 drop row
{txt}103{com}.                 gen topic = "`topic'"
{txt}104{com}.                 gen category_indicator_name = ""
{txt}105{com}.                 order topic indicator value
{txt}106{com}.                 sort topic indicator value
{txt}107{com}.                 tempfile new_maps
{txt}108{com}.                 save `new_maps', replace
{txt}109{com}. 
.         // Either prompt or save in $ubcov_library
.         // Store
.         if !mi("`store_vals'") {c -(}
{txt}110{com}.                 if !mi("`output_path'") local path `output_path'
{txt}111{com}.                 else local path "$ubcov_library/extract/topics/value_maps/"
{txt}112{com}.                 if !mi("`cluster'") local file "`path'/`topic'_${c -(}ubcov_id{c )-}.csv"
{txt}113{com}.                 else local file "`path'/`topic'.csv"
{txt}114{com}.                 cap confirm file `file'
{txt}115{com}.                 // Create new map
.                 if _rc export delimited "`file'", replace
{txt}116{com}.                 // Append onto existing map
.                 else {c -(}
{txt}117{com}.                         import delimited using "`file'", clear stringcols(_all)
{txt}118{com}.                         append using `new_maps'
{txt}119{com}.                         // Drop duplicates
.                         duplicates drop indicator value if mi(category_indicator_name), force
{txt}120{com}.                         duplicates drop indicator value, force
{txt}121{com}.                         // Save
.                         sort indicator value
{txt}122{com}.                         export delimited "`file'", replace
{txt}123{com}.                 {c )-}
{txt}124{com}.                 // Display
.                 di as error "Storing new map values for topic (`topic')"
{txt}125{com}.         {c )-}
{txt}126{com}.         // Prompt
.         else {c -(}
{txt}127{com}.                 local pass 0
{txt}128{com}.                 di as error "New values to map for topic (`topic')"
{txt}129{com}.                 br
{txt}130{com}.                 while `pass' == 0 {c -(}
{txt}131{com}.                         noisily: di as error "Type 'y' to continue", _request(ans)
{txt}132{com}.                         if "$ans" == "y" {c -(}
{txt}133{com}.                                 local pass 1
{txt}134{com}.                         {c )-}
{txt}135{com}.                         else {c -(}
{txt}136{com}.                                 cap $ans
{txt}137{com}.                         {c )-}
{txt}138{com}.                 {c )-}
{txt}139{com}.         {c )-}
{txt}140{com}.         {c )-} // continue
{txt}141{com}.         // Restore data
.         use `data', clear
{txt}142{com}. {c )-} //qui 
{txt}143{com}. 
. return local map_out `map_out'
{txt}144{com}. 
. end
{txt}
{com}. 
. 
{txt}end of do-file
- {c )-}
- if "`file'" != "run.do" do "`path'/`file'"
= if "extraction.do" != "run.do" do "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core//extraction.do"

{com}. 
. /***********************************************************************************************************
>  Author: Patrick Liu (pyliu@uw.edu)
>  Date: 7/13/2015
>  Project: ubCov
>  Purpose: Extraction cascade
> 
> ***********************************************************************************************************/
. 
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>                                                                                                          main
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. cap program drop run_extract
{txt}
{com}. program define run_extract
{txt}  1{com}. 
.         syntax anything, [bypass] [keep] [bypass_map] [store_vals] [run_all] [store_vals_path(str)] [collapse_config(str)] [trace]
{txt}  2{com}. 
.         /////////////////
>         // Setup
.         /////////////////
> 
.         // ubcov_ids
.         global ubcov_ids `anything'
{txt}  3{com}. 
.         // Key
.         global key nid ihme_loc_id year_start year_end survey_module file_path
{txt}  4{com}. 
.         // Running all
.         if !mi("`run_all'") {c -(}
{txt}  5{com}.                 get, codebook
{txt}  6{com}.                 levelsof ubcov_id, l(ubcov_ids) clean
{txt}  7{com}.                 global ubcov_ids `ubcov_ids'
{txt}  8{com}.         {c )-}
{txt}  9{com}. 
.         // Run
.         foreach ubcov_id in $ubcov_ids {c -(}
{txt} 10{com}. 
.         // Load codebook, sets cells as globals
.         global ubcov_id `ubcov_id'
{txt} 11{com}.         load_codebook, ubcov_id(`ubcov_id')
{txt} 12{com}. 
.         // BREAK anything on temp or incoming
.         if regexm(lower("$file_path"), "j:/data/incoming|j:/temp|j:/work") {c -(}
{txt} 13{com}.                 di as error "Please contact the data team to index file ($file_path)."
{txt} 14{com}.                 STOP
{txt} 15{com}.         {c )-}
{txt} 16{com}. 
.         // Load data
.         if mi("$delimiter") load $file_path
{txt} 17{com}.         else load $file_path, delimiter($delimiter)
{txt} 18{com}. 
.         // Label ubcov_id
.         label data "ubcov_id : `ubcov_id'"
{txt} 19{com}. 
.         /////////////////
>         // Reshapes
.         /////////////////
> 
.         if !mi("$reshape") {c -(}
{txt} 20{com}.         di as error "||||||||||||||||||||||||||||||||||||"
{txt} 21{com}.         di as error "|||||||||   RESHAPE FILES  |||||||||"
{txt} 22{com}.         di as error "||||||||||||||||||||||||||||||||||||"
{txt} 23{com}.         di as error "Reshaping $file_path"
{txt} 24{com}.         if "$reshape_stem" == "1" insert_stems
{txt} 25{com}.         reshape2, id($reshape) newid(reshapeid) time keep($reshape_keepid)
{txt} 26{com}.         {c )-}
{txt} 27{com}. 
.         /////////////////
>         // Subset
.         /////////////////
> 
.         if !mi("$subset") {c -(}
{txt} 28{com}.         di as error "||||||||||||||||||||||||||||||||||||"
{txt} 29{com}.         di as error "|||||||||   SUBSET  FILES  |||||||||"
{txt} 30{com}.         di as error "||||||||||||||||||||||||||||||||||||"
{txt} 31{com}.         di as error "Subsetting $file_path"
{txt} 32{com}.         $subset
{txt} 33{com}.         {c )-}
{txt} 34{com}. 
.         /////////////////
>         // Merges
.         /////////////////
> 
.         di as error "||||||||||||||||||||||||||||||||||||"
{txt} 35{com}.         di as error "|||||||||   MERGING FILES  |||||||||"
{txt} 36{com}.         di as error "||||||||||||||||||||||||||||||||||||"
{txt} 37{com}. 
.         load_merges, topics($topics) threshold(0.1)
{txt} 38{com}. 
.         /////////////////
>         // Label vars/values
.         /////////////////
> 
.         di as error "||||||||||||||||||||||||||||||||||||"
{txt} 39{com}.         di as error "|||||||||   LABEL VARS     |||||||||"
{txt} 40{com}.         di as error "||||||||||||||||||||||||||||||||||||"
{txt} 41{com}. 
.         qui: label_vars, file_path($file_path)
{txt} 42{com}.         qui: label_vals, file_path($file_path)
{txt} 43{com}. 
.         /////////////////
>         // Extract
.         /////////////////
> 
.         di as error "||||||||||||||||||||||||||||||||||||"
{txt} 44{com}.         di as error "||||||||| BEGIN EXTRACTION |||||||||"
{txt} 45{com}.         di as error "||||||||||||||||||||||||||||||||||||"
{txt} 46{com}. 
.         // Run through indicator creation
.         create_indicators, indicators($indicators)
{txt} 47{com}. 
.         // STORE CREATED INDICATORS
.         global created_indicators `r(vars)'
{txt} 48{com}. 
.         /////////////////
>         // Value mapping
.         /////////////////
> 
.         // Store value maps
.         if !mi("$map_indicators") {c -(}
{txt} 49{com}.         di as error "||||||||||||||||||||||||||||||||||||"
{txt} 50{com}.         di as error "||||||||| STORE VALUE MAPS |||||||||"
{txt} 51{com}.         di as error "||||||||||||||||||||||||||||||||||||"
{txt} 52{com}.         local map_args
{txt} 53{com}.         foreach topic in $map_topics {c -(}
{txt} 54{com}.                 if !mi("`store_vals_path'") local map_args cluster output_path(`store_vals_path')
{txt} 55{com}.                 map_indicators, topic(`topic') `bypass_map' `store_vals' `map_args'
{txt} 56{com}.                 global created_indicators $created_indicators `r(map_out)'
{txt} 57{com}.         {c )-}
{txt} 58{com}.         {c )-}
{txt} 59{com}. 
.         /////////////////
>         // Custom code
.         /////////////////
> 
.         di as error "|||||||||||||||||||||||||||||||||||||||||||"
{txt} 60{com}.         di as error "||||||||| BEGIN TOPIC CUSTOM CODE |||||||||"
{txt} 61{com}.         di as error "|||||||||||||||||||||||||||||||||||||||||||"
{txt} 62{com}. 
.         // Loop through topic custom code
.         run_custom_code, type(topic) topics($topics) `trace'
{txt} 63{com}. 
.         /////////////////
>         // Post-Processing
.         /////////////////
> 
.         di as error "||||||||||||||||||||||||||||||||||||"
{txt} 64{com}.         di as error "||||||||| BEGIN VALIDATION |||||||||"
{txt} 65{com}.         di as error "||||||||||||||||||||||||||||||||||||"
{txt} 66{com}. 
.         // Run validation
.         run_validation, indicators($indicators)
{txt} 67{com}. 
.         // Check and clean output
.         check_clean, indicators($created_indicators) `bypass' `keep'
{txt} 68{com}. 
.         // Merge GBD subnational map
.         inlist2, obj($ihme_loc_id) vals($gbd_subnat_locs) string
{txt} 69{com}.         if `r(cmd)' {c -(}
{txt} 70{com}.         di as error "||||||||||||||||||||||||||||||||||||"
{txt} 71{com}.         di as error "||||||||| MAP GBD SUBNAT  ||||||||||"
{txt} 72{com}.         di as error "||||||||||||||||||||||||||||||||||||"
{txt} 73{com}.         map_gbd_subnat, `bypass_map'
{txt} 74{com}.         {c )-}
{txt} 75{com}. 
.         // India urbanicity mapping
.         if regexm("$ihme_loc_id", "IND") {c -(}
{txt} 76{com}.                 if regexm("$ihme_loc_id", "_") gen admin_1_id = "$ihme_loc_id"
{txt} 77{com}.                 india_urban
{txt} 78{com}.         {c )-}
{txt} 79{com}. 
.         /////////////////
>         // Collapse
.         /////////////////
> 
.         //if !mi("`collapse_config'") | regexm(lower("$file_path"), "limited") {c -(}
.         //di as error "||||||||||||||||||||||||||||||||||||"
.         //di as error "|||||||||    COLLAPSE      |||||||||"
.         //di as error "||||||||||||||||||||||||||||||||||||"
.         //if (regexm(lower("$file_path"), "limited")) di "Collapse || file ($file_path) is limited use and must be tabulated prior to saving."
.         //run_collapse, config_path(`collapse_config')
.         //{c )-}
. 
.         {c )-} // Run loop
{txt} 80{com}. 
.         di as error "||||||||||||||||||||||||||||||||||||"
{txt} 81{com}.         di as error "||||||||||||| COMPLETE |||||||||||||"
{txt} 82{com}.         di as error "||||||||||||||||||||||||||||||||||||"
{txt} 83{com}. 
. 
. 
. end
{txt}
{com}. 
{txt}end of do-file
- {c )-}
- if "`file'" != "run.do" do "`path'/`file'"
= if "load.do" != "run.do" do "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core//load.do"

{com}. qui {c -(}
  {txt}- foreach path in `paths' {c -(}
  = foreach path in modules/extract/core/ modules/extract/core/addons/ {c -(}
  - local files : dir "./`path'" files "*.do"
  = local files : dir "./modules/extract/core/" files "*.do"
  - foreach file in `files' {c -(}
  = foreach file in "sourcing.do" "batch.do" "label.do" "utility.do" "mapping.do" "extraction.do" "load.do" "validate.do" "init.do" "merge.do" "generate.do" {c -(}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "sourcing.do" != "load.do" do "modules/extract/core//sourcing.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "batch.do" != "load.do" do "modules/extract/core//batch.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "label.do" != "load.do" do "modules/extract/core//label.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "utility.do" != "load.do" do "modules/extract/core//utility.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "mapping.do" != "load.do" do "modules/extract/core//mapping.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "extraction.do" != "load.do" do "modules/extract/core//extraction.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "load.do" != "load.do" do "modules/extract/core//load.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "validate.do" != "load.do" do "modules/extract/core//validate.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "init.do" != "load.do" do "modules/extract/core//init.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "merge.do" != "load.do" do "modules/extract/core//merge.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "generate.do" != "load.do" do "modules/extract/core//generate.do"
  - {c )-}
  - {c )-}
  - local files : dir "./`path'" files "*.do"
  = local files : dir "./modules/extract/core/addons/" files "*.do"
  - foreach file in `files' {c -(}
  = foreach file in "psu_mapping.do" "collapse.do" "custom.do" "mergexy.do" "india_urban.do" "age_calculator.do" "translate_labels.do" "reshape2.do" "gbd_subnat.do" {c -(}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "psu_mapping.do" != "load.do" do "modules/extract/core/addons//psu_mapping.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "collapse.do" != "load.do" do "modules/extract/core/addons//collapse.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "custom.do" != "load.do" do "modules/extract/core/addons//custom.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "mergexy.do" != "load.do" do "modules/extract/core/addons//mergexy.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "india_urban.do" != "load.do" do "modules/extract/core/addons//india_urban.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "age_calculator.do" != "load.do" do "modules/extract/core/addons//age_calculator.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "translate_labels.do" != "load.do" do "modules/extract/core/addons//translate_labels.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "reshape2.do" != "load.do" do "modules/extract/core/addons//reshape2.do"
  - {c )-}
  - if "`file'" != "load.do" do "`path'/`file'"
  = if "gbd_subnat.do" != "load.do" do "modules/extract/core/addons//gbd_subnat.do"
  - {c )-}
  - {c )-}
    {hline 77} begin adopath {hline}
    - version 6
    - gettoken op 0: 0, parse("+- ")
    - if `"`op'"'=="+" {c -(}
    = if `"+"'=="+" {c -(}
    - gettoken op: 0, parse("+- ")
    - if `"`op'"' == "+" {c -(}
    = if `"modules/extract/core/addons/"' == "+" {c -(}
      gettoken op 0: 0, parse("+- ")
      local op "++"
      {c )-}
    - else local op "+"
    - Chkrest `op' `0'
    = Chkrest +  modules/extract/core/addons/
      {hline 67} begin adopath.Chkrest {hline}
      - gettoken op 0: 0
      - local hold `"`0'"'
      = local hold `"  modules/extract/core/addons/"'
      - gettoken mytok 0: 0
      - sret local token `"`mytok'"'
      = sret local token `"modules/extract/core/addons/"'
      - if trim(`"`s(token)'"')=="" {c -(}
      = if trim(`"modules/extract/core/addons/"')=="" {c -(}
        error 198
        {c )-}
      - if trim(`"`0'"') != "" {c -(}
      = if trim(`""') != "" {c -(}
        capture noisily error 198
        local hold = trim(`"`hold'"')
        di in red `"perhaps you meant to type  adopath `op' "`hold'""'
        exit 198
        {c )-}
      {hline 69} end adopath.Chkrest {hline}
    - local dir `"`s(token)'"'
    = local dir `"modules/extract/core/addons/"'
    - sret clear
    - capture adopath - `"`dir'"'
    = capture adopath - `"modules/extract/core/addons/"'
      {hline 75} begin adopath {hline}
      - version 6
      - gettoken op 0: 0, parse("+- ")
      - if `"`op'"'=="+" {c -(}
      = if `"-"'=="+" {c -(}
        gettoken op: 0, parse("+- ")
        if `"`op'"' == "+" {c -(}
        gettoken op 0: 0, parse("+- ")
        local op "++"
        {c )-}
        else local op "+"
        Chkrest `op' `0'
        local dir `"`s(token)'"'
        sret clear
        capture adopath - `"`dir'"'
        if "`op'" == "++" {c -(}
        global S_ADO `"`"`dir'"';$S_ADO"'
        {c )-}
        else global S_ADO `"$S_ADO;`"`dir'"'"'
        adopath
        exit
        {c )-}
      - parse `"$S_ADO"', parse(" ;")
      = parse `"`"BASE"';`"SITE"';`"."';`"PERSONAL"';`"PLUS"';`"OLDPLACE"';`"modules/extract/core/addons/"'"', parse(" ;")
      - local n 0
      - while `"`1'"' != "" {c -(}
      = while `"BASE"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"BASE"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 0 + 1
      - local e`n' `"`1'"'
      = local e1 `"BASE"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"SITE"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"SITE"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 1 + 1
      - local e`n' `"`1'"'
      = local e2 `"SITE"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"."' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"."' != ";" {c -(}
      - local n = `n' + 1
      = local n = 2 + 1
      - local e`n' `"`1'"'
      = local e3 `"."'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"PERSONAL"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"PERSONAL"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 3 + 1
      - local e`n' `"`1'"'
      = local e4 `"PERSONAL"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"PLUS"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"PLUS"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 4 + 1
      - local e`n' `"`1'"'
      = local e5 `"PLUS"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"OLDPLACE"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"OLDPLACE"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 5 + 1
      - local e`n' `"`1'"'
      = local e6 `"OLDPLACE"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"modules/extract/core/addons/"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"modules/extract/core/addons/"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 6 + 1
      - local e`n' `"`1'"'
      = local e7 `"modules/extract/core/addons/"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `""' != "" {c -(}
        if `"`1'"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
        mac shift
        {c )-}
      - if `"`op'"' == "" {c -(}
      = if `"-"' == "" {c -(}
        local i 1
        while `i' <= `n' {c -(}
        IsKey `"`e`i''"'
        if r(builtin) {c -(}
        local realdir : sysdir `"`e`i''"'
        di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
        {c )-}
        else {c -(}
        di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
        {c )-}
        local i = `i' + 1
        {c )-}
        exit
        {c )-}
      - if `"`op'"'=="-" {c -(}
      = if `"-"'=="-" {c -(}
      - Chkrest - `0'
      = Chkrest -  `"modules/extract/core/addons/"'
        {hline 65} begin adopath.Chkrest {hline}
        - gettoken op 0: 0
        - local hold `"`0'"'
        = local hold `"  `"modules/extract/core/addons/"'"'
        - gettoken mytok 0: 0
        - sret local token `"`mytok'"'
        = sret local token `"modules/extract/core/addons/"'
        - if trim(`"`s(token)'"')=="" {c -(}
        = if trim(`"modules/extract/core/addons/"')=="" {c -(}
          error 198
          {c )-}
        - if trim(`"`0'"') != "" {c -(}
        = if trim(`""') != "" {c -(}
          capture noisily error 198
          local hold = trim(`"`hold'"')
          di in red `"perhaps you meant to type  adopath `op' "`hold'""'
          exit 198
          {c )-}
        {hline 67} end adopath.Chkrest {hline}
      - local dir `"`s(token)'"'
      = local dir `"modules/extract/core/addons/"'
      - sret clear
      - capture confirm number `dir'
      = capture confirm number modules/extract/core/addons/
      - if _rc==0 {c -(}
        if `dir' > `n' | `dir'<1 {c -(}
        di in red "no `dir'th element in current adopath"
        exit 111
        {c )-}
        global S_ADO
        local i 1
        local sim
        while `i' <= `n' {c -(}
        if `i' != `dir' {c -(}
        global S_ADO `"$S_ADO`sim'`"`e`i''"'"'
        local sim ";"
        {c )-}
        local i = `i' + 1
        {c )-}
        adopath
        exit
        {c )-}
      - local i 1
      - while `i' <= `n' {c -(}
      = while 1 <= 7 {c -(}
      - if `"`e`i''"' == `"`dir'"' {c -(}
      = if `"BASE"' == `"modules/extract/core/addons/"' {c -(}
        adopath - `i'
        exit
        {c )-}
      - local i = `i' + 1
      = local i = 1 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 2 <= 7 {c -(}
      - if `"`e`i''"' == `"`dir'"' {c -(}
      = if `"SITE"' == `"modules/extract/core/addons/"' {c -(}
        adopath - `i'
        exit
        {c )-}
      - local i = `i' + 1
      = local i = 2 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 3 <= 7 {c -(}
      - if `"`e`i''"' == `"`dir'"' {c -(}
      = if `"."' == `"modules/extract/core/addons/"' {c -(}
        adopath - `i'
        exit
        {c )-}
      - local i = `i' + 1
      = local i = 3 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 4 <= 7 {c -(}
      - if `"`e`i''"' == `"`dir'"' {c -(}
      = if `"PERSONAL"' == `"modules/extract/core/addons/"' {c -(}
        adopath - `i'
        exit
        {c )-}
      - local i = `i' + 1
      = local i = 4 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 5 <= 7 {c -(}
      - if `"`e`i''"' == `"`dir'"' {c -(}
      = if `"PLUS"' == `"modules/extract/core/addons/"' {c -(}
        adopath - `i'
        exit
        {c )-}
      - local i = `i' + 1
      = local i = 5 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 6 <= 7 {c -(}
      - if `"`e`i''"' == `"`dir'"' {c -(}
      = if `"OLDPLACE"' == `"modules/extract/core/addons/"' {c -(}
        adopath - `i'
        exit
        {c )-}
      - local i = `i' + 1
      = local i = 6 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 7 <= 7 {c -(}
      - if `"`e`i''"' == `"`dir'"' {c -(}
      = if `"modules/extract/core/addons/"' == `"modules/extract/core/addons/"' {c -(}
      - adopath - `i'
      = adopath - 7
        {hline 73} begin adopath {hline}
        - version 6
        - gettoken op 0: 0, parse("+- ")
        - if `"`op'"'=="+" {c -(}
        = if `"-"'=="+" {c -(}
          gettoken op: 0, parse("+- ")
          if `"`op'"' == "+" {c -(}
          gettoken op 0: 0, parse("+- ")
          local op "++"
          {c )-}
          else local op "+"
          Chkrest `op' `0'
          local dir `"`s(token)'"'
          sret clear
          capture adopath - `"`dir'"'
          if "`op'" == "++" {c -(}
          global S_ADO `"`"`dir'"';$S_ADO"'
          {c )-}
          else global S_ADO `"$S_ADO;`"`dir'"'"'
          adopath
          exit
          {c )-}
        - parse `"$S_ADO"', parse(" ;")
        = parse `"`"BASE"';`"SITE"';`"."';`"PERSONAL"';`"PLUS"';`"OLDPLACE"';`"modules/extract/core/addons/"'"', parse(" ;")
        - local n 0
        - while `"`1'"' != "" {c -(}
        = while `"BASE"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `"BASE"' != ";" {c -(}
        - local n = `n' + 1
        = local n = 0 + 1
        - local e`n' `"`1'"'
        = local e1 `"BASE"'
        - {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `";"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `";"' != ";" {c -(}
          local n = `n' + 1
          local e`n' `"`1'"'
          {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `"SITE"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `"SITE"' != ";" {c -(}
        - local n = `n' + 1
        = local n = 1 + 1
        - local e`n' `"`1'"'
        = local e2 `"SITE"'
        - {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `";"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `";"' != ";" {c -(}
          local n = `n' + 1
          local e`n' `"`1'"'
          {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `"."' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `"."' != ";" {c -(}
        - local n = `n' + 1
        = local n = 2 + 1
        - local e`n' `"`1'"'
        = local e3 `"."'
        - {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `";"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `";"' != ";" {c -(}
          local n = `n' + 1
          local e`n' `"`1'"'
          {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `"PERSONAL"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `"PERSONAL"' != ";" {c -(}
        - local n = `n' + 1
        = local n = 3 + 1
        - local e`n' `"`1'"'
        = local e4 `"PERSONAL"'
        - {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `";"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `";"' != ";" {c -(}
          local n = `n' + 1
          local e`n' `"`1'"'
          {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `"PLUS"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `"PLUS"' != ";" {c -(}
        - local n = `n' + 1
        = local n = 4 + 1
        - local e`n' `"`1'"'
        = local e5 `"PLUS"'
        - {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `";"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `";"' != ";" {c -(}
          local n = `n' + 1
          local e`n' `"`1'"'
          {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `"OLDPLACE"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `"OLDPLACE"' != ";" {c -(}
        - local n = `n' + 1
        = local n = 5 + 1
        - local e`n' `"`1'"'
        = local e6 `"OLDPLACE"'
        - {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `";"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `";"' != ";" {c -(}
          local n = `n' + 1
          local e`n' `"`1'"'
          {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `"modules/extract/core/addons/"' != "" {c -(}
        - if `"`1'"' != ";" {c -(}
        = if `"modules/extract/core/addons/"' != ";" {c -(}
        - local n = `n' + 1
        = local n = 6 + 1
        - local e`n' `"`1'"'
        = local e7 `"modules/extract/core/addons/"'
        - {c )-}
        - mac shift
        - {c )-}
        - while `"`1'"' != "" {c -(}
        = while `""' != "" {c -(}
          if `"`1'"' != ";" {c -(}
          local n = `n' + 1
          local e`n' `"`1'"'
          {c )-}
          mac shift
          {c )-}
        - if `"`op'"' == "" {c -(}
        = if `"-"' == "" {c -(}
          local i 1
          while `i' <= `n' {c -(}
          IsKey `"`e`i''"'
          if r(builtin) {c -(}
          local realdir : sysdir `"`e`i''"'
          di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
          {c )-}
          else {c -(}
          di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
          {c )-}
          local i = `i' + 1
          {c )-}
          exit
          {c )-}
        - if `"`op'"'=="-" {c -(}
        = if `"-"'=="-" {c -(}
        - Chkrest - `0'
        = Chkrest -  7
          {hline 63} begin adopath.Chkrest {hline}
          - gettoken op 0: 0
          - local hold `"`0'"'
          = local hold `"  7"'
          - gettoken mytok 0: 0
          - sret local token `"`mytok'"'
          = sret local token `"7"'
          - if trim(`"`s(token)'"')=="" {c -(}
          = if trim(`"7"')=="" {c -(}
            error 198
            {c )-}
          - if trim(`"`0'"') != "" {c -(}
          = if trim(`""') != "" {c -(}
            capture noisily error 198
            local hold = trim(`"`hold'"')
            di in red `"perhaps you meant to type  adopath `op' "`hold'""'
            exit 198
            {c )-}
          {hline 65} end adopath.Chkrest {hline}
        - local dir `"`s(token)'"'
        = local dir `"7"'
        - sret clear
        - capture confirm number `dir'
        = capture confirm number 7
        - if _rc==0 {c -(}
        - if `dir' > `n' | `dir'<1 {c -(}
        = if 7 > 7 | 7<1 {c -(}
          di in red "no `dir'th element in current adopath"
          exit 111
          {c )-}
        - global S_ADO
        - local i 1
        - local sim
        - while `i' <= `n' {c -(}
        = while 1 <= 7 {c -(}
        - if `i' != `dir' {c -(}
        = if 1 != 7 {c -(}
        - global S_ADO `"$S_ADO`sim'`"`e`i''"'"'
        = global S_ADO `"`"BASE"'"'
        - local sim ";"
        - {c )-}
        - local i = `i' + 1
        = local i = 1 + 1
        - {c )-}
        - while `i' <= `n' {c -(}
        = while 2 <= 7 {c -(}
        - if `i' != `dir' {c -(}
        = if 2 != 7 {c -(}
        - global S_ADO `"$S_ADO`sim'`"`e`i''"'"'
        = global S_ADO `"`"BASE"';`"SITE"'"'
        - local sim ";"
        - {c )-}
        - local i = `i' + 1
        = local i = 2 + 1
        - {c )-}
        - while `i' <= `n' {c -(}
        = while 3 <= 7 {c -(}
        - if `i' != `dir' {c -(}
        = if 3 != 7 {c -(}
        - global S_ADO `"$S_ADO`sim'`"`e`i''"'"'
        = global S_ADO `"`"BASE"';`"SITE"';`"."'"'
        - local sim ";"
        - {c )-}
        - local i = `i' + 1
        = local i = 3 + 1
        - {c )-}
        - while `i' <= `n' {c -(}
        = while 4 <= 7 {c -(}
        - if `i' != `dir' {c -(}
        = if 4 != 7 {c -(}
        - global S_ADO `"$S_ADO`sim'`"`e`i''"'"'
        = global S_ADO `"`"BASE"';`"SITE"';`"."';`"PERSONAL"'"'
        - local sim ";"
        - {c )-}
        - local i = `i' + 1
        = local i = 4 + 1
        - {c )-}
        - while `i' <= `n' {c -(}
        = while 5 <= 7 {c -(}
        - if `i' != `dir' {c -(}
        = if 5 != 7 {c -(}
        - global S_ADO `"$S_ADO`sim'`"`e`i''"'"'
        = global S_ADO `"`"BASE"';`"SITE"';`"."';`"PERSONAL"';`"PLUS"'"'
        - local sim ";"
        - {c )-}
        - local i = `i' + 1
        = local i = 5 + 1
        - {c )-}
        - while `i' <= `n' {c -(}
        = while 6 <= 7 {c -(}
        - if `i' != `dir' {c -(}
        = if 6 != 7 {c -(}
        - global S_ADO `"$S_ADO`sim'`"`e`i''"'"'
        = global S_ADO `"`"BASE"';`"SITE"';`"."';`"PERSONAL"';`"PLUS"';`"OLDPLACE"'"'
        - local sim ";"
        - {c )-}
        - local i = `i' + 1
        = local i = 6 + 1
        - {c )-}
        - while `i' <= `n' {c -(}
        = while 7 <= 7 {c -(}
        - if `i' != `dir' {c -(}
        = if 7 != 7 {c -(}
          global S_ADO `"$S_ADO`sim'`"`e`i''"'"'
          local sim ";"
          {c )-}
        - local i = `i' + 1
        = local i = 7 + 1
        - {c )-}
        - while `i' <= `n' {c -(}
        = while 8 <= 7 {c -(}
          if `i' != `dir' {c -(}
          global S_ADO `"$S_ADO`sim'`"`e`i''"'"'
          local sim ";"
          {c )-}
          local i = `i' + 1
          {c )-}
        - adopath
          {hline 71} begin adopath {hline}
          - version 6
          - gettoken op 0: 0, parse("+- ")
          - if `"`op'"'=="+" {c -(}
          = if `""'=="+" {c -(}
            gettoken op: 0, parse("+- ")
            if `"`op'"' == "+" {c -(}
            gettoken op 0: 0, parse("+- ")
            local op "++"
            {c )-}
            else local op "+"
            Chkrest `op' `0'
            local dir `"`s(token)'"'
            sret clear
            capture adopath - `"`dir'"'
            if "`op'" == "++" {c -(}
            global S_ADO `"`"`dir'"';$S_ADO"'
            {c )-}
            else global S_ADO `"$S_ADO;`"`dir'"'"'
            adopath
            exit
            {c )-}
          - parse `"$S_ADO"', parse(" ;")
          = parse `"`"BASE"';`"SITE"';`"."';`"PERSONAL"';`"PLUS"';`"OLDPLACE"'"', parse(" ;")
          - local n 0
          - while `"`1'"' != "" {c -(}
          = while `"BASE"' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `"BASE"' != ";" {c -(}
          - local n = `n' + 1
          = local n = 0 + 1
          - local e`n' `"`1'"'
          = local e1 `"BASE"'
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `";"' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `";"' != ";" {c -(}
            local n = `n' + 1
            local e`n' `"`1'"'
            {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `"SITE"' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `"SITE"' != ";" {c -(}
          - local n = `n' + 1
          = local n = 1 + 1
          - local e`n' `"`1'"'
          = local e2 `"SITE"'
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `";"' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `";"' != ";" {c -(}
            local n = `n' + 1
            local e`n' `"`1'"'
            {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `"."' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `"."' != ";" {c -(}
          - local n = `n' + 1
          = local n = 2 + 1
          - local e`n' `"`1'"'
          = local e3 `"."'
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `";"' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `";"' != ";" {c -(}
            local n = `n' + 1
            local e`n' `"`1'"'
            {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `"PERSONAL"' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `"PERSONAL"' != ";" {c -(}
          - local n = `n' + 1
          = local n = 3 + 1
          - local e`n' `"`1'"'
          = local e4 `"PERSONAL"'
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `";"' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `";"' != ";" {c -(}
            local n = `n' + 1
            local e`n' `"`1'"'
            {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `"PLUS"' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `"PLUS"' != ";" {c -(}
          - local n = `n' + 1
          = local n = 4 + 1
          - local e`n' `"`1'"'
          = local e5 `"PLUS"'
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `";"' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `";"' != ";" {c -(}
            local n = `n' + 1
            local e`n' `"`1'"'
            {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `"OLDPLACE"' != "" {c -(}
          - if `"`1'"' != ";" {c -(}
          = if `"OLDPLACE"' != ";" {c -(}
          - local n = `n' + 1
          = local n = 5 + 1
          - local e`n' `"`1'"'
          = local e6 `"OLDPLACE"'
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"' != "" {c -(}
          = while `""' != "" {c -(}
            if `"`1'"' != ";" {c -(}
            local n = `n' + 1
            local e`n' `"`1'"'
            {c )-}
            mac shift
            {c )-}
          - if `"`op'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local i 1
          - while `i' <= `n' {c -(}
          = while 1 <= 6 {c -(}
          - IsKey `"`e`i''"'
          = IsKey `"BASE"'
            {hline 63} begin adopath.IsKey {hline}
            - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
            = if `"BASE"'==substr(`"BASE"',1,8) {c -(}
            - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
            = if `"BASE"'=="UPDATES" | `"BASE"'=="BASE" | `"BASE"'=="SITE" | `"BASE"'=="STBPLUS" | `"BASE"'=="PLUS" | `"BASE"'=="PERSONAL" | `"BASE"'=="OLDPLACE" | `"BASE"'=="FUTURE" {c -(}
            - return scalar builtin = 1
            - exit
            {hline 65} end adopath.IsKey {hline}
          - if r(builtin) {c -(}
          - local realdir : sysdir `"`e`i''"'
          = local realdir : sysdir `"BASE"'
          - di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
          = di in gr `"  [1]"' _col(8) `"(BASE)"' _col(20) `"""' in ye `"/opt/stata13/ado/base/"' in gr `"""'
          - {c )-}
          - else {c -(}
            di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
            {c )-}
          - local i = `i' + 1
          = local i = 1 + 1
          - {c )-}
          - while `i' <= `n' {c -(}
          = while 2 <= 6 {c -(}
          - IsKey `"`e`i''"'
          = IsKey `"SITE"'
            {hline 63} begin adopath.IsKey {hline}
            - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
            = if `"SITE"'==substr(`"SITE"',1,8) {c -(}
            - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
            = if `"SITE"'=="UPDATES" | `"SITE"'=="BASE" | `"SITE"'=="SITE" | `"SITE"'=="STBPLUS" | `"SITE"'=="PLUS" | `"SITE"'=="PERSONAL" | `"SITE"'=="OLDPLACE" | `"SITE"'=="FUTURE" {c -(}
            - return scalar builtin = 1
            - exit
            {hline 65} end adopath.IsKey {hline}
          - if r(builtin) {c -(}
          - local realdir : sysdir `"`e`i''"'
          = local realdir : sysdir `"SITE"'
          - di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
          = di in gr `"  [2]"' _col(8) `"(SITE)"' _col(20) `"""' in ye `"/opt/ado/"' in gr `"""'
          - {c )-}
          - else {c -(}
            di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
            {c )-}
          - local i = `i' + 1
          = local i = 2 + 1
          - {c )-}
          - while `i' <= `n' {c -(}
          = while 3 <= 6 {c -(}
          - IsKey `"`e`i''"'
          = IsKey `"."'
            {hline 63} begin adopath.IsKey {hline}
            - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
            = if `"."'==substr(`"."',1,8) {c -(}
            - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
            = if `"."'=="UPDATES" | `"."'=="BASE" | `"."'=="SITE" | `"."'=="STBPLUS" | `"."'=="PLUS" | `"."'=="PERSONAL" | `"."'=="OLDPLACE" | `"."'=="FUTURE" {c -(}
              return scalar builtin = 1
              exit
              {c )-}
            - {c )-}
            - return scalar builtin = 0
            {hline 65} end adopath.IsKey {hline}
          - if r(builtin) {c -(}
            local realdir : sysdir `"`e`i''"'
            di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
            {c )-}
          - else {c -(}
          - di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
          = di in gr `"  [3]"' _col(20) `"""' in ye `"."' in gr `"""'
          - {c )-}
          - local i = `i' + 1
          = local i = 3 + 1
          - {c )-}
          - while `i' <= `n' {c -(}
          = while 4 <= 6 {c -(}
          - IsKey `"`e`i''"'
          = IsKey `"PERSONAL"'
            {hline 63} begin adopath.IsKey {hline}
            - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
            = if `"PERSONAL"'==substr(`"PERSONAL"',1,8) {c -(}
            - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
            = if `"PERSONAL"'=="UPDATES" | `"PERSONAL"'=="BASE" | `"PERSONAL"'=="SITE" | `"PERSONAL"'=="STBPLUS" | `"PERSONAL"'=="PLUS" | `"PERSONAL"'=="PERSONAL" | `"PERSONAL"'=="OLDPLACE" | `"PERSONAL"'=="FUTURE" {c -(}
            - return scalar builtin = 1
            - exit
            {hline 65} end adopath.IsKey {hline}
          - if r(builtin) {c -(}
          - local realdir : sysdir `"`e`i''"'
          = local realdir : sysdir `"PERSONAL"'
          - di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
          = di in gr `"  [4]"' _col(8) `"(PERSONAL)"' _col(20) `"""' in ye `"~/ado/personal/"' in gr `"""'
          - {c )-}
          - else {c -(}
            di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
            {c )-}
          - local i = `i' + 1
          = local i = 4 + 1
          - {c )-}
          - while `i' <= `n' {c -(}
          = while 5 <= 6 {c -(}
          - IsKey `"`e`i''"'
          = IsKey `"PLUS"'
            {hline 63} begin adopath.IsKey {hline}
            - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
            = if `"PLUS"'==substr(`"PLUS"',1,8) {c -(}
            - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
            = if `"PLUS"'=="UPDATES" | `"PLUS"'=="BASE" | `"PLUS"'=="SITE" | `"PLUS"'=="STBPLUS" | `"PLUS"'=="PLUS" | `"PLUS"'=="PERSONAL" | `"PLUS"'=="OLDPLACE" | `"PLUS"'=="FUTURE" {c -(}
            - return scalar builtin = 1
            - exit
            {hline 65} end adopath.IsKey {hline}
          - if r(builtin) {c -(}
          - local realdir : sysdir `"`e`i''"'
          = local realdir : sysdir `"PLUS"'
          - di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
          = di in gr `"  [5]"' _col(8) `"(PLUS)"' _col(20) `"""' in ye `"~/ado/plus/"' in gr `"""'
          - {c )-}
          - else {c -(}
            di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
            {c )-}
          - local i = `i' + 1
          = local i = 5 + 1
          - {c )-}
          - while `i' <= `n' {c -(}
          = while 6 <= 6 {c -(}
          - IsKey `"`e`i''"'
          = IsKey `"OLDPLACE"'
            {hline 63} begin adopath.IsKey {hline}
            - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
            = if `"OLDPLACE"'==substr(`"OLDPLACE"',1,8) {c -(}
            - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
            = if `"OLDPLACE"'=="UPDATES" | `"OLDPLACE"'=="BASE" | `"OLDPLACE"'=="SITE" | `"OLDPLACE"'=="STBPLUS" | `"OLDPLACE"'=="PLUS" | `"OLDPLACE"'=="PERSONAL" | `"OLDPLACE"'=="OLDPLACE" | `"OLDPLACE"'=="FUTURE" {c -(}
            - return scalar builtin = 1
            - exit
            {hline 65} end adopath.IsKey {hline}
          - if r(builtin) {c -(}
          - local realdir : sysdir `"`e`i''"'
          = local realdir : sysdir `"OLDPLACE"'
          - di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
          = di in gr `"  [6]"' _col(8) `"(OLDPLACE)"' _col(20) `"""' in ye `"~/ado/"' in gr `"""'
          - {c )-}
          - else {c -(}
            di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
            {c )-}
          - local i = `i' + 1
          = local i = 6 + 1
          - {c )-}
          - while `i' <= `n' {c -(}
          = while 7 <= 6 {c -(}
            IsKey `"`e`i''"'
            if r(builtin) {c -(}
            local realdir : sysdir `"`e`i''"'
            di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
            {c )-}
            else {c -(}
            di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
            {c )-}
            local i = `i' + 1
            {c )-}
          - exit
          {hline 73} end adopath {hline}
        - exit
        {hline 75} end adopath {hline}
      - exit
      {hline 77} end adopath {hline}
    - if "`op'" == "++" {c -(}
    = if "+" == "++" {c -(}
      global S_ADO `"`"`dir'"';$S_ADO"'
      {c )-}
    - else global S_ADO `"$S_ADO;`"`dir'"'"'
    = else global S_ADO `"`"BASE"';`"SITE"';`"."';`"PERSONAL"';`"PLUS"';`"OLDPLACE"';`"modules/extract/core/addons/"'"'
    - adopath
      {hline 75} begin adopath {hline}
      - version 6
      - gettoken op 0: 0, parse("+- ")
      - if `"`op'"'=="+" {c -(}
      = if `""'=="+" {c -(}
        gettoken op: 0, parse("+- ")
        if `"`op'"' == "+" {c -(}
        gettoken op 0: 0, parse("+- ")
        local op "++"
        {c )-}
        else local op "+"
        Chkrest `op' `0'
        local dir `"`s(token)'"'
        sret clear
        capture adopath - `"`dir'"'
        if "`op'" == "++" {c -(}
        global S_ADO `"`"`dir'"';$S_ADO"'
        {c )-}
        else global S_ADO `"$S_ADO;`"`dir'"'"'
        adopath
        exit
        {c )-}
      - parse `"$S_ADO"', parse(" ;")
      = parse `"`"BASE"';`"SITE"';`"."';`"PERSONAL"';`"PLUS"';`"OLDPLACE"';`"modules/extract/core/addons/"'"', parse(" ;")
      - local n 0
      - while `"`1'"' != "" {c -(}
      = while `"BASE"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"BASE"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 0 + 1
      - local e`n' `"`1'"'
      = local e1 `"BASE"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"SITE"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"SITE"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 1 + 1
      - local e`n' `"`1'"'
      = local e2 `"SITE"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"."' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"."' != ";" {c -(}
      - local n = `n' + 1
      = local n = 2 + 1
      - local e`n' `"`1'"'
      = local e3 `"."'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"PERSONAL"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"PERSONAL"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 3 + 1
      - local e`n' `"`1'"'
      = local e4 `"PERSONAL"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"PLUS"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"PLUS"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 4 + 1
      - local e`n' `"`1'"'
      = local e5 `"PLUS"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"OLDPLACE"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"OLDPLACE"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 5 + 1
      - local e`n' `"`1'"'
      = local e6 `"OLDPLACE"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `";"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `";"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `"modules/extract/core/addons/"' != "" {c -(}
      - if `"`1'"' != ";" {c -(}
      = if `"modules/extract/core/addons/"' != ";" {c -(}
      - local n = `n' + 1
      = local n = 6 + 1
      - local e`n' `"`1'"'
      = local e7 `"modules/extract/core/addons/"'
      - {c )-}
      - mac shift
      - {c )-}
      - while `"`1'"' != "" {c -(}
      = while `""' != "" {c -(}
        if `"`1'"' != ";" {c -(}
        local n = `n' + 1
        local e`n' `"`1'"'
        {c )-}
        mac shift
        {c )-}
      - if `"`op'"' == "" {c -(}
      = if `""' == "" {c -(}
      - local i 1
      - while `i' <= `n' {c -(}
      = while 1 <= 7 {c -(}
      - IsKey `"`e`i''"'
      = IsKey `"BASE"'
        {hline 67} begin adopath.IsKey {hline}
        - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
        = if `"BASE"'==substr(`"BASE"',1,8) {c -(}
        - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
        = if `"BASE"'=="UPDATES" | `"BASE"'=="BASE" | `"BASE"'=="SITE" | `"BASE"'=="STBPLUS" | `"BASE"'=="PLUS" | `"BASE"'=="PERSONAL" | `"BASE"'=="OLDPLACE" | `"BASE"'=="FUTURE" {c -(}
        - return scalar builtin = 1
        - exit
        {hline 69} end adopath.IsKey {hline}
      - if r(builtin) {c -(}
      - local realdir : sysdir `"`e`i''"'
      = local realdir : sysdir `"BASE"'
      - di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
      = di in gr `"  [1]"' _col(8) `"(BASE)"' _col(20) `"""' in ye `"/opt/stata13/ado/base/"' in gr `"""'
      - {c )-}
      - else {c -(}
        di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
        {c )-}
      - local i = `i' + 1
      = local i = 1 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 2 <= 7 {c -(}
      - IsKey `"`e`i''"'
      = IsKey `"SITE"'
        {hline 67} begin adopath.IsKey {hline}
        - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
        = if `"SITE"'==substr(`"SITE"',1,8) {c -(}
        - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
        = if `"SITE"'=="UPDATES" | `"SITE"'=="BASE" | `"SITE"'=="SITE" | `"SITE"'=="STBPLUS" | `"SITE"'=="PLUS" | `"SITE"'=="PERSONAL" | `"SITE"'=="OLDPLACE" | `"SITE"'=="FUTURE" {c -(}
        - return scalar builtin = 1
        - exit
        {hline 69} end adopath.IsKey {hline}
      - if r(builtin) {c -(}
      - local realdir : sysdir `"`e`i''"'
      = local realdir : sysdir `"SITE"'
      - di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
      = di in gr `"  [2]"' _col(8) `"(SITE)"' _col(20) `"""' in ye `"/opt/ado/"' in gr `"""'
      - {c )-}
      - else {c -(}
        di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
        {c )-}
      - local i = `i' + 1
      = local i = 2 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 3 <= 7 {c -(}
      - IsKey `"`e`i''"'
      = IsKey `"."'
        {hline 67} begin adopath.IsKey {hline}
        - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
        = if `"."'==substr(`"."',1,8) {c -(}
        - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
        = if `"."'=="UPDATES" | `"."'=="BASE" | `"."'=="SITE" | `"."'=="STBPLUS" | `"."'=="PLUS" | `"."'=="PERSONAL" | `"."'=="OLDPLACE" | `"."'=="FUTURE" {c -(}
          return scalar builtin = 1
          exit
          {c )-}
        - {c )-}
        - return scalar builtin = 0
        {hline 69} end adopath.IsKey {hline}
      - if r(builtin) {c -(}
        local realdir : sysdir `"`e`i''"'
        di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
        {c )-}
      - else {c -(}
      - di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
      = di in gr `"  [3]"' _col(20) `"""' in ye `"."' in gr `"""'
      - {c )-}
      - local i = `i' + 1
      = local i = 3 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 4 <= 7 {c -(}
      - IsKey `"`e`i''"'
      = IsKey `"PERSONAL"'
        {hline 67} begin adopath.IsKey {hline}
        - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
        = if `"PERSONAL"'==substr(`"PERSONAL"',1,8) {c -(}
        - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
        = if `"PERSONAL"'=="UPDATES" | `"PERSONAL"'=="BASE" | `"PERSONAL"'=="SITE" | `"PERSONAL"'=="STBPLUS" | `"PERSONAL"'=="PLUS" | `"PERSONAL"'=="PERSONAL" | `"PERSONAL"'=="OLDPLACE" | `"PERSONAL"'=="FUTURE" {c -(}
        - return scalar builtin = 1
        - exit
        {hline 69} end adopath.IsKey {hline}
      - if r(builtin) {c -(}
      - local realdir : sysdir `"`e`i''"'
      = local realdir : sysdir `"PERSONAL"'
      - di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
      = di in gr `"  [4]"' _col(8) `"(PERSONAL)"' _col(20) `"""' in ye `"~/ado/personal/"' in gr `"""'
      - {c )-}
      - else {c -(}
        di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
        {c )-}
      - local i = `i' + 1
      = local i = 4 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 5 <= 7 {c -(}
      - IsKey `"`e`i''"'
      = IsKey `"PLUS"'
        {hline 67} begin adopath.IsKey {hline}
        - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
        = if `"PLUS"'==substr(`"PLUS"',1,8) {c -(}
        - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
        = if `"PLUS"'=="UPDATES" | `"PLUS"'=="BASE" | `"PLUS"'=="SITE" | `"PLUS"'=="STBPLUS" | `"PLUS"'=="PLUS" | `"PLUS"'=="PERSONAL" | `"PLUS"'=="OLDPLACE" | `"PLUS"'=="FUTURE" {c -(}
        - return scalar builtin = 1
        - exit
        {hline 69} end adopath.IsKey {hline}
      - if r(builtin) {c -(}
      - local realdir : sysdir `"`e`i''"'
      = local realdir : sysdir `"PLUS"'
      - di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
      = di in gr `"  [5]"' _col(8) `"(PLUS)"' _col(20) `"""' in ye `"~/ado/plus/"' in gr `"""'
      - {c )-}
      - else {c -(}
        di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
        {c )-}
      - local i = `i' + 1
      = local i = 5 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 6 <= 7 {c -(}
      - IsKey `"`e`i''"'
      = IsKey `"OLDPLACE"'
        {hline 67} begin adopath.IsKey {hline}
        - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
        = if `"OLDPLACE"'==substr(`"OLDPLACE"',1,8) {c -(}
        - if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
        = if `"OLDPLACE"'=="UPDATES" | `"OLDPLACE"'=="BASE" | `"OLDPLACE"'=="SITE" | `"OLDPLACE"'=="STBPLUS" | `"OLDPLACE"'=="PLUS" | `"OLDPLACE"'=="PERSONAL" | `"OLDPLACE"'=="OLDPLACE" | `"OLDPLACE"'=="FUTURE" {c -(}
        - return scalar builtin = 1
        - exit
        {hline 69} end adopath.IsKey {hline}
      - if r(builtin) {c -(}
      - local realdir : sysdir `"`e`i''"'
      = local realdir : sysdir `"OLDPLACE"'
      - di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
      = di in gr `"  [6]"' _col(8) `"(OLDPLACE)"' _col(20) `"""' in ye `"~/ado/"' in gr `"""'
      - {c )-}
      - else {c -(}
        di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
        {c )-}
      - local i = `i' + 1
      = local i = 6 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 7 <= 7 {c -(}
      - IsKey `"`e`i''"'
      = IsKey `"modules/extract/core/addons/"'
        {hline 67} begin adopath.IsKey {hline}
        - if `"`1'"'==substr(`"`1'"',1,8) {c -(}
        = if `"modules/extract/core/addons/"'==substr(`"modules/extract/core/addons/"',1,8) {c -(}
          if `"`1'"'=="UPDATES" | `"`1'"'=="BASE" | `"`1'"'=="SITE" | `"`1'"'=="STBPLUS" | `"`1'"'=="PLUS" | `"`1'"'=="PERSONAL" | `"`1'"'=="OLDPLACE" | `"`1'"'=="FUTURE" {c -(}
          return scalar builtin = 1
          exit
          {c )-}
          {c )-}
        - return scalar builtin = 0
        {hline 69} end adopath.IsKey {hline}
      - if r(builtin) {c -(}
        local realdir : sysdir `"`e`i''"'
        di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
        {c )-}
      - else {c -(}
      - di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
      = di in gr `"  [7]"' _col(20) `"""' in ye `"modules/extract/core/addons/"' in gr `"""'
      - {c )-}
      - local i = `i' + 1
      = local i = 7 + 1
      - {c )-}
      - while `i' <= `n' {c -(}
      = while 8 <= 7 {c -(}
        IsKey `"`e`i''"'
        if r(builtin) {c -(}
        local realdir : sysdir `"`e`i''"'
        di in gr `"  [`i']"' _col(8) `"(`e`i'')"' _col(20) `"""' in ye `"`realdir'"' in gr `"""'
        {c )-}
        else {c -(}
        di in gr `"  [`i']"' _col(20) `"""' in ye `"`e`i''"' in gr `"""'
        {c )-}
        local i = `i' + 1
        {c )-}
      - exit
      {hline 77} end adopath {hline}
    - exit
    {hline 79} end adopath {hline}
    {hline 74} begin ubcov_path {hline}
    - syntax
    - local pwd = subinstr(c(pwd), "\", "/", .)
    - preserve
    - clear
      {hline 77} begin clear {hline}
      - if _caller() < 10 {c -(}
        _clear_9 `0'
        exit
        {c )-}
      - version 10
      - syntax [anything]
      - tokenize `anything'
      = tokenize 
      - if `"`2'"' != "" {c -(}
      = if `""' != "" {c -(}
        display as err "`2' not allowed"
        exit 198
        {c )-}
      - if "`1'"=="" {c -(}
      = if ""=="" {c -(}
      - drop _all
      - label drop _all
        {hline 75} begin label {hline}
        - version 10.0
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {c -(}
        = if (strpos("drop", "val") > 0 ) {c -(}
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {c -(}
          local fix ", nofix"
          {c )-}
          gettoken var rest : anything
          while `"`rest'"' != "" {c -(}
          gettoken lab rest : rest
          local label "`lab'"
          {c )-}
          local vlist : list anything - lab
          if "`lab'" == "." {c -(}
          local lab ""
          {c )-}
          foreach var of varlist `vlist' {c -(}
          _label `val' `var' `lab' `fix'
          {c )-}
          {c )-}
        - else {c -(}
        - _label `macval(0)'
        = _label drop _all
        - {c )-}
        {hline 77} end label {hline}
      - {c )-}
      - else if "`1'"=="mata" {c -(}
      = else if ""=="mata" {c -(}
        mata: mata clear
        {c )-}
      - else if inlist("`1'", "results", "matrix") {c -(}
      = else if inlist("", "results", "matrix") {c -(}
        return clear
        clearreturn
        ereturn clear
        sreturn clear
        _return drop _all
        if ("`1'" == "matrix") {c -(}
        matrix drop _all
        _est drop _all
        {c )-}
        {c )-}
      - else if "`1'"=="programs" {c -(}
      = else if ""=="programs" {c -(}
        program drop _all
        {c )-}
      - else if "`1'"=="ado" {c -(}
      = else if ""=="ado" {c -(}
        program drop _allado
        {c )-}
      - else if "`1'"=="*" | "`1'"=="all" {c -(}
      = else if ""=="*" | ""=="all" {c -(}
        capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
        capture
        if (0`semmods') {c -(}
        display as err "-clear all- not allowed while an SEM Builder is open"
        exit 1
        {c )-}
        drop _all
        label drop _all
        matrix drop _all
        scalar drop _all
        constraint drop _all
        eq drop _all
        file close _all
        postutil clear
        _return drop _all
        discard
        program drop _all
        timer clear
        mata: mata clear
        {c )-}
      - else {c -(}
        display as err "`1' not allowed"
        exit 198
        {c )-}
      {hline 79} end clear {hline}
    - set obs 1
    - gen root = "`pwd'"
    = gen root = "/snfs1/WORK/01_covariates/common/ubcov_central"
    - split root, p("ubcov_central")
      {hline 77} begin split {hline}
      - version 7, missing
      - syntax varname(str) [if] [in] [, Generate(str) noTrim Parse(str asis) DESTRING force float Ignore(string) percent Limit(numlist int >0 max=1) ]
      - marksample touse, strok
      - qui count if `touse'
      = qui count if __000000
      - if r(N) == 0 {c -(}
        error 2000
        {c )-}
      - if `"`parse'"' == `""' | `"`parse'"' == `""""' {c -(}
      = if `""ubcov_central""' == `""' | `""ubcov_central""' == `""""' {c -(}
        if "`trim'" != "" {c -(}
        di as err "parsing on spaces incompatible with notrim"
        exit 198
        {c )-}
        local parse `"" ""'
        local trm "trim"
        {c )-}
      - if `"`parse'"' == `""' | `"`parse'"' == `""""' {c -(}
      = if `""ubcov_central""' == `""' | `""ubcov_central""' == `""""' {c -(}
        local parse `"" ""'
        local trm "trim"
        {c )-}
      - local nparse : word count `parse'
      = local nparse : word count "ubcov_central"
      - tokenize `"`parse'"'
      = tokenize `""ubcov_central""'
      - if `"`generate'"' != "" {c -(}
      = if `""' != "" {c -(}
        confirm name `generate'
        if `: word count `generate'' > 1 {c -(}
        di as err "invalid stub `generate'"
        exit 198
        {c )-}
        {c )-}
      - qui {c -(}
      - tempvar vw tp mp pl
      - gen int `tp' = 0
      = gen int __000002 = 0
      - gen int `mp' = 0
      = gen int __000003 = 0
      - gen int `pl' = 0
      = gen int __000004 = 0
      - gen str1 `vw' = ""
      = gen str1 __000001 = ""
      - if "`trim'" == "" {c -(}
      = if "" == "" {c -(}
      - replace `vw' = trim(`varlist') if `touse'
      = replace __000001 = trim(root) if __000000
      - {c )-}
      - else {c -(}
        replace `vw' = `varlist' if `touse'
        {c )-}
      - {c )-}
      - if "`generate'" == "" {c -(}
      = if "" == "" {c -(}
      - local generate "`varlist'"
      = local generate "root"
      - {c )-}
      - local j = 0
      - local go = 1
      - if "`limit'" == "" {c -(}
      = if "" == "" {c -(}
      - local limit .
      - {c )-}
      - qui while `go' & `j' < `limit' {c -(}
      = qui while 1 & 0 < . {c -(}
      - replace `mp' = .
      = replace __000003 = .
      - replace `pl' = 0
      = replace __000004 = 0
      - forval i = 1 / `nparse' {c -(}
      = forval i = 1 / 1 {c -(}
      - forval i = 1 / `nparse' {c -(}
      - replace `tp' = index(`vw', `"``i''"')
      = replace __000002 = index(__000001, `"ubcov_central"')
      - replace `mp' = min(`tp', `mp') if `tp'
      = replace __000003 = min(__000002, __000003) if __000002
      - replace `pl' = length(`"``i''"') if `mp' == `tp'
      = replace __000004 = length(`"ubcov_central"') if __000003 == __000002
      - {c )-}
      - local ++j
      - tempvar part`j'
      = tempvar part1
      - gen str1 `part`j'' = ""
      = gen str1 __000005 = ""
      - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
      = replace __000005 = substr(__000001, 1, __000003-1) if __000003 < .
      - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
      = replace __000001 = (substr(__000001, __000003+__000004, .)) if __000003 < .
      - replace `part`j'' = `vw' if `mp' >= .
      = replace __000005 = __000001 if __000003 >= .
      - replace `vw' = "" if `mp' >= .
      = replace __000001 = "" if __000003 >= .
      - local newvars "`newvars'`generate'`j' "
      = local newvars "root1 "
      - capture assert `vw' == ""
      = capture assert __000001 == ""
      - local go = _rc
      - {c )-}
      - qui while `go' & `j' < `limit' {c -(}
      = qui while 0 & 1 < . {c -(}
        replace `mp' = .
        replace `pl' = 0
        forval i = 1 / `nparse' {c -(}
        replace `tp' = index(`vw', `"``i''"')
        replace `mp' = min(`tp', `mp') if `tp'
        replace `pl' = length(`"``i''"') if `mp' == `tp'
        {c )-}
        local ++j
        tempvar part`j'
        gen str1 `part`j'' = ""
        replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
        replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
        replace `part`j'' = `vw' if `mp' >= .
        replace `vw' = "" if `mp' >= .
        local newvars "`newvars'`generate'`j' "
        capture assert `vw' == ""
        local go = _rc
        {c )-}
      - capture confirm new var `newvars'
      = capture confirm new var root1 
      - if _rc {c -(}
        di as err "invalid stub `generate'"
        exit _rc
        {c )-}
      - qui forval i = 1 / `j' {c -(}
      = qui forval i = 1 / 1 {c -(}
      - qui forval i = 1 / `j' {c -(}
      - gen str1 `generate'`i' = ""
      = gen str1 root1 = ""
      - replace `generate'`i' = `part`i''
      = replace root1 = __000005
      - {c )-}
      - return local varlist "`newvars'"
      = return local varlist "root1 "
      - return local nvars "`j'"
      = return local nvars "1"
      - local s = cond(`j' > 1, "s", "")
      = local s = cond(1 > 1, "s", "")
      - if "`destring'" != "" {c -(}
      = if "" != "" {c -(}
        di as res "variable`s' born as string: "
        {c )-}
      - else di as res "variable`s' created as string: "
      = else di as res "variable created as string: "
      - ds `newvars'
      = ds root1 
        {hline 78} begin ds {hline}
        - version 9
        - local version : di "version " string(_caller()) ":"
        - if (_caller() <= 4) {c -(}
          `version' describe, simple
          exit
          {c )-}
        - else {c -(}
        - ds_util `0'
        = ds_util root1 
          {hline 71} begin ds_util {hline}
          - version 8
          - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detail Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
          - if "`varlist'" == "" {c -(}
          = if "root1" == "" {c -(}
            exit
            {c )-}
          - if !inrange(`indent',0,244) {c -(}
          = if !inrange(0,0,244) {c -(}
            di as err "indent() should be in the range 0..244"
            exit 198
            {c )-}
          - if !inrange(`varwidth',5,32) {c -(}
          = if !inrange(12,5,32) {c -(}
            di as err "varwidth() should be in the range 5..32"
            exit 198
            {c )-}
          - if !inrange(`skip',1,10) {c -(}
          = if !inrange(2,1,10) {c -(}
            di as err "skip() should be in the range 1..10"
            exit 198
            {c )-}
          - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
          = local nopts = (`""' != "") + (`""' != "") + ("" != "")
          - if `nopts' == 3 {c -(}
          = if 0 == 3 {c -(}
            di as err "may not combine options has(), not(), and not"
            exit 198
            {c )-}
          - else if `nopts' == 2 {c -(}
          = else if 0 == 2 {c -(}
            if (`"`has'"' == "") {c -(}
            di as err "may not combine options not() and not"
            exit 198
            {c )-}
            else if (`"`not'"' == "") {c -(}
            di as err "may not combine options has() and not"
            exit 198
            {c )-}
            else if (`"`not2'"' == "") {c -(}
            di as err "may not combine options has() and not()"
            exit 198
            {c )-}
            {c )-}
          - if `"`not'"' != "" {c -(}
          = if `""' != "" {c -(}
            local has `"`not'"'
            local opt "not"
            {c )-}
          - else if `"`has'"' != "" {c -(}
          = else if `""' != "" {c -(}
            local opt "has"
            {c )-}
          - local inse = "`insensitive'" != ""
          = local inse = "" != ""
          - if `"`has'"' != "" {c -(}
          = if `""' != "" {c -(}
            CheckHas `"`has'"' "`opt'" "`inse'"
            if "`what'" == "varl" | "`what'" == "vall" {c -(}
            VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
            {c )-}
            else if "`what'" == "f" {c -(}
            Format `"`which'"' "`varlist'" "`inse'"
            {c )-}
            else if "`what'" == "c" {c -(}
            Char `"`which'"' "`varlist'" "`inse'"
            {c )-}
            else if "`what'" == "t" {c -(}
            Type `"`which'"' "`varlist'"
            {c )-}
            if `"`not'"' != "" {c -(}
            local varlist : list varlist - vlist
            {c )-}
            else if `"`has'"' != "" {c -(}
            local varlist "`vlist'"
            {c )-}
            {c )-}
          - if `"`not2'"' != "" {c -(}
          = if `""' != "" {c -(}
            unab all : *
            local varlist : list all - varlist
            {c )-}
          - if "`varlist'" == "" {c -(}
          = if "root1" == "" {c -(}
            exit
            {c )-}
          - if "`alpha'" != "" {c -(}
          = if "" != "" {c -(}
            local varlist : list sort varlist
            {c )-}
          - if "`detail'" != "" {c -(}
          = if "" != "" {c -(}
            describe `varlist'
            {c )-}
          - else {c -(}
          - local nvar : word count `varlist'
          = local nvar : word count root1
          - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
          = local ncol = int((99 + 2) / (12 + 2))
          - local i 0
          - local vlist
          - foreach v of local varlist {c -(}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" root1"'
          - {c )-}
          - DisplayInCols txt `indent' `skip' 0 `vlist'
          = DisplayInCols txt 0 2 0  root1
            {hline 55} begin ds_util.DisplayInCols {hline}
            - gettoken sty 0 : 0
            - gettoken indent 0 : 0
            - gettoken pad 0 : 0
            - gettoken wid 0 : 0
            - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
            = local indent = cond(0==. | 0<0, 0, 0)
            - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
            = local pad = cond(2==. | 2<1, 2, 2)
            - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
            = local wid = cond(0==. | 0<0, 0, 0)
            - local n : list sizeof 0
            - if `n'==0 {c -(}
            = if 1==0 {c -(}
              exit
              {c )-}
            - foreach x of local 0 {c -(}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(0, length(`"root1"'))
            - {c )-}
            - local wid = `wid' + `pad'
            = local wid = 5 + 2
            - local cols = int((`c(linesize)'+1-`indent')/`wid')
            = local cols = int((99+1-0)/7)
            - if `cols' < 2 {c -(}
            = if 14 < 2 {c -(}
              if `indent' {c -(}
              local col "_column(`=`indent'+1')"
              {c )-}
              foreach x of local 0 {c -(}
              di as `sty' `col' `"`x'"'
              {c )-}
              exit
              {c )-}
            - local lines = `n'/`cols'
            = local lines = 1/14
            - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
            = local lines = int(cond(.0714285714285714>int(.0714285714285714), .0714285714285714+1, .0714285714285714))
            - forvalues i=1(1)`lines' {c -(}
            = forvalues i=1(1)1 {c -(}
            - local top = min((`cols')*`lines'+`i', `n')
            = local top = min((14)*1+1, 1)
            - local col = `indent' + 1
            = local col = 0 + 1
            - forvalues j=`i'(`lines')`top' {c -(}
            = forvalues j=1(1)1 {c -(}
            - local x : word `j' of `0'
            = local x : word 1 of   root1
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(1) "root1" _c
            - local col = `col' + `wid'
            = local col = 1 + 7
            - {c )-}
            - di as `sty'
            = di as txt
            - {c )-}
            {hline 57} end ds_util.DisplayInCols {hline}
          - {c )-}
          - return local varlist `varlist'
          = return local varlist root1
          {hline 73} end ds_util {hline}
        - exit
        {hline 80} end ds {hline}
      - if "`destring'" != "" {c -(}
      = if "" != "" {c -(}
        if `"`ignore'"' != "" {c -(}
        local ignore `"ignore(`ignore')"'
        {c )-}
        destring `newvars', replace `force' `float' `ignore' `percent'
        {c )-}
      {hline 79} end split {hline}
    - local root = root1[1] + "/ubcov_central"
    - restore
    - insheet using "`root'/paths.csv", clear names
    = insheet using "/snfs1/WORK/01_covariates/common//ubcov_central/paths.csv", clear names
    - qui: ds
      {hline 80} begin ds {hline}
      - version 9
      - local version : di "version " string(_caller()) ":"
      - if (_caller() <= 4) {c -(}
        `version' describe, simple
        exit
        {c )-}
      - else {c -(}
      - ds_util `0'
      = ds_util 
        {hline 73} begin ds_util {hline}
        - version 8
        - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detail Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
        - if "`varlist'" == "" {c -(}
        = if "object class path1 path2 path3 path4 path5" == "" {c -(}
          exit
          {c )-}
        - if !inrange(`indent',0,244) {c -(}
        = if !inrange(0,0,244) {c -(}
          di as err "indent() should be in the range 0..244"
          exit 198
          {c )-}
        - if !inrange(`varwidth',5,32) {c -(}
        = if !inrange(12,5,32) {c -(}
          di as err "varwidth() should be in the range 5..32"
          exit 198
          {c )-}
        - if !inrange(`skip',1,10) {c -(}
        = if !inrange(2,1,10) {c -(}
          di as err "skip() should be in the range 1..10"
          exit 198
          {c )-}
        - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
        = local nopts = (`""' != "") + (`""' != "") + ("" != "")
        - if `nopts' == 3 {c -(}
        = if 0 == 3 {c -(}
          di as err "may not combine options has(), not(), and not"
          exit 198
          {c )-}
        - else if `nopts' == 2 {c -(}
        = else if 0 == 2 {c -(}
          if (`"`has'"' == "") {c -(}
          di as err "may not combine options not() and not"
          exit 198
          {c )-}
          else if (`"`not'"' == "") {c -(}
          di as err "may not combine options has() and not"
          exit 198
          {c )-}
          else if (`"`not2'"' == "") {c -(}
          di as err "may not combine options has() and not()"
          exit 198
          {c )-}
          {c )-}
        - if `"`not'"' != "" {c -(}
        = if `""' != "" {c -(}
          local has `"`not'"'
          local opt "not"
          {c )-}
        - else if `"`has'"' != "" {c -(}
        = else if `""' != "" {c -(}
          local opt "has"
          {c )-}
        - local inse = "`insensitive'" != ""
        = local inse = "" != ""
        - if `"`has'"' != "" {c -(}
        = if `""' != "" {c -(}
          CheckHas `"`has'"' "`opt'" "`inse'"
          if "`what'" == "varl" | "`what'" == "vall" {c -(}
          VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
          {c )-}
          else if "`what'" == "f" {c -(}
          Format `"`which'"' "`varlist'" "`inse'"
          {c )-}
          else if "`what'" == "c" {c -(}
          Char `"`which'"' "`varlist'" "`inse'"
          {c )-}
          else if "`what'" == "t" {c -(}
          Type `"`which'"' "`varlist'"
          {c )-}
          if `"`not'"' != "" {c -(}
          local varlist : list varlist - vlist
          {c )-}
          else if `"`has'"' != "" {c -(}
          local varlist "`vlist'"
          {c )-}
          {c )-}
        - if `"`not2'"' != "" {c -(}
        = if `""' != "" {c -(}
          unab all : *
          local varlist : list all - varlist
          {c )-}
        - if "`varlist'" == "" {c -(}
        = if "object class path1 path2 path3 path4 path5" == "" {c -(}
          exit
          {c )-}
        - if "`alpha'" != "" {c -(}
        = if "" != "" {c -(}
          local varlist : list sort varlist
          {c )-}
        - if "`detail'" != "" {c -(}
        = if "" != "" {c -(}
          describe `varlist'
          {c )-}
        - else {c -(}
        - local nvar : word count `varlist'
        = local nvar : word count object class path1 path2 path3 path4 path5
        - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
        = local ncol = int((99 + 2) / (12 + 2))
        - local i 0
        - local vlist
        - foreach v of local varlist {c -(}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" object"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" object class"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" object class path1"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" object class path1 path2"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" object class path1 path2 path3"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" object class path1 path2 path3 path4"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" object class path1 path2 path3 path4 path5"'
        - {c )-}
        - DisplayInCols txt `indent' `skip' 0 `vlist'
        = DisplayInCols txt 0 2 0  object class path1 path2 path3 path4 path5
          {hline 57} begin ds_util.DisplayInCols {hline}
          - gettoken sty 0 : 0
          - gettoken indent 0 : 0
          - gettoken pad 0 : 0
          - gettoken wid 0 : 0
          - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
          = local indent = cond(0==. | 0<0, 0, 0)
          - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
          = local pad = cond(2==. | 2<1, 2, 2)
          - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
          = local wid = cond(0==. | 0<0, 0, 0)
          - local n : list sizeof 0
          - if `n'==0 {c -(}
          = if 7==0 {c -(}
            exit
            {c )-}
          - foreach x of local 0 {c -(}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(0, length(`"object"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(6, length(`"class"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(6, length(`"path1"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(6, length(`"path2"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(6, length(`"path3"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(6, length(`"path4"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(6, length(`"path5"'))
          - {c )-}
          - local wid = `wid' + `pad'
          = local wid = 6 + 2
          - local cols = int((`c(linesize)'+1-`indent')/`wid')
          = local cols = int((99+1-0)/8)
          - if `cols' < 2 {c -(}
          = if 12 < 2 {c -(}
            if `indent' {c -(}
            local col "_column(`=`indent'+1')"
            {c )-}
            foreach x of local 0 {c -(}
            di as `sty' `col' `"`x'"'
            {c )-}
            exit
            {c )-}
          - local lines = `n'/`cols'
          = local lines = 7/12
          - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
          = local lines = int(cond(.5833333333333334>int(.5833333333333334), .5833333333333334+1, .5833333333333334))
          - forvalues i=1(1)`lines' {c -(}
          = forvalues i=1(1)1 {c -(}
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((12)*1+1, 7)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {c -(}
          = forvalues j=1(1)7 {c -(}
          - local x : word `j' of `0'
          = local x : word 1 of   object class path1 path2 path3 path4 path5
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "object" _c
          - local col = `col' + `wid'
          = local col = 1 + 8
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 2 of   object class path1 path2 path3 path4 path5
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(9) "class" _c
          - local col = `col' + `wid'
          = local col = 9 + 8
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 3 of   object class path1 path2 path3 path4 path5
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(17) "path1" _c
          - local col = `col' + `wid'
          = local col = 17 + 8
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 4 of   object class path1 path2 path3 path4 path5
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(25) "path2" _c
          - local col = `col' + `wid'
          = local col = 25 + 8
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 5 of   object class path1 path2 path3 path4 path5
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(33) "path3" _c
          - local col = `col' + `wid'
          = local col = 33 + 8
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 6 of   object class path1 path2 path3 path4 path5
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(41) "path4" _c
          - local col = `col' + `wid'
          = local col = 41 + 8
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 7 of   object class path1 path2 path3 path4 path5
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(49) "path5" _c
          - local col = `col' + `wid'
          = local col = 49 + 8
          - {c )-}
          - di as `sty'
          = di as txt
          - {c )-}
          {hline 59} end ds_util.DisplayInCols {hline}
        - {c )-}
        - return local varlist `varlist'
        = return local varlist object class path1 path2 path3 path4 path5
        {hline 75} end ds_util {hline}
      - exit
      {hline 82} end ds {hline}
    - local npath: word `c(k)' of `r(varlist)'
    = local npath: word 7 of object class path1 path2 path3 path4 path5
    - while regexm("`npath'", "[a-z]") {c -(}
    = while regexm("path5", "[a-z]") {c -(}
    - local npath = regexr("`npath'", "[a-z]", "")
    = local npath = regexr("path5", "[a-z]", "")
    - {c )-}
    - while regexm("`npath'", "[a-z]") {c -(}
    = while regexm("ath5", "[a-z]") {c -(}
    - local npath = regexr("`npath'", "[a-z]", "")
    = local npath = regexr("ath5", "[a-z]", "")
    - {c )-}
    - while regexm("`npath'", "[a-z]") {c -(}
    = while regexm("th5", "[a-z]") {c -(}
    - local npath = regexr("`npath'", "[a-z]", "")
    = local npath = regexr("th5", "[a-z]", "")
    - {c )-}
    - while regexm("`npath'", "[a-z]") {c -(}
    = while regexm("h5", "[a-z]") {c -(}
    - local npath = regexr("`npath'", "[a-z]", "")
    = local npath = regexr("h5", "[a-z]", "")
    - {c )-}
    - while regexm("`npath'", "[a-z]") {c -(}
    = while regexm("5", "[a-z]") {c -(}
      local npath = regexr("`npath'", "[a-z]", "")
      {c )-}
    - forvalues i = 1/`npath' {c -(}
    = forvalues i = 1/5 {c -(}
    - forvalues n = 1/`=_N' {c -(}
    = forvalues n = 1/29 {c -(}
    - local obj = object[`n']
    = local obj = object[1]
    - local path = path`i'[`n']
    = local path = path1[1]
    - if "`path'" != "" {c -(}
    = if "J:/WORK/01_covariates/common/ubcov_central" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("J:/WORK/01_covariates/common/ubcov_central", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
    - else {c -(}
    - global `obj' `path'
    = global central_root J:/WORK/01_covariates/common/ubcov_central
    - {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global central_root = subinstr("J:/WORK/01_covariates/common/ubcov_central", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global central_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[2]
    - local path = path`i'[`n']
    = local path = path1[2]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[3]
    - local path = path`i'[`n']
    = local path = path1[3]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[4]
    - local path = path`i'[`n']
    = local path = path1[4]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[5]
    - local path = path`i'[`n']
    = local path = path1[5]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[6]
    - local path = path`i'[`n']
    = local path = path1[6]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[7]
    - local path = path`i'[`n']
    = local path = path1[7]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[8]
    - local path = path`i'[`n']
    = local path = path1[8]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[9]
    - local path = path`i'[`n']
    = local path = path1[9]
    - if "`path'" != "" {c -(}
    = if "J:/WORK/01_covariates/common/ubcov_library/extract/topics" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("J:/WORK/01_covariates/common/ubcov_library/extract/topics", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
    - else {c -(}
    - global `obj' `path'
    = global topics_root J:/WORK/01_covariates/common/ubcov_library/extract/topics
    - {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global topics_root = subinstr("J:/WORK/01_covariates/common/ubcov_library/extract/topics", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global topics_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_library/extract/topics", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[10]
    - local path = path`i'[`n']
    = local path = path1[10]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[11]
    - local path = path`i'[`n']
    = local path = path1[11]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[12]
    - local path = path`i'[`n']
    = local path = path1[12]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[13]
    - local path = path`i'[`n']
    = local path = path1[13]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[14]
    - local path = path`i'[`n']
    = local path = path1[14]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[15]
    - local path = path`i'[`n']
    = local path = path1[15]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[16]
    - local path = path`i'[`n']
    = local path = path1[16]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[17]
    - local path = path`i'[`n']
    = local path = path1[17]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[18]
    - local path = path`i'[`n']
    = local path = path1[18]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[19]
    - local path = path`i'[`n']
    = local path = path1[19]
    - if "`path'" != "" {c -(}
    = if "/share/covariates/ubcov" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("/share/covariates/ubcov", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
    - else {c -(}
    - global `obj' `path'
    = global cluster_root /share/covariates/ubcov
    - {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global cluster_root = subinstr("/share/covariates/ubcov", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global cluster_root = subinstr("/share/covariates/ubcov", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[20]
    - local path = path`i'[`n']
    = local path = path1[20]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[21]
    - local path = path`i'[`n']
    = local path = path1[21]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[22]
    - local path = path`i'[`n']
    = local path = path1[22]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[23]
    - local path = path`i'[`n']
    = local path = path1[23]
    - if "`path'" != "" {c -(}
    = if "J:/WORK/01_covariates/common/ubcov_library/" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("J:/WORK/01_covariates/common/ubcov_library/", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
    - else {c -(}
    - global `obj' `path'
    = global ubcov_library J:/WORK/01_covariates/common/ubcov_library/
    - {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global ubcov_library = subinstr("J:/WORK/01_covariates/common/ubcov_library/", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global ubcov_library = subinstr("/home/j/WORK/01_covariates/common/ubcov_library/", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[24]
    - local path = path`i'[`n']
    = local path = path1[24]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[25]
    - local path = path`i'[`n']
    = local path = path1[25]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[26]
    - local path = path`i'[`n']
    = local path = path1[26]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[27]
    - local path = path`i'[`n']
    = local path = path1[27]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[28]
    - local path = path`i'[`n']
    = local path = path1[28]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[29]
    - local path = path`i'[`n']
    = local path = path1[29]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - {c )-}
    - forvalues n = 1/`=_N' {c -(}
    = forvalues n = 1/29 {c -(}
    - local obj = object[`n']
    = local obj = object[1]
    - local path = path`i'[`n']
    = local path = path2[1]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[2]
    - local path = path`i'[`n']
    = local path = path2[2]
    - if "`path'" != "" {c -(}
    = if "central_root, /modules" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("central_root, /modules", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "central_root, /modules", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global modules_root "/home/j/WORK/01_covariates/common/ubcov_central/modules"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global modules_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global modules_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[3]
    - local path = path`i'[`n']
    = local path = path2[3]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[4]
    - local path = path`i'[`n']
    = local path = path2[4]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[5]
    - local path = path`i'[`n']
    = local path = path2[5]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[6]
    - local path = path`i'[`n']
    = local path = path2[6]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[7]
    - local path = path`i'[`n']
    = local path = path2[7]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[8]
    - local path = path`i'[`n']
    = local path = path2[8]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[9]
    - local path = path`i'[`n']
    = local path = path2[9]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[10]
    - local path = path`i'[`n']
    = local path = path2[10]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[11]
    - local path = path`i'[`n']
    = local path = path2[11]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[12]
    - local path = path`i'[`n']
    = local path = path2[12]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[13]
    - local path = path`i'[`n']
    = local path = path2[13]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[14]
    - local path = path`i'[`n']
    = local path = path2[14]
    - if "`path'" != "" {c -(}
    = if "central_root, /functions" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("central_root, /functions", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "central_root, /functions", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global functions_root "/home/j/WORK/01_covariates/common/ubcov_central/functions"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global functions_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global functions_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[15]
    - local path = path`i'[`n']
    = local path = path2[15]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[16]
    - local path = path`i'[`n']
    = local path = path2[16]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[17]
    - local path = path`i'[`n']
    = local path = path2[17]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[18]
    - local path = path`i'[`n']
    = local path = path2[18]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[19]
    - local path = path`i'[`n']
    = local path = path2[19]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[20]
    - local path = path`i'[`n']
    = local path = path2[20]
    - if "`path'" != "" {c -(}
    = if "cluster_root, /model" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("cluster_root, /model", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "cluster_root, /model", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global cluster_model "/share/covariates/ubcov/model"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global cluster_model = subinstr("/share/covariates/ubcov/model", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global cluster_model = subinstr("/share/covariates/ubcov/model", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[21]
    - local path = path`i'[`n']
    = local path = path2[21]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[22]
    - local path = path`i'[`n']
    = local path = path2[22]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[23]
    - local path = path`i'[`n']
    = local path = path2[23]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[24]
    - local path = path`i'[`n']
    = local path = path2[24]
    - if "`path'" != "" {c -(}
    = if "ubcov_library, /databases" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("ubcov_library, /databases", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "ubcov_library, /databases", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global model_db_root "/home/j/WORK/01_covariates/common/ubcov_library//databases"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global model_db_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global model_db_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[25]
    - local path = path`i'[`n']
    = local path = path2[25]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[26]
    - local path = path`i'[`n']
    = local path = path2[26]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[27]
    - local path = path`i'[`n']
    = local path = path2[27]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[28]
    - local path = path`i'[`n']
    = local path = path2[28]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[29]
    - local path = path`i'[`n']
    = local path = path2[29]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - {c )-}
    - forvalues n = 1/`=_N' {c -(}
    = forvalues n = 1/29 {c -(}
    - local obj = object[`n']
    = local obj = object[1]
    - local path = path`i'[`n']
    = local path = path3[1]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[2]
    - local path = path`i'[`n']
    = local path = path3[2]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[3]
    - local path = path`i'[`n']
    = local path = path3[3]
    - if "`path'" != "" {c -(}
    = if "modules_root,  /model" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("modules_root,  /model", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "modules_root,  /model", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global model_root "/home/j/WORK/01_covariates/common/ubcov_central/modules/model"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global model_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global model_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[4]
    - local path = path`i'[`n']
    = local path = path3[4]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[5]
    - local path = path`i'[`n']
    = local path = path3[5]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[6]
    - local path = path`i'[`n']
    = local path = path3[6]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[7]
    - local path = path`i'[`n']
    = local path = path3[7]
    - if "`path'" != "" {c -(}
    = if "modules_root, /extract" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("modules_root, /extract", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "modules_root, /extract", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global extract_root "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global extract_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global extract_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[8]
    - local path = path`i'[`n']
    = local path = path3[8]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[9]
    - local path = path`i'[`n']
    = local path = path3[9]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[10]
    - local path = path`i'[`n']
    = local path = path3[10]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[11]
    - local path = path`i'[`n']
    = local path = path3[11]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[12]
    - local path = path`i'[`n']
    = local path = path3[12]
    - if "`path'" != "" {c -(}
    = if "modules_root, /collapse" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("modules_root, /collapse", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "modules_root, /collapse", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global collapse_root "/home/j/WORK/01_covariates/common/ubcov_central/modules/collapse"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global collapse_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/collapse", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global collapse_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/collapse", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[13]
    - local path = path`i'[`n']
    = local path = path3[13]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[14]
    - local path = path`i'[`n']
    = local path = path3[14]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[15]
    - local path = path`i'[`n']
    = local path = path3[15]
    - if "`path'" != "" {c -(}
    = if "functions_root, /shells" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("functions_root, /shells", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "functions_root, /shells", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global shells_root "/home/j/WORK/01_covariates/common/ubcov_central/functions/shells"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global shells_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/shells", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global shells_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/shells", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[16]
    - local path = path`i'[`n']
    = local path = path3[16]
    - if "`path'" != "" {c -(}
    = if "functions_root, /cluster_tools.r" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("functions_root, /cluster_tools.r", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "functions_root, /cluster_tools.r", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global cluster_tools "/home/j/WORK/01_covariates/common/ubcov_central/functions/cluster_tools.r"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global cluster_tools = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/cluster_tools.r", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global cluster_tools = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/cluster_tools.r", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[17]
    - local path = path`i'[`n']
    = local path = path3[17]
    - if "`path'" != "" {c -(}
    = if "functions_root, /utilitybelt/db_tools.r" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("functions_root, /utilitybelt/db_tools.r", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "functions_root, /utilitybelt/db_tools.r", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global db_tools "/home/j/WORK/01_covariates/common/ubcov_central/functions/utilitybelt/db_tools.r"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global db_tools = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/utilitybelt/db_tools.r", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global db_tools = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/utilitybelt/db_tools.r", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[18]
    - local path = path`i'[`n']
    = local path = path3[18]
    - if "`path'" != "" {c -(}
    = if "functions_root, /ubcov_tools.r" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("functions_root, /ubcov_tools.r", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "functions_root, /ubcov_tools.r", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global ubcov_tools "/home/j/WORK/01_covariates/common/ubcov_central/functions/ubcov_tools.r"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global ubcov_tools = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/ubcov_tools.r", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global ubcov_tools = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/ubcov_tools.r", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[19]
    - local path = path`i'[`n']
    = local path = path3[19]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[20]
    - local path = path`i'[`n']
    = local path = path3[20]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[21]
    - local path = path`i'[`n']
    = local path = path3[21]
    - if "`path'" != "" {c -(}
    = if "cluster_model, /data" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("cluster_model, /data", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "cluster_model, /data", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global cluster_model_data "/share/covariates/ubcov/model/data"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global cluster_model_data = subinstr("/share/covariates/ubcov/model/data", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global cluster_model_data = subinstr("/share/covariates/ubcov/model/data", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[22]
    - local path = path`i'[`n']
    = local path = path3[22]
    - if "`path'" != "" {c -(}
    = if "cluster_model, /output" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("cluster_model, /output", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "cluster_model, /output", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global cluster_model_output "/share/covariates/ubcov/model/output"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global cluster_model_output = subinstr("/share/covariates/ubcov/model/output", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global cluster_model_output = subinstr("/share/covariates/ubcov/model/output", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[23]
    - local path = path`i'[`n']
    = local path = path3[23]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[24]
    - local path = path`i'[`n']
    = local path = path3[24]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[25]
    - local path = path`i'[`n']
    = local path = path3[25]
    - if "`path'" != "" {c -(}
    = if "model_db_root, /data_db.csv" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("model_db_root, /data_db.csv", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "model_db_root, /data_db.csv", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global data_db "/home/j/WORK/01_covariates/common/ubcov_library//databases/data_db.csv"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global data_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/data_db.csv", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global data_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/data_db.csv", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[26]
    - local path = path`i'[`n']
    = local path = path3[26]
    - if "`path'" != "" {c -(}
    = if "model_db_root, /model_db.csv" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("model_db_root, /model_db.csv", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "model_db_root, /model_db.csv", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global model_db "/home/j/WORK/01_covariates/common/ubcov_library//databases/model_db.csv"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global model_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/model_db.csv", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global model_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/model_db.csv", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[27]
    - local path = path`i'[`n']
    = local path = path3[27]
    - if "`path'" != "" {c -(}
    = if "model_db_root, /run_db.csv" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("model_db_root, /run_db.csv", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "model_db_root, /run_db.csv", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global run_db "/home/j/WORK/01_covariates/common/ubcov_library//databases/run_db.csv"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global run_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/run_db.csv", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global run_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/run_db.csv", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[28]
    - local path = path`i'[`n']
    = local path = path3[28]
    - if "`path'" != "" {c -(}
    = if "model_db_root, /me_db.csv" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("model_db_root, /me_db.csv", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "model_db_root, /me_db.csv", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global me_db "/home/j/WORK/01_covariates/common/ubcov_library//databases/me_db.csv"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global me_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/me_db.csv", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global me_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/me_db.csv", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[29]
    - local path = path`i'[`n']
    = local path = path3[29]
    - if "`path'" != "" {c -(}
    = if "model_db_root, /outliers" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("model_db_root, /outliers", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "model_db_root, /outliers", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global outlier_root "/home/j/WORK/01_covariates/common/ubcov_library//databases/outliers"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global outlier_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/outliers", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global outlier_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/outliers", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - {c )-}
    - forvalues n = 1/`=_N' {c -(}
    = forvalues n = 1/29 {c -(}
    - local obj = object[`n']
    = local obj = object[1]
    - local path = path`i'[`n']
    = local path = path4[1]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[2]
    - local path = path`i'[`n']
    = local path = path4[2]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[3]
    - local path = path`i'[`n']
    = local path = path4[3]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[4]
    - local path = path`i'[`n']
    = local path = path4[4]
    - if "`path'" != "" {c -(}
    = if "model_root, /templates" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("model_root, /templates", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "model_root, /templates", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global model_templates "/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global model_templates = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global model_templates = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[5]
    - local path = path`i'[`n']
    = local path = path4[5]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[6]
    - local path = path`i'[`n']
    = local path = path4[6]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[7]
    - local path = path`i'[`n']
    = local path = path4[7]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[8]
    - local path = path`i'[`n']
    = local path = path4[8]
    - if "`path'" != "" {c -(}
    = if "extract_root, /core" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("extract_root, /core", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "extract_root, /core", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global extract_core "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global extract_core = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global extract_core = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[9]
    - local path = path`i'[`n']
    = local path = path4[9]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[10]
    - local path = path`i'[`n']
    = local path = path4[10]
    - if "`path'" != "" {c -(}
    = if "extract_root, /survey" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("extract_root, /survey", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "extract_root, /survey", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global survey_root "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/survey"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global survey_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/survey", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global survey_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/survey", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[11]
    - local path = path`i'[`n']
    = local path = path4[11]
    - if "`path'" != "" {c -(}
    = if "extract_root, /databases" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("extract_root, /databases", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "extract_root, /databases", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global extract_databases "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/databases"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global extract_databases = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/databases", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global extract_databases = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/databases", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[12]
    - local path = path`i'[`n']
    = local path = path4[12]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[13]
    - local path = path`i'[`n']
    = local path = path4[13]
    - if "`path'" != "" {c -(}
    = if "collapse_root, /launch.r" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("collapse_root, /launch.r", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "collapse_root, /launch.r", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global collapse_launch "/home/j/WORK/01_covariates/common/ubcov_central/modules/collapse/launch.r"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global collapse_launch = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/collapse/launch.r", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global collapse_launch = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/collapse/launch.r", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[14]
    - local path = path`i'[`n']
    = local path = path4[14]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[15]
    - local path = path`i'[`n']
    = local path = path4[15]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[16]
    - local path = path`i'[`n']
    = local path = path4[16]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[17]
    - local path = path`i'[`n']
    = local path = path4[17]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[18]
    - local path = path`i'[`n']
    = local path = path4[18]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[19]
    - local path = path`i'[`n']
    = local path = path4[19]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[20]
    - local path = path`i'[`n']
    = local path = path4[20]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[21]
    - local path = path`i'[`n']
    = local path = path4[21]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[22]
    - local path = path`i'[`n']
    = local path = path4[22]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[23]
    - local path = path`i'[`n']
    = local path = path4[23]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[24]
    - local path = path`i'[`n']
    = local path = path4[24]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[25]
    - local path = path`i'[`n']
    = local path = path4[25]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[26]
    - local path = path`i'[`n']
    = local path = path4[26]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[27]
    - local path = path`i'[`n']
    = local path = path4[27]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[28]
    - local path = path`i'[`n']
    = local path = path4[28]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[29]
    - local path = path`i'[`n']
    = local path = path4[29]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - {c )-}
    - forvalues n = 1/`=_N' {c -(}
    = forvalues n = 1/29 {c -(}
    - local obj = object[`n']
    = local obj = object[1]
    - local path = path`i'[`n']
    = local path = path5[1]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[2]
    - local path = path`i'[`n']
    = local path = path5[2]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[3]
    - local path = path`i'[`n']
    = local path = path5[3]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[4]
    - local path = path`i'[`n']
    = local path = path5[4]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[5]
    - local path = path`i'[`n']
    = local path = path5[5]
    - if "`path'" != "" {c -(}
    = if "model_templates, /data_template.csv" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("model_templates, /data_template.csv", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "model_templates, /data_template.csv", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global data_template "/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates/data_template.csv"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global data_template = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates/data_template.csv", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global data_template = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates/data_template.csv", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[6]
    - local path = path`i'[`n']
    = local path = path5[6]
    - if "`path'" != "" {c -(}
    = if "model_templates, /model_db.csv" != "" {c -(}
    - if regexm("`path'", ",") {c -(}
    = if regexm("model_templates, /model_db.csv", ",") {c -(}
    - tokenize "`path'", p(" ,")
    = tokenize "model_templates, /model_db.csv", p(" ,")
    - global `obj' "${c -(}`1'{c )-}`3'"
    = global model_template "/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates/model_db.csv"
    - {c )-}
    - else {c -(}
      global `obj' `path'
      {c )-}
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    = global model_template = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates/model_db.csv", "J:", "/home/j", .)
    - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    = global model_template = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates/model_db.csv", "H:", "/snfs2/HOME/albrja", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
    - {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[7]
    - local path = path`i'[`n']
    = local path = path5[7]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[8]
    - local path = path`i'[`n']
    = local path = path5[8]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[9]
    - local path = path`i'[`n']
    = local path = path5[9]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[10]
    - local path = path`i'[`n']
    = local path = path5[10]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[11]
    - local path = path`i'[`n']
    = local path = path5[11]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[12]
    - local path = path`i'[`n']
    = local path = path5[12]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[13]
    - local path = path`i'[`n']
    = local path = path5[13]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[14]
    - local path = path`i'[`n']
    = local path = path5[14]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[15]
    - local path = path`i'[`n']
    = local path = path5[15]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[16]
    - local path = path`i'[`n']
    = local path = path5[16]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[17]
    - local path = path`i'[`n']
    = local path = path5[17]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[18]
    - local path = path`i'[`n']
    = local path = path5[18]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[19]
    - local path = path`i'[`n']
    = local path = path5[19]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[20]
    - local path = path`i'[`n']
    = local path = path5[20]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[21]
    - local path = path`i'[`n']
    = local path = path5[21]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[22]
    - local path = path`i'[`n']
    = local path = path5[22]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[23]
    - local path = path`i'[`n']
    = local path = path5[23]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[24]
    - local path = path`i'[`n']
    = local path = path5[24]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[25]
    - local path = path`i'[`n']
    = local path = path5[25]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[26]
    - local path = path`i'[`n']
    = local path = path5[26]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[27]
    - local path = path`i'[`n']
    = local path = path5[27]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[28]
    - local path = path`i'[`n']
    = local path = path5[28]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - local obj = object[`n']
    = local obj = object[29]
    - local path = path`i'[`n']
    = local path = path5[29]
    - if "`path'" != "" {c -(}
    = if "" != "" {c -(}
      if regexm("`path'", ",") {c -(}
      tokenize "`path'", p(" ,")
      global `obj' "${c -(}`1'{c )-}`3'"
      {c )-}
      else {c -(}
      global `obj' `path'
      {c )-}
      if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
      {c )-}
      else if c(os) == "Windows" {c -(}
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
      global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
      {c )-}
      {c )-}
    - {c )-}
    - {c )-}
    {hline 76} end ubcov_path {hline}
    {hline 79} begin clear {hline}
    - if _caller() < 10 {c -(}
      _clear_9 `0'
      exit
      {c )-}
    - version 10
    - syntax [anything]
    - tokenize `anything'
    = tokenize 
    - if `"`2'"' != "" {c -(}
    = if `""' != "" {c -(}
      display as err "`2' not allowed"
      exit 198
      {c )-}
    - if "`1'"=="" {c -(}
    = if ""=="" {c -(}
    - drop _all
    - label drop _all
      {hline 77} begin label {hline}
      - version 10.0
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("drop", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - _label `macval(0)'
      = _label drop _all
      - {c )-}
      {hline 79} end label {hline}
    - {c )-}
    - else if "`1'"=="mata" {c -(}
    = else if ""=="mata" {c -(}
      mata: mata clear
      {c )-}
    - else if inlist("`1'", "results", "matrix") {c -(}
    = else if inlist("", "results", "matrix") {c -(}
      return clear
      clearreturn
      ereturn clear
      sreturn clear
      _return drop _all
      if ("`1'" == "matrix") {c -(}
      matrix drop _all
      _est drop _all
      {c )-}
      {c )-}
    - else if "`1'"=="programs" {c -(}
    = else if ""=="programs" {c -(}
      program drop _all
      {c )-}
    - else if "`1'"=="ado" {c -(}
    = else if ""=="ado" {c -(}
      program drop _allado
      {c )-}
    - else if "`1'"=="*" | "`1'"=="all" {c -(}
    = else if ""=="*" | ""=="all" {c -(}
      capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
      capture
      if (0`semmods') {c -(}
      display as err "-clear all- not allowed while an SEM Builder is open"
      exit 1
      {c )-}
      drop _all
      label drop _all
      matrix drop _all
      scalar drop _all
      constraint drop _all
      eq drop _all
      file close _all
      postutil clear
      _return drop _all
      discard
      program drop _all
      timer clear
      mata: mata clear
      {c )-}
    - else {c -(}
      display as err "`1' not allowed"
      exit 198
      {c )-}
    {hline 81} end clear {hline}

{com}. 
{txt}end of do-file
- {c )-}
- if "`file'" != "run.do" do "`path'/`file'"
= if "validate.do" != "run.do" do "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core//validate.do"

{com}. /***********************************************************************************************************
>  Author: Patrick Liu (pyliu@uw.edu)                                                                                                                                             
>  Date: 7/13/2015
>  Project: ubCov
>  Purpose: Validate
>                                                                                                                                                                         
> ***********************************************************************************************************/
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
> 
> 
> Table of Contents:
> 
> - run_validation
> - clean_output
> - interactive_check
>                                                                  
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. 
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>                                                                                                          validation blocks
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. 
. cap program drop run_validation
{txt}
{com}. program define run_validation
{txt}  1{com}. 
.         syntax, indicators(str)
{txt}  2{com}. 
.         local missing_vars 
{txt}  3{com}.         local i = 1
{txt}  4{com}.         foreach var in `indicators' {c -(}
{txt}  5{com}.                 // Grab indicator metadata
.                 local colnum = 1
{txt}  6{com}.                 foreach col in $indicators_cols {c -(}
{txt}  7{com}.                         m: st_local("`col'", indicators[`i', `colnum'])
{txt}  8{com}.                         local ++colnum
{txt}  9{com}.                 {c )-}
{txt} 10{com}.                 // Check required variables
.                 if `indicator_required' {c -(}
{txt} 11{com}.                         cap confirm variable `var'
{txt} 12{com}.                         if _rc {c -(}
{txt} 13{com}.                                 local missing_vars `missing_vars' `var'
{txt} 14{com}.                         {c )-}
{txt} 15{com}.                 {c )-}
{txt} 16{com}.                 // Run validation
.                 if !inlist("`indicator_validation'", "", ".") {c -(}
{txt} 17{com}.                         di as error "Indicator Validation || cmd: `indicator_validation' || `topic_name' || `var' (`indicator_type')"
{txt} 18{com}.                         `indicator_validation'
{txt} 19{com}.                 {c )-}
{txt} 20{com}.                 local ++i
{txt} 21{com}.         {c )-}
{txt} 22{com}.         // Stop if missing any required variables
.         if !mi("`missing_vars'") {c -(}
{txt} 23{com}.                 di as error "Indicator Validation || Missing the following required variables (`missing_vars')"
{txt} 24{com}.                 STOP
{txt} 25{com}.         {c )-}
{txt} 26{com}. 
. 
. 
. end
{txt}
{com}. 
. 
. ////////////////////////////////
> 
. cap program drop check_clean
{txt}
{com}. program define check_clean
{txt}  1{com}. 
.         syntax, [indicators(str)] [bypass] [keep]
{txt}  2{com}. 
. qui {c -(}
{txt}  3{com}.         // Store temp
.         tempfile check
{txt}  4{com}.         save `check', replace
{txt}  5{com}. 
.         // List of custom indicators + non-meta indicators
.         preserve
{txt}  6{com}.                 get, indicators
{txt}  7{com}.                 // Custom
.                 levelsof indicator_name if code_custom == 1, l(indicators_custom) clean
{txt}  8{com}.                 // Nonmeta
.                 levelsof indicator_name if !regexm(indicator_type, "meta"), l(indicators_nonmeta) clean
{txt}  9{com}.         restore
{txt} 10{com}. 
.         // Store columns
.         ds
{txt} 11{com}.         local varlist `r(varlist)'
{txt} 12{com}. 
.         // Keep only indicators that were created + custom ones
.         local keepvars
{txt} 13{com}.         foreach i in  `indicators' `indicators_custom' {c -(}
{txt} 14{com}.                 cap confirm variable `i'
{txt} 15{com}.                 if !_rc {c -(}
{txt} 16{com}.                         cap assert mi(`i')
{txt} 17{com}.                         if _rc local keepvars `keepvars' `i'
{txt} 18{com}.                 {c )-}
{txt} 19{com}.         {c )-}
{txt} 20{com}.         if mi("`keep'")  keep `keepvars'
{txt} 21{com}.         
. 
.         // Order
.         local order
{txt} 22{com}.         foreach i in $indicators {c -(}
{txt} 23{com}.                 cap confirm variable `i'
{txt} 24{com}.                 if !_rc local order `order' `i'
{txt} 25{com}.         {c )-}
{txt} 26{com}.         if mi("`keep'")  order `order'
{txt} 27{com}. 
. 
.         // Drop rows that are missing all non-meta indicators
.         local nonmeta : list indicators_nonmeta & keepvars
{txt} 28{com}.         local n : list sizeof nonmeta
{txt} 29{com}.         egen kittentemp = rowmiss(`nonmeta')
{txt} 30{com}.         drop if kittentemp == `n'
{txt} 31{com}.         drop kittentemp
{txt} 32{com}. {c )-}
{txt} 33{com}. 
.  
.         /////////////////////////////
>         // INTERACTIVE CHECK
.         /////////////////////////////
> 
. if mi("`bypass'") {c -(}
{txt} 34{com}.         // Check
.         di as error "////////////////////////////////////////////////////////////////////"
{txt} 35{com}.         di as error "nid: $nid | survey_name: $survey_name"
{txt} 36{com}.         di as error "ihme_loc_id: $ihme_loc_id | years: $year_start - $year_end | survey_module: $survey_module"
{txt} 37{com}.         di as error "////////////////////////////////////////////////////////////////////"
{txt} 38{com}.         di as error ""
{txt} 39{com}.         di as error "Please check the plausibility of your output"
{txt} 40{com}.         di as error ""
{txt} 41{com}.         di as error "(1) If the output looks reasonable, type: yes" 
{txt} 42{com}.         di as error ""
{txt} 43{com}.         di as error "(2) To add all the survey variables back to diagnose, type: check"
{txt} 44{com}.         di as error "Once finished, type: return"
{txt} 45{com}.         di as error ""
{txt} 46{com}.         di as error "(3) For a kitten, type: smitten with kittens"
{txt} 47{com}.         di as error ""
{txt} 48{com}.         di as error "(4) Type whatever command you would like"
{txt} 49{com}.         browse
{txt} 50{com}.                 
.         // Interactive
.         local check_pass 0 
{txt} 51{com}.         local pass 0 
{txt} 52{com}.         while `pass' != 1 | `check_pass' != 1 {c -(}
{txt} 53{com}.                 noisily: di as error "" _request(resp)
{txt} 54{com}.                 local check_pass 0 
{txt} 55{com}.                 // yes
.                 if "$resp" == "yes" {c -(}
{txt} 56{com}.                         local pass 1
{txt} 57{com}.                         local check_pass 1
{txt} 58{com}.                 {c )-}
{txt} 59{com}.                 // check
.                 else if "$resp" == "check" {c -(}
{txt} 60{com}.                         tempfile return
{txt} 61{com}.                         save `return', replace
{txt} 62{com}.                         use `check', clear
{txt} 63{com}.                         while `check_pass' == 0 {c -(}
{txt} 64{com}.                                 noisily: di as error "type: return when finished" _request(resp_inner)
{txt} 65{com}.                                 if "$resp_inner" == "return" {c -(}
{txt} 66{com}.                                         local check_pass 1
{txt} 67{com}.                                         use `return', clear
{txt} 68{com}.                                 {c )-}
{txt} 69{com}.                                 else {c -(}
{txt} 70{com}.                                         noisily {c -(}
{txt} 71{com}.                                         cap noisily: $resp_inner
{txt} 72{com}.                                         {c )-}
{txt} 73{com}.                                 {c )-}
{txt} 74{com}.                         {c )-}
{txt} 75{com}.                 {c )-}
{txt} 76{com}.                 // kittens
.                 else if "$resp" == "smitten with kittens" {c -(}
{txt} 77{com}.                         noisily: di as error "         ,_         _,                "     
{txt} 78{com}.                         noisily: di as error "         |\\.-'''-.//|                "  
{txt} 79{com}.                         noisily: di as error "         \'         '/                "  
{txt} 80{com}.                         noisily: di as error "        /    _   _    \               "   
{txt} 81{com}.                         noisily: di as error "        |    a _ a    |               "   
{txt} 82{com}.                         noisily: di as error "        '.=    Y    =.'               "   
{txt} 83{com}.                         noisily: di as error "          >._  ^  _.<                 " 
{txt} 84{com}.                         noisily: di as error "         /   '''''   \                "  
{txt} 85{com}.                         noisily: di as error "         )           (                "  
{txt} 86{com}.                         noisily: di as error "        ,(           ),               "   
{txt} 87{com}.                         noisily: di as error "       / )   /   \   ( \              "    
{txt} 88{com}.                         noisily: di as error "       ) (   )   (   ) (              "    
{txt} 89{com}.                         noisily: di as error "       ( )   (   )   ( )              "    
{txt} 90{com}.                         noisily: di as error "       )_(   )   (   )_(-.._          "        
{txt} 91{com}.                         noisily: di as error "      (  )_  (._.)  _(  )_, '\        "          
{txt} 92{com}.                         noisily: di as error "       ''(   )   (   )'' .' .'        "          
{txt} 93{com}.                         noisily: di as error "          '''     '''   ( ('          "        
{txt} 94{com}.                         noisily: di as error "                         '-'                  "  
{txt} 95{com}.                 {c )-}
{txt} 96{com}.                 // cmd
.                 else {c -(}
{txt} 97{com}.                         noisily {c -(}
{txt} 98{com}.                         cap noisily: $resp
{txt} 99{com}.                         {c )-}
{txt}100{com}.                 {c )-}
{txt}101{com}.         {c )-}
{txt}102{com}. {c )-}
{txt}103{com}.         
. 
. end
{txt}
{com}. 
{txt}end of do-file
- {c )-}
- if "`file'" != "run.do" do "`path'/`file'"
= if "init.do" != "run.do" do "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core//init.do"

{com}. /***********************************************************************************************************
>  Author: Patrick Liu (pyliu@uw.edu)
>  Date: 7/13/2015
>  Project: ubCov
>  Purpose: Core Script
> 
> ***********************************************************************************************************/
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
> 
> 
> Table of Contents:
> 
> Basic utility
> - keep_key
> - gs_db
> - db_load
> 
> Codebook Setup
> - load_codebook
> - get
> 
> Initialize
> - init
> - refresh
> 
> 
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>                                                                                                          codebook setup
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. cap program drop keep_key
{txt}
{com}. program define keep_key
{txt}  1{com}. 
.         syntax, [key(str)]
{txt}  2{com}. 
.         if mi("$key") & mi("`key'") di as error "Must provide key vars if $key not set"
{txt}  3{com}. 
.         // Keep
.         foreach key in $key {c -(}
{txt}  4{com}.                 cap confirm string variable `key'
{txt}  5{com}.                 if !_rc keep if `key' == "${c -(}`key'{c )-}"
{txt}  6{com}.                 else keep if `key' == ${c -(}`key'{c )-}
{txt}  7{com}.         {c )-}
{txt}  8{com}. 
. end
{txt}
{com}. 
. //////////////////////////////////////////////////////////////////////////
> 
. cap program drop gs_db
{txt}
{com}. program define gs_db
{txt}  1{com}. 
.         syntax, obj(str) [topic(str)]
{txt}  2{com}. 
.         local links = "1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY"
{txt}  3{com}. 
.         gs_load, key(`links')
{txt}  4{com}.         keep if obj =="`obj'"
{txt}  5{com}.         if !mi("`topic'") keep if topic == "`topic'"
{txt}  6{com}.         if _N == 0 {c -(}
{txt}  7{com}.                 di as error "Codebook not listed in links (https://docs.google.com/spreadsheets/d/`links'/edit#gid=0)"
{txt}  8{com}.                 STOP
{txt}  9{com}.         {c )-}
{txt} 10{com}.         if _N > 1 {c -(}
{txt} 11{com}.                 if !mi("`topic'") di as error "Duplicates in topic (`topic') and obj (`obj')"
{txt} 12{com}.                 else di as error "Duplicates in obj (`obj')"
{txt} 13{com}.                 STOP
{txt} 14{com}.         {c )-}
{txt} 15{com}.         else {c -(}
{txt} 16{com}.                 local key `=key[1]'
{txt} 17{com}.                 gs_load, key(`key')
{txt} 18{com}.         {c )-}
{txt} 19{com}. 
. end
{txt}
{com}. 
. 
. //////////////////////////////////////////////////////////////////////////
> 
. cap program drop db_load
{txt}
{com}. program define db_load
{txt}  1{com}. 
.         syntax, db(str)
{txt}  2{com}. 
.         // Load from google
.         if "`db'" == "codebook" {c -(}
{txt}  3{com}.                 foreach topic in basic $sel_topics {c -(}
{txt}  4{com}.                         // Pull codebook
.                         gs_db, topic(`topic') obj("codebook")
{txt}  5{com}.                         // Clean up
.                         ds
{txt}  6{com}.                         local cb_vars `r(varlist)'
{txt}  7{com}.                         local vars ubcov_id $vars
{txt}  8{com}.                         local drop_vars : list cb_vars - vars
{txt}  9{com}.                         drop `drop_vars'
{txt} 10{com}.                         destring ubcov_id, replace force
{txt} 11{com}.                         drop if ubcov_id == .
{txt} 12{com}.                         // Duplicates
.                         duplicates tag $key, gen(kittendupe)
{txt} 13{com}.                         tab kittendupe if kittendupe > 0
{txt} 14{com}.                         if `r(N)' > 0 {c -(}
{txt} 15{com}.                                 di as error "Duplicates in codebook (`topic'). Please address."
{txt} 16{com}.                                 br if kittendupe > 0
{txt} 17{com}.                                 STOP
{txt} 18{com}.                         {c )-}
{txt} 19{com}.                         drop kittendupe
{txt} 20{com}.                         // Merge
.                         if "`topic'" == "basic" {c -(}
{txt} 21{com}.                                 keep if !mi(ubcov_id)
{txt} 22{com}.                                 tempfile temp
{txt} 23{com}.                                 save `temp', replace
{txt} 24{com}.                         {c )-}
{txt} 25{com}.                         else {c -(}
{txt} 26{com}.                                 // Remove basic vars
.                                 drop nid survey_name ihme_loc_id year_start year_end survey_module file_path
{txt} 27{com}.                                 merge 1:1 ubcov_id using `temp', gen(kittenmerge_`topic') keep(2 3)
{txt} 28{com}.                                 replace kittenmerge_`topic' = 0 if kittenmerge_`topic' != 3
{txt} 29{com}.                                 save `temp', replace
{txt} 30{com}.                         {c )-}
{txt} 31{com}.                 {c )-}
{txt} 32{com}.                 if "$sel_topics" != "basic" {c -(}
{txt} 33{com}.                 // Keep if any merges from any topics
.                 egen kittenkeep = rowtotal(kittenmerge_*)
{txt} 34{com}.                 keep if kittenkeep > 0
{txt} 35{com}.                 {c )-}
{txt} 36{com}.                 // Clean
.                 keep ubcov_id $vars
{txt} 37{com}.                 order ubcov_id $vars
{txt} 38{com}.                 sort ubcov_id
{txt} 39{com}.         {c )-}
{txt} 40{com}.         else {c -(}
{txt} 41{com}.                 gs_db, obj(`db')
{txt} 42{com}.         {c )-}
{txt} 43{com}. 
. end
{txt}
{com}. 
. 
. //////////////////////////////////////////////////////////////////////////
> 
. cap program drop load_codebook
{txt}
{com}. program define load_codebook
{txt}  1{com}. 
.         syntax, ubcov_id(int)
{txt}  2{com}. 
.         get, codebook
{txt}  3{com}. 
.         keep if ubcov_id == `ubcov_id'
{txt}  4{com}.         if _N == 0 {c -(}
{txt}  5{com}.                 di as error "ubcov_id (`ubcov_id') doesn't exist for the topics specified ($sel_topics). Check using get, codebook"
{txt}  6{com}.                 STOP
{txt}  7{com}.         {c )-}
{txt}  8{com}.         foreach var of varlist * {c -(}
{txt}  9{com}.                 global `var' = `var'
{txt} 10{com}.                 //Drop .s from db entries except for delimiters
.                 if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
{txt} 11{com}.                 if regexm("`var'", "merge_file") {c -(}
{txt} 12{com}.                         if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
{txt} 13{com}.                                 global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
{txt} 14{com}.                         {c )-}
{txt} 15{com}.                 {c )-}
{txt} 16{com}.         {c )-}
{txt} 17{com}. 
.         /////////////////
>         // Display
.         /////////////////
> 
.         di as error "********************************************************************"
{txt} 18{com}.         di as error "LOADED SURVEY"
{txt} 19{com}.         di as error "ubcov_id: `ubcov_id'"
{txt} 20{com}.         di as error "nid: $nid | survey_name: $survey_name"
{txt} 21{com}.         di as error "ihme_loc_id: $ihme_loc_id | years: $year_start - $year_end | survey_module: $survey_module"
{txt} 22{com}.         di as error "base_path: $file_path"
{txt} 23{com}.         di as error "********************************************************************"
{txt} 24{com}. 
. end
{txt}
{com}. 
. //////////////////////////////////////////////////////////////////////////
> 
. cap program drop get
{txt}
{com}. program define get
{txt}  1{com}. 
. qui {c -(}
{txt}  2{com}.         syntax, [vars codebook indicators labels merges] [keep_key]
{txt}  3{com}. 
.         clear
{txt}  4{com}.         local arg `2'
{txt}  5{com}.         getmata (${c -(}`arg'_cols{c )-}) = `arg'
{txt}  6{com}.         if !inlist("`arg'", "labels", "merge") destring *, replace
{txt}  7{com}. 
.         if !mi("`keep_key'") keep_key
{txt}  8{com}. {c )-}
{txt}  9{com}. 
. end
{txt}
{com}. 
. 
. //////////////////////////////////////////////////////////////////////////
> 
. cap program drop init
{txt}
{com}. program define init
{txt}  1{com}. 
.         syntax, [topics(str) save(str) load(str)]
{txt}  2{com}. 
. qui {c -(}
{txt}  3{com}. 
.         // Init databases on selected topics
.         if !mi("`topics'") {c -(}
{txt}  4{com}.                 global sel_topics `topics' // Hack for google
{txt}  5{com}.                 local topics basic design demographics geography `topics'
{txt}  6{com}.         {c )-}
{txt}  7{com}.         else {c -(}
{txt}  8{com}.                 global sel_topics basic // Hack for google
{txt}  9{com}.                 local topics basic design demographics geography
{txt} 10{com}.         {c )-}
{txt} 11{com}. 
.         // Set topics as global
.         global topics `topics'
{txt} 12{com}. 
.         // Set os as global
.         if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
{txt} 13{com}.         global j "/home/j"
{txt} 14{com}.         global h "/snfs2/HOME/`c(username)'"
{txt} 15{com}.         set odbcmgr unixodbc
{txt} 16{com}.         {c )-}
{txt} 17{com}.         else if c(os) == "Windows" {c -(}
{txt} 18{com}.         global j "J:"
{txt} 19{com}.         global h "H:"
{txt} 20{com}.         {c )-}
{txt} 21{com}. 
.         // Load and prime databases
.         foreach db in vars indicators codebook labels merges {c -(}
{txt} 22{com}.                 if mi("`load'") db_load, db(`db')
{txt} 23{com}.                 if !mi("`load'") import delimited using "`load'/`db'.csv", clear varnames(1) stringcols(_all) charset("utf-8")
{txt} 24{com}.                 if !mi("`save'") export delimited using "`save'/`db'.csv", replace
{txt} 25{com}.                 tostring *, replace
{txt} 26{com}.                 inlist2, obj(topic_name) vals(`topics') str(vals)
{txt} 27{com}.                 local ifcmd `r(cmd)'
{txt} 28{com}.                 // Set globals
.                 if "`db'" == "vars" {c -(}
{txt} 29{com}.                         keep if `ifcmd'
{txt} 30{com}.                         global vars
{txt} 31{com}.                         forvalues i = 1/`=_N' {c -(}
{txt} 32{com}.                         global vars $vars `=var_name[`i']'
{txt} 33{com}.                         {c )-}
{txt} 34{com}.                 {c )-}
{txt} 35{com}.                 if "`db'" == "indicators" {c -(}
{txt} 36{com}.                         keep if `ifcmd'
{txt} 37{com}.                         global indicators
{txt} 38{com}.                         forvalues i = 1/`=_N' {c -(}
{txt} 39{com}.                         global indicators $indicators `=indicator_name[`i']'
{txt} 40{com}.                         {c )-}
{txt} 41{com}.                 {c )-}
{txt} 42{com}.                 // Set to mata
.                 ds
{txt} 43{com}.                 global `db'_cols `r(varlist)'
{txt} 44{com}.                 putmata `db' = (${c -(}`db'_cols{c )-}), replace
{txt} 45{com}. 
.         {c )-}
{txt} 46{com}. 
.         // Any variables to map?
.         get, indicators
{txt} 47{com}.         levelsof indicator_name if map_indicator == 1, l(map_indicators) clean
{txt} 48{com}.         global map_indicators `map_indicators'
{txt} 49{com}.         levelsof topic_name if map_indicator == 1, l(map_topics) clean
{txt} 50{com}.         global map_topics `map_topics'
{txt} 51{com}. 
.         clear
{txt} 52{com}. {c )-}
{txt} 53{com}.         di as error "***********************************************"
{txt} 54{com}.         di as error " Databases initialized"
{txt} 55{com}.         di as error "***********************************************"
{txt} 56{com}. 
. end
{txt}
{com}. 
. 
. //////////////////////////////////////////////////////////////////////////
> 
. cap program drop refresh
{txt}
{com}. program define refresh
{txt}  1{com}. 
.         syntax [anything]
{txt}  2{com}. 
. qui {c -(}
{txt}  3{com}. 
.         // Databases
.         local dbs `anything'
{txt}  4{com}.         if mi("`anything'") local dbs codebook
{txt}  5{com}. 
.         // Set topics
.         if mi("$topics") di as error "No topics initialized, must first run {c -(} init, topics(`topic') {c )-}"
{txt}  6{com}. 
.         // Load and prime databases
.         foreach db in `dbs' {c -(}
{txt}  7{com}.                 db_load, db(`db')
{txt}  8{com}.                 tostring *, replace
{txt}  9{com}.                 inlist2, obj(topic_name) vals($topics) str(vals)
{txt} 10{com}.                 local ifcmd `r(cmd)'
{txt} 11{com}.                 // Set globals
.                 if "`db'" == "vars" {c -(}
{txt} 12{com}.                         keep if `ifcmd'
{txt} 13{com}.                         global vars
{txt} 14{com}.                         forvalues i = 1/`=_N' {c -(}
{txt} 15{com}.                         global vars $vars `=var_name[`i']'
{txt} 16{com}.                         {c )-}
{txt} 17{com}.                 {c )-}
{txt} 18{com}.                 if "`db'" == "indicators" {c -(}
{txt} 19{com}.                         keep if `ifcmd'
{txt} 20{com}.                         global indicators
{txt} 21{com}.                         forvalues i = 1/`=_N' {c -(}
{txt} 22{com}.                         global indicators $indicators `=indicator_name[`i']'
{txt} 23{com}.                         {c )-}
{txt} 24{com}.                 {c )-}
{txt} 25{com}.                 // Set to mata
.                 ds
{txt} 26{com}.                 global `db'_cols `r(varlist)'
{txt} 27{com}.                 putmata `db' = (${c -(}`db'_cols{c )-}), replace
{txt} 28{com}.         {c )-}
{txt} 29{com}. 
.         clear
{txt} 30{com}. {c )-}
{txt} 31{com}.         di as error "***********************************************"
{txt} 32{com}.         di as error " Databases refreshed "
{txt} 33{com}.         di as error "***********************************************"
{txt} 34{com}. 
. end
{txt}
{com}. 
{txt}end of do-file
- {c )-}
- if "`file'" != "run.do" do "`path'/`file'"
= if "merge.do" != "run.do" do "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core//merge.do"

{com}. /***********************************************************************************************************
>  Author: Patrick Liu (pyliu@uw.edu)                                                                                                                                             
>  Date: 7/13/2015
>  Project: ubCov
>  Purpose: Merge
>                                                                                                                                                                         
> ***********************************************************************************************************/
. 
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>                                                                                                          merge blocks
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. 
. cap program drop load_merges
{txt}
{com}. program define load_merges
{txt}  1{com}. 
.         syntax, topics(str) threshold(str)
{txt}  2{com}. 
.         // Setup
.         qui {c -(}
{txt}  3{com}.         preserve
{txt}  4{com}.         get, merges keep_key
{txt}  5{com}. 
.                 // Keep topics
.                 if _N > 0 {c -(}
{txt}  6{com}.                         inlist2, obj(topic_name) vals(`topics') str(vals)
{txt}  7{com}.                         keep if `r(cmd)'
{txt}  8{com}.                 {c )-}
{txt}  9{com}.         
.                 // Store number of merges
.                 local n_merges = `=_N'
{txt} 10{com}. 
.                 // Store merge info into locals
.                 if `n_merges' > 0 {c -(}
{txt} 11{com}.                 local vars topic_name merge_file reshape master_vars using_vars type keep
{txt} 12{com}.                 forvalues i = 1/`n_merges'{c -(}
{txt} 13{com}.                         foreach var in `vars' {c -(}
{txt} 14{com}.                                 local `var'_`i'
{txt} 15{com}.                                 local `var'_`i' `=`var'[`i']'
{txt} 16{com}.                         {c )-}
{txt} 17{com}.                 {c )-}
{txt} 18{com}.                 {c )-}
{txt} 19{com}. 
.         restore
{txt} 20{com}.         {c )-}
{txt} 21{com}. 
.         // If any to merge, go through merges
.         if `n_merges' > 0 {c -(}
{txt} 22{com}.                 // Loop through merges
.                 forvalues i = 1/`n_merges' {c -(}
{txt} 23{com}.                         // Go through merges
.                         di as error "MERGE || `topic_name_`i''"
{txt} 24{com}.                                 // Set keeps
.                                 local keep
{txt} 25{com}.                                 if !mi("`keep_`i''") {c -(}
{txt} 26{com}.                                         local nocomma = subinstr("`keep_`i''", ",", " ", .)
{txt} 27{com}.                                         local keep keep(`nocomma')
{txt} 28{com}.                                 {c )-}
{txt} 29{com}.                                 // Set reshape
.                                 if !mi("`reshape_`i''") reshape2, id(`reshape_`i'') newid(reshapeid) time
{txt} 30{com}.                                 // Merge
.                                 mergexy, file(`merge_file_`i'') type(`type_`i'') master(`master_vars_`i'') using(`using_vars_`i'') gen(kittenmerge) `keep'
{txt} 31{com}.                         // Throw an error if > .10 missing
.                         qui: tab kittenmerge if inlist(kittenmerge, 1)
{txt} 32{com}.                         if (`r(N)'/`=_N') > `threshold' {c -(}
{txt} 33{com}.                                 forvalues butts = 1/3 {c -(}
{txt} 34{com}.                                         di "More than `threshold' not merged on!!!"
{txt} 35{com}.                                 {c )-}
{txt} 36{com}.                                 sleep 3000
{txt} 37{com}.                         {c )-}
{txt} 38{com}.                         drop kittenmerge
{txt} 39{com}.                         // Label vars on the merge file
.                         qui: label_vars, file_path(`merge_file_`i'')
{txt} 40{com}.                         qui: label_vals, file_path(`merge_file_`i'')
{txt} 41{com}.                 {c )-}
{txt} 42{com}.         {c )-}
{txt} 43{com}. 
. end
{txt}
{com}. 
. 
. 
{txt}end of do-file
- {c )-}
- if "`file'" != "run.do" do "`path'/`file'"
= if "generate.do" != "run.do" do "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core//generate.do"

{com}. /***********************************************************************************************************
>  Author: Patrick Liu (pyliu@uw.edu)
>  Date: 7/13/2015
>  Project: ubCov
>  Purpose: Generate indicators
> 
> ***********************************************************************************************************/
. 
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
> 
> 
> Table of Contents:
> 
> Checks
>         - input_check
> 
> Generate
>         - gen_manual
>         - gen_bin
>         - gen_cont
>         - gen_categ_str
>         - gen_categ_multi_bin
>         - gen_meta
> 
> Main:
>         - create_indicators
> 
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>         INPUT CHECK
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. cap program drop input_check
{txt}
{com}. program define input_check, return
{txt}  1{com}. 
.         syntax, statement(str)
{txt}  2{com}. 
.         //////////////////////
> 
.         foreach sym in "&" "|" {c -(}
{txt}  3{com}.                 if regexm("`statement'", "[`sym']") {c -(}
{txt}  4{com}.                         local s `sym'
{txt}  5{com}.                 {c )-}
{txt}  6{com}.         {c )-}
{txt}  7{com}.         if regexm("`statement'", "[&]") & regexm("`statement'", "[|]") {c -(}
{txt}  8{com}.                 di as error "Can't process yet"
{txt}  9{com}.                 STOP
{txt} 10{com}.         {c )-}
{txt} 11{com}.         else if !regexm("`statement'", "[&]") & !regexm("`statement'", "[|]") {c -(}
{txt} 12{com}.                 local s "&"
{txt} 13{com}.         {c )-}
{txt} 14{com}. 
.         //////////////////////
> 
.         local pass 0
{txt} 15{com}.         local statement = subinstr("`statement'", "`s'" , " ", .)
{txt} 16{com}.         local n_true = 0
{txt} 17{com}. 
.         foreach item in `statement' {c -(}
{txt} 18{com}.                 if !inlist(`"${c -(}`item'{c )-}"', "", ".") {c -(}
{txt} 19{com}.                         local ++n_true
{txt} 20{com}.                 {c )-}
{txt} 21{com}.         {c )-}
{txt} 22{com}.         if `n_true' > 0 {c -(}
{txt} 23{com}.                 if "`s'" == "&" {c -(}
{txt} 24{com}.                         local length: word count `statement'
{txt} 25{com}.                         if `n_true' == `length' {c -(}
{txt} 26{com}.                                 local ++pass
{txt} 27{com}.                         {c )-}
{txt} 28{com}.                 {c )-}
{txt} 29{com}.                 else {c -(}
{txt} 30{com}.                         local ++pass
{txt} 31{com}.                 {c )-}
{txt} 32{com}.         {c )-}
{txt} 33{com}. 
.         return local vars `statement'
{txt} 34{com}.         return scalar pass = `pass'
{txt} 35{com}. 
. end
{txt}
{com}. 
. ///////////////////////////////////
> 
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>         GENERATE
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. 
. cap program drop gen_manual
{txt}
{com}. program define gen_manual
{txt}  1{com}. 
.         syntax, var(str) code(str)
{txt}  2{com}. 
.         // Run recipe
.                 // Count how many lines there are
.                 str_occur, str(`"`code'"') p("#")
{txt}  3{com}.                 local n_lines = 2*`r(N)'
{txt}  4{com}.                 if `r(N)' == 0 {c -(}
{txt}  5{com}.                         local n_lines 1
{txt}  6{com}.                 {c )-}
{txt}  7{com}.                 // Split code lines
.                 tokenize `"`code'"', p("[#]")
{txt}  8{com}.                 // Run code
.                 forvalues line = 1/`n_lines' {c -(}
{txt}  9{com}.                         local token_num = `line'*2 - 1
{txt} 10{com}.                         ``token_num''
{txt} 11{com}.                 {c )-}
{txt} 12{com}. 
. end
{txt}
{com}. 
. ////////////////////////////////
> 
. cap program drop gen_bin_sub
{txt}
{com}. program define gen_bin_sub
{txt}  1{com}. 
.         syntax, var(str) newvar(str) [true(str) false(str)]
{txt}  2{com}. 
.         gen `newvar' = .
{txt}  3{com}. 
.         local vals 1 0
{txt}  4{com}.         foreach i in true false {c -(}
{txt}  5{com}.         gettoken val vals: vals
{txt}  6{com}.                 if !mi("``i''") {c -(}
{txt}  7{com}.                 // Conditional
.                 if regexm(`"``i''"', ">|<") & !regexm(`"``i''"', "&") replace `newvar' = `val' if `var' ``i'' & `var' != .
{txt}  8{com}.                 if regexm(`"``i''"', ">|<") & regexm(`"``i''"', "&") {c -(}
{txt}  9{com}.                         tokenize ``i'', p("&")
{txt} 10{com}.                         replace `newvar' = `val' if `var' `1' & `var' `3' & `var' != .
{txt} 11{com}.                 {c )-}
{txt} 12{com}.                 // List
.                 else {c -(}
{txt} 13{com}.                         local clean = subinstr(`"``i''"', ",", " ", .)
{txt} 14{com}.                         inlist2, obj(`var') vals(`"`clean'"')
{txt} 15{com}.                         replace `newvar' = `val' if `r(cmd)'
{txt} 16{com}.                 {c )-}
{txt} 17{com}.                 {c )-}
{txt} 18{com}.         {c )-}
{txt} 19{com}. 
. end
{txt}
{com}. 
. ////////////////////////////////
> 
. cap program drop gen_bin
{txt}
{com}. program define gen_bin
{txt}  1{com}. 
.         syntax, vars(str) newvar(str) [true(str) false(str)]
{txt}  2{com}. 
.         gen `newvar' = .
{txt}  3{com}. 
.         local vars = subinstr(`"`vars'"', ",", " ", .)
{txt}  4{com}. 
.         foreach var in `vars' {c -(}
{txt}  5{com}.                 gen_bin_sub, var(`var') newvar(kittentemp) true(`true') false(`false')
{txt}  6{com}.                 replace `newvar' = 1 if kittentemp == 1
{txt}  7{com}.                 replace `newvar' = 0 if kittentemp == 0 & `newvar' == .
{txt}  8{com}.                 drop kittentemp
{txt}  9{com}.         {c )-}
{txt} 10{com}. 
. end
{txt}
{com}. 
. ////////////////////////////////
> 
. cap program drop gen_cont
{txt}
{com}. program define gen_cont
{txt}  1{com}. 
.         syntax, var(str) newvar(str) [missing(str)]
{txt}  2{com}. 
.         destring `var', replace ignore("`missing'")
{txt}  3{com}.         local type: type `var'
{txt}  4{com}. 
.         gen `type' `newvar' = `var'
{txt}  5{com}.         if !mi("`missing'") {c -(}
{txt}  6{com}.                 // Conditional
.                 if regexm("`missing'", ">|<") replace `newvar' = . if `var' `missing'
{txt}  7{com}.                 // List
.                 else {c -(}
{txt}  8{com}.                         local clean = subinstr(`"`missing'"', ",", " ", .)
{txt}  9{com}.                         inlist2, obj(`var') vals(`" `clean' "')
{txt} 10{com}.                         replace `newvar' = . if `r(cmd)'
{txt} 11{com}.                 {c )-}
{txt} 12{com}.         {c )-}
{txt} 13{com}. 
.         cap confirm numeric variable `newvar'
{txt} 14{com}.         if _rc di as error "Trying to gen (`newvar') as cont but (`var') is string. Please report error."
{txt} 15{com}. 
. 
. end
{txt}
{com}. 
. ////////////////////////////////
> 
. cap program drop gen_categ_str
{txt}
{com}. program define gen_categ_str
{txt}  1{com}. 
.         syntax, var(str) newvar(str)
{txt}  2{com}. 
.         cap destring `var', replace
{txt}  3{com}.         cap confirm string var `var'
{txt}  4{com}.         if !_rc gen `newvar' = `var'
{txt}  5{com}.         else {c -(}
{txt}  6{com}.                 cap decode `var', gen(`newvar')
{txt}  7{com}.                 if _rc {c -(}
{txt}  8{com}.                         noisily: di as error "Trying to gen ( `newvar' ) as categ_str but (`var') is numeric with no labels. Please specify the labels in the db."
{txt}  9{com}.                         gen `newvar' = `var'
{txt} 10{com}.                 {c )-}
{txt} 11{com}.         {c )-}
{txt} 12{com}. 
. end
{txt}
{com}. 
. ////////////////////////////////
> 
. cap program drop gen_categ_multi_bin
{txt}
{com}. program define gen_categ_multi_bin
{txt}  1{com}. 
.         syntax, var(str) newvar(str) [true(str) false(str)]
{txt}  2{com}. 
.         // Single or multiple binary
.         if !mi(`"`true'"') | !mi(`"`false'"') {c -(}
{txt}  3{com}.                 local varlist = subinstr("`var'", ",", " ", .)
{txt}  4{com}.                 local clean = subinstr(`"`true'"', ",", " ", .)
{txt}  5{com}.                 gen `newvar' = ""
{txt}  6{com}.                 foreach i in `varlist' {c -(}
{txt}  7{com}.                         local label : variable label `i'
{txt}  8{com}.                         // Conditional
.                         if regexm(`"`true'"', ">|<") local ifcmd `i' `true' & !mi(`i')
{txt}  9{com}.                         // List
.                         else {c -(}
{txt} 10{com}.                                 inlist2, obj(`i') vals(`"`clean'"')
{txt} 11{com}.                                 local ifcmd `r(cmd)'
{txt} 12{com}.                         {c )-}
{txt} 13{com}.                         if "`label'" == ""{c -(}
{txt} 14{com}.                                 // in cases when a var is missing a label, return the variable's name
.                                 replace `newvar' = `newvar' + "###" + "`i'" if (`ifcmd') & !mi(`newvar')
{txt} 15{com}.                                 replace `newvar' = "`i'" if (`ifcmd') & mi(`newvar')
{txt} 16{com}.                         {c )-}
{txt} 17{com}.                         else{c -(}
{txt} 18{com}.                                 replace `newvar' = `newvar' + "###" + `"`label'"' if (`ifcmd') & !mi(`newvar')
{txt} 19{com}.                                 replace `newvar' = `"`label'"' if (`ifcmd') & mi(`newvar')
{txt} 20{com}.                         {c )-}
{txt} 21{com}. 
.                 {c )-}
{txt} 22{com}.         {c )-}
{txt} 23{com}.         // Categorial string (single variable inputted and true/false blank
.         else if !regexm("`var'", ",") & mi(`"`true'"') & mi(`"`false'"') {c -(}
{txt} 24{com}.                 gen_categ_str, var(`var') newvar(`newvar')
{txt} 25{com}.         {c )-}
{txt} 26{com}.         else {c -(}
{txt} 27{com}.                 di as error "Something wrong with categ_multi_bin function"
{txt} 28{com}.                 STOP
{txt} 29{com}.         {c )-}
{txt} 30{com}. 
. end
{txt}
{com}. 
. ////////////////////////////////
> 
. cap program drop gen_meta
{txt}
{com}. program define gen_meta
{txt}  1{com}. 
.         syntax, [input(str)] newvar(str) [num]
{txt}  2{com}. 
.         gen `newvar' = "`input'"
{txt}  3{com}.         if !mi("`num'") cap destring `newvar', replace
{txt}  4{com}. 
. end
{txt}
{com}. 
. ////////////////////////////////
> 
. cap program drop gen_indic
{txt}
{com}. program define gen_indic
{txt}  1{com}. 
. 
.         syntax, var(str) indicator_type(str)
{txt}  2{com}. 
.         /////////////////
>         // CLEAN
.         /////////////////
> 
.         // Cap destring
.         cap confirm string variable ${c -(}`var'{c )-}
{txt}  3{com}.         if !_rc cap destring ${c -(}`var'{c )-}, replace
{txt}  4{com}. 
.         // Rename output variable if it already exists
.         cap confirm variable `var', exact
{txt}  5{com}.         if !_rc {c -(}
{txt}  6{com}.                 rename `var' `var'_orig
{txt}  7{com}.                 if "`var'" == "${c -(}`var'{c )-}" global `var' = "${c -(}`var'{c )-}_orig"
{txt}  8{com}.         {c )-}
{txt}  9{com}. 
.         /////////////////
>         // GENERATE
.         /////////////////
> 
.         // bin
.         if "`indicator_type'" == "bin" {c -(}
{txt} 10{com}.                 gen_bin, vars(`"${c -(}`var'{c )-}"') newvar(`var') true(`"${c -(}`var'_true{c )-}"') false(`"${c -(}`var'_false{c )-}"')
{txt} 11{com}.         {c )-}
{txt} 12{com}.         // cont
.         else if inlist("`indicator_type'", "cont", "num") {c -(}
{txt} 13{com}.                 if !mi(`"${c -(}`var'_missing{c )-}"') gen_cont, var(`"${c -(}`var'{c )-}"') newvar(`var') missing(`"${c -(}`var'_missing{c )-}"')
{txt} 14{com}.                 else gen_cont, var(`"${c -(}`var'{c )-}"') newvar(`var')
{txt} 15{com}.         {c )-}
{txt} 16{com}.         // categ_str
.         else if "`indicator_type'" == "categ_str" {c -(}
{txt} 17{com}.                 gen_categ_str, var(`"${c -(}`var'{c )-}"') newvar(`var')
{txt} 18{com}.         {c )-}
{txt} 19{com}.         // categ_multi_bin
.         else if "`indicator_type'" == "categ_multi_bin" {c -(}
{txt} 20{com}.                 gen_categ_multi_bin, var(`"${c -(}`var'{c )-}"') newvar(`var') true(`"${c -(}`var'_true{c )-}"') false(`"${c -(}`var'_false{c )-}"')
{txt} 21{com}.         {c )-}
{txt} 22{com}.         // meta
.         else if regexm("`indicator_type'", "meta") {c -(}
{txt} 23{com}.                 if regexm("`indicator_type'", "num") local opt num
{txt} 24{com}.                 gen_meta, input(`"${c -(}`var'{c )-}"') newvar(`var') `opt'
{txt} 25{com}.         {c )-}
{txt} 26{com}.         else {c -(}
{txt} 27{com}.                 di as error "Variable type (`indicator_type') not valid."
{txt} 28{com}.                 STOP
{txt} 29{com}.         {c )-}
{txt} 30{com}. 
. end
{txt}
{com}. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>         MAIN
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. cap program drop create_indicators
{txt}
{com}. program define create_indicators, return
{txt}  1{com}. 
. 
.         syntax, indicators(str)
{txt}  2{com}. 
. 
. // Store created indicators
. local created_indicators
{txt}  3{com}. 
. // LOOP THROUGH INDICATORS
. local i = 1
{txt}  4{com}. foreach var in `indicators' {c -(}
{txt}  5{com}. 
.         ///////////////
>         // SETUP
.         ///////////////
> 
.         // Grab metadata
.         local colnum 1
{txt}  6{com}.         foreach col in $indicators_cols {c -(}
{txt}  7{com}.                 m: st_local("`col'", indicators[`i', `colnum'])
{txt}  8{com}.                 local ++colnum
{txt}  9{com}.         {c )-}
{txt} 10{com}. 
.         ///////////////
>         // CHECKS
.         ///////////////
> 
.         if !regexm("`indicator_type'", "meta") {c -(}
{txt} 11{com}.         if !mi("`input_vars'") {c -(}
{txt} 12{com}.         // Check input_vars filled in codebook
.         input_check, statement(`input_vars')
{txt} 13{com}.         if !`r(pass)' {c -(}
{txt} 14{com}.                 noisily: di as error "Indicator Check || Missing requisite input vars (`input_vars') in codebook, passing || `topic_name' || `var' (`indicator_type')"
{txt} 15{com}.                 local ++i
{txt} 16{com}.                 continue
{txt} 17{com}.         {c )-}
{txt} 18{com}. 
.         // Check input_vars exist in dataset
.         local flag 0
{txt} 19{com}.         foreach input in `r(vars)' {c -(}
{txt} 20{com}.                 local clean = subinstr(`"${c -(}`input'{c )-}"', ",", " ", .) // Remove commas for varlists
{txt} 21{com}.                 cap confirm variable `clean'
{txt} 22{com}.                 if _rc {c -(}
{txt} 23{com}.                         noisily: di as error "Indicator Check || Requisite input vars (${c -(}`input'{c )-}) do not exist in dataset || `topic_name' || `var' (`indicator_type')"
{txt} 24{com}.                         local ++flag
{txt} 25{com}.                 {c )-}
{txt} 26{com}.         {c )-}
{txt} 27{com}.         if `flag' STOP
{txt} 28{com}.         {c )-}
{txt} 29{com}. 
.         if !mi("`input_meta'") {c -(}
{txt} 30{com}.         // Check meta_vars filled in codebook
.         input_check, statement(`input_meta')
{txt} 31{com}.         if `r(pass)' == 0 {c -(}
{txt} 32{com}.                 noisily: di as error "Indicator Check || Missing input in requisite meta vars (`input_meta'), break || `topic_name' || `var' (`indicator_type')"
{txt} 33{com}.                 STOP
{txt} 34{com}.         {c )-}
{txt} 35{com}.         {c )-}
{txt} 36{com}.         {c )-}
{txt} 37{com}. 
.         if regexm("`indicator_type'", "meta") {c -(}
{txt} 38{com}.         // If meta, check not empty
.         if mi(`"${c -(}`var'{c )-}"') {c -(}
{txt} 39{com}.                 noisily: di as error "Indicator Check || Missing meta input (`indicator_name'), passing || `topic_name' || `var' (`indicator_type')"
{txt} 40{com}.                 local ++i
{txt} 41{com}.                 continue
{txt} 42{com}.         {c )-}
{txt} 43{com}.         {c )-}
{txt} 44{com}. 
.         ///////////////
>         // GENERATE
.         ///////////////
> 
.         // Pass if custom code
.         if `code_custom' {c -(}
{txt} 45{com}.                 noisily: di as error "Generate Indicator || Custom Code || `topic_name' || `var' (`indicator_type')"
{txt} 46{com}.                 local ++i
{txt} 47{com}.                 continue
{txt} 48{com}.         {c )-}
{txt} 49{com}.         else if !mi(`"`code_blob'"') {c -(}
{txt} 50{com}.                 gen_manual, var(`var') code (`"`code_blob'"')
{txt} 51{com}.                 noisily: di as error "Generate Indicator || Code Blob || `topic_name' || `var' (`indicator_type')"
{txt} 52{com}.         {c )-}
{txt} 53{com}.         // Generate indicator
.         else {c -(}
{txt} 54{com}.         qui:    gen_indic, var(`var') indicator_type(`indicator_type')
{txt} 55{com}.                 noisily: di as error "Generate Indicator || General Processing || `topic_name' || `var' (`indicator_type')"
{txt} 56{com}.         {c )-}
{txt} 57{com}. 
.         // If it hasn't errored out by now, store created indicator
.         local created_indicators `created_indicators' `var'
{txt} 58{com}.         local ++i
{txt} 59{com}.         continue
{txt} 60{com}. 
. {c )-} // INDICATORS LOOP
{txt} 61{com}. 
.         return  local vars `created_indicators'
{txt} 62{com}. 
. end
{txt}
{com}. 
{txt}end of do-file
- {c )-}
- {c )-}
- local files : dir "`path'" files "*.do"
= local files : dir "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core/addons/" files "*.do"
- foreach file in `files' {c -(}
= foreach file in "psu_mapping.do" "collapse.do" "custom.do" "mergexy.do" "india_urban.do" "age_calculator.do" "translate_labels.do" "reshape2.do" "gbd_subnat.do" {c -(}
- if "`file'" != "run.do" do "`path'/`file'"
= if "psu_mapping.do" != "run.do" do "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core/addons//psu_mapping.do"

{com}. /***********************************************************************************************************
>  Author: Patrick Liu (pyliu@uw.edu)                                                                                                                                             
>  Date: 7/13/2015
>  Project: ubCov
>  Purpose: PSU Remapping
>                                                                                                                                                                         
> ***********************************************************************************************************/
. 
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>                                                                                                          blocks
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. cap program drop psu_check
{txt}
{com}. program define psu_check
{txt}  1{com}. 
.         
.         syntax, strata(str) psu(str)
{txt}  2{com}. 
. // Check for if psu's are misplaced (if same psu in multiple strata)
. 
.         preserve
{txt}  3{com}.                 keep `strata' `psu'
{txt}  4{com}.                 duplicates drop `strata' `psu', force
{txt}  5{com}.                 duplicates tag `psu', gen(psu_dupe)
{txt}  6{com}.                 levelsof `psu' if psu_dupe > 0, l(psu_list)
{txt}  7{com}.                 local n : list sizeof psu_list
{txt}  8{com}.                 if `n' > 0 {c -(}
{txt}  9{com}.                         tempfile temp
{txt} 10{com}.                         save `temp', replace
{txt} 11{com}.                 {c )-}
{txt} 12{com}.         restore
{txt} 13{com}. 
.         if `n' > 0 {c -(}
{txt} 14{com}.                 foreach p in `psu_list' {c -(}
{txt} 15{com}.                         psu_remap, psu(`p') psu_var(`psu') strata_var(`strata')
{txt} 16{com}.                 {c )-}
{txt} 17{com}.         {c )-}
{txt} 18{com}. 
. end
{txt}
{com}. 
. //////////////////////////////////
> 
. cap program drop psu_remap
{txt}
{com}. program define psu_remap
{txt}  1{com}. 
.         syntax, psu(str) psu_var(str) strata_var(str)
{txt}  2{com}. 
. // Find the strata with the highest frequency and remap to that
. 
.         levelsof `strata_var' if `psu_var' == `psu', l(strata_list)
{txt}  3{com}.         local largest_n 0
{txt}  4{com}.         local map_strata
{txt}  5{com}.         qui: tab `strata_var' if `psu_var' == `psu'
{txt}  6{com}.         local n `r(N)'
{txt}  7{com}.         foreach strata in `strata_list' {c -(}
{txt}  8{com}.                 qui: tab `strata_var' if `psu_var' == `psu' & `strata_var' == `strata'
{txt}  9{com}.                 if `r(N)' > `largest_n' {c -(}
{txt} 10{com}.                         local largest_n `r(N)'
{txt} 11{com}.                         local map_strata `strata'
{txt} 12{com}.                 {c )-}
{txt} 13{com}.         {c )-}
{txt} 14{com}.         replace `strata_var' = `map_strata' if `psu_var' == `psu'
{txt} 15{com}.         local pct = round(`largest_n'/`n', 0.01)
{txt} 16{com}.         di as error "Remapping psu (`psu') to strata (`map_strata') | (`pct' of obs)"
{txt} 17{com}. 
. end 
{txt}
{com}. 
{txt}end of do-file
- {c )-}
- if "`file'" != "run.do" do "`path'/`file'"
= if "collapse.do" != "run.do" do "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core/addons//collapse.do"

{com}. /***********************************************************************************************************
>  Author: Patrick Liu (pyliu@uw.edu)                                                                                                                                             
>  Date: 7/13/2015
>  Project: ubCov
>  Purpose: Collapse
>                                                                                                                                                                         
> ***********************************************************************************************************/
. 
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>                                                                                                          process blocks
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. cap program drop run_collapse
{txt}
{com}. program define run_collapse 
{txt}  1{com}. 
.         syntax, config_path(str)
{txt}  2{com}. 
.         // Pass file to R
.         tempfile input
{txt}  3{com}.         save `input', replace
{txt}  4{com}.         tempfile output
{txt}  5{com}. 
.         // Run collapse
.         !RScript --vanilla "$central_root/modules/collapse/launch.r" "collapse" $central_root `config_path' `input' `output' 1
{txt}  6{com}. 
.         // Read in collapse
.         cap import delimited using `output', clear
{txt}  7{com}.         if _rc {c -(}
{txt}  8{com}.                 di as error "Collapse || Broke in collapse code
{txt}  9{com}.                 STOP
{txt} 10{com}.         {c )-}
{txt} 11{com}. 
. end
{txt}
{com}. 
{txt}end of do-file
- {c )-}
- if "`file'" != "run.do" do "`path'/`file'"
= if "custom.do" != "run.do" do "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core/addons//custom.do"

{com}. /***********************************************************************************************************
>  Author: Patrick Liu (pyliu@uw.edu)
>  Date: 7/13/2015
>  Project: ubCov
>  Purpose: Other processes
> 
> ***********************************************************************************************************/
. 
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>                                                                                                          process blocks
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. cap program drop run_custom_code
{txt}
{com}. program define run_custom_code
{txt}  1{com}. 
.         syntax, type(str) topics(str) [survey(str)] [trace]
{txt}  2{com}. 
.         if "`type'" == "topic" local path $topics_root
{txt}  3{com}.         else if "`type'" == "survey" local path "$survey_root/`survey'"
{txt}  4{com}.         foreach topic in `topics' {c -(}
{txt}  5{com}.                 if inlist("`type'", "topic") | !inlist("${c -(}recode_`topic'{c )-}", "", ".") {c -(}
{txt}  6{com}.                         cap confirm file "`path'/code/`topic'.do"
{txt}  7{com}.                         if !_rc {c -(}
{txt}  8{com}.                                 noisily: di as error "Custom Code || `topic'"
{txt}  9{com}.                                 if !mi("`trace'") set trace on
{txt} 10{com}.                                 quietly: do "`path'/code/`topic'.do"
{txt} 11{com}.                                 if !mi("`trace'") set trace off
{txt} 12{com}.                         {c )-}
{txt} 13{com}.                 {c )-}
{txt} 14{com}.         {c )-}
{txt} 15{com}. 
. 
. end
{txt}
{com}. 
{txt}end of do-file
- {c )-}
- if "`file'" != "run.do" do "`path'/`file'"
= if "mergexy.do" != "run.do" do "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core/addons//mergexy.do"

{com}. /***********************************************************************************************************
>  Author: Patrick Liu (pyliu@uw.edu)                                                                                                                                             
>  Date: 7/13/2015
>  Project: ubCov
>  Purpose: mergexy
>                                                                                                                                                                         
> ***********************************************************************************************************/
. 
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>                                                                                                          blocks
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. cap program drop mergexy
{txt}
{com}. program define mergexy
{txt}  1{com}. 
. 
.         syntax, file(str) type(str) master(str) using(str) [rename(str) nogen gen(str) keep(str)] 
{txt}  2{com}. 
.         // Clean
.         foreach var in master using {c -(}
{txt}  3{com}.                 local `var' = subinstr("``var''", ",", " ", .)
{txt}  4{com}.         {c )-}
{txt}  5{com}. 
.         // Checks if need to rename variables to match
.         local same 0
{txt}  6{com}.         if "`master'" == "`using'" {c -(}
{txt}  7{com}.                 local mergevars `master'
{txt}  8{com}.                 local same 1
{txt}  9{com}.                 local renametxt ""
{txt} 10{com}.         {c )-}
{txt} 11{com}.         else if !mi("`rename'") {c -(}
{txt} 12{com}.                 local mergevars ``rename''
{txt} 13{com}.                 local renametxt "|| renamed `rename' vars"
{txt} 14{com}.         {c )-}
{txt} 15{com}.         else if mi("`rename'") {c -(}
{txt} 16{com}.                 local mergevars `master'
{txt} 17{com}.                 local renametxt ""
{txt} 18{com}.         {c )-}
{txt} 19{com}. 
.         // Check class of variables
.         local var_num
{txt} 20{com}.         foreach var in `master' {c -(}
{txt} 21{com}.                 cap confirm numeric variable `var'
{txt} 22{com}.                 if !_rc {c -(}
{txt} 23{com}.                         local var_num `var_num' 1
{txt} 24{com}.                 {c )-}
{txt} 25{com}.                 else {c -(}
{txt} 26{com}.                         local var_num `var_num' 0
{txt} 27{com}.                 {c )-}
{txt} 28{com}.         {c )-}
{txt} 29{com}. 
.         // Duplicates in master
.         qui {c -(}
{txt} 30{com}.                 tokenize "`type'", p(":")
{txt} 31{com}.                 if "`1'" == "1" {c -(}
{txt} 32{com}.                 duplicates tag `mergevars', gen(kittendupe)
{txt} 33{com}.                 tab kittendupe if kittendupe > 0
{txt} 34{com}.                 local n = `r(N)'/2
{txt} 35{com}.                 if `r(N)'/`=_N'/2 < 0.05 & `r(N)' != 0 {c -(}
{txt} 36{com}.                         duplicates drop `mergevars', force
{txt} 37{com}.                         noisily: di as error "Dropping duplicates (n = `n') in master (`mergevars'). Number of dupes < 5% of n_obs"
{txt} 38{com}.                 {c )-} 
{txt} 39{com}.                 else if `n' != 0 {c -(}
{txt} 40{com}.                         noisily: di as error "Merge vars in master (`master') aren't uniquely identifying. `n' duplicates out of `=_N' obs"
{txt} 41{com}.                         STOP
{txt} 42{com}.                 {c )-}
{txt} 43{com}.                 drop kittendupe
{txt} 44{com}.                 {c )-}
{txt} 45{com}.         {c )-}
{txt} 46{com}. 
.         // Open new file and rename, align types
.         preserve
{txt} 47{com}.                 load `file'
{txt} 48{com}.                 // Align variable types (prefer numeric)
.                 foreach var in `using' {c -(}
{txt} 49{com}.                         gettoken is_var_num var_num: var_num
{txt} 50{com}.                         // If master is num and using isn't, destring
.                         cap confirm numeric variable `var'
{txt} 51{com}.                         if `is_var_num' == 1 & _rc {c -(} 
{txt} 52{com}.                                 destring `var', replace
{txt} 53{com}.                         {c )-}       
{txt} 54{com}.                         // If master is string and using isnt, tostring
.                         cap confirm string variable `var'
{txt} 55{com}.                         if `is_var_num' == 0 & _rc {c -(}
{txt} 56{com}.                                 tostring `var', replace format(%50.0f)
{txt} 57{com}.                         {c )-}
{txt} 58{com}.                 {c )-}
{txt} 59{com}.                 // Rename
.                 if !`same' {c -(}    
{txt} 60{com}.                         if "`rename'" == "master" {c -(}
{txt} 61{com}.                                 // If using variables already exist, replace with *_orig
.                                 foreach var in `using' {c -(}
{txt} 62{com}.                                         cap confirm variable `var'
{txt} 63{com}.                                         if !_rc gen `var'_orig = `var' 
{txt} 64{com}.                                 {c )-}
{txt} 65{com}.                                 rename (`master') (`using')
{txt} 66{com}.                         {c )-}
{txt} 67{com}.                         else if inlist("`rename'", "using", "") {c -(}
{txt} 68{com}.                                 // If using variables already exist, replace with *_orig
.                                 foreach var in `master' {c -(}
{txt} 69{com}.                                         cap confirm variable `var'
{txt} 70{com}.                                         if !_rc gen `var'_orig = `var' 
{txt} 71{com}.                                 {c )-}
{txt} 72{com}.                                 rename (`using') (`master')
{txt} 73{com}.                         {c )-}
{txt} 74{com}.                 {c )-}
{txt} 75{com}.                 // Drop rows where missing any mergevars
.                 egen kittenmissing = rowmiss(`mergevars')
{txt} 76{com}.                 qui: tab kittenmissing if kittenmissing > 0
{txt} 77{com}.                 local n = `r(N)'
{txt} 78{com}.                 if `r(N)' > 0 {c -(}
{txt} 79{com}.                         drop if kittenmissing > 0
{txt} 80{com}.                         di as error "Dropping `r(N)' obs in using that are missing one or more of the mergevars (`mergevars')"
{txt} 81{com}.                 {c )-}
{txt} 82{com}.                 drop kittenmissing
{txt} 83{com}.                 // Duplicates in using
.                 qui {c -(}
{txt} 84{com}.                 tokenize "`type'", p(":")
{txt} 85{com}.                 if "`3'" == "1" {c -(}
{txt} 86{com}.                         duplicates tag `mergevars', gen(kittendupe)
{txt} 87{com}.                         tab kittendupe if kittendupe > 0
{txt} 88{com}.                         local n = `r(N)'/2
{txt} 89{com}.                         if `r(N)'/`=_N'/2 < 0.05 & `r(N)' != 0 {c -(}
{txt} 90{com}.                                 duplicates drop `mergevars', force
{txt} 91{com}.                                 di as error "Dropping duplicates (n = `n') in using (`mergevars'). Number of dupes < 1% of n_obs"
{txt} 92{com}.                         {c )-}
{txt} 93{com}.                         else if `n' != 0  {c -(}
{txt} 94{com}.                                 noisily: di as error "Merge vars in using (`using') aren't uniquely identifying. `n' duplicates out of `=_N' obs"
{txt} 95{com}.                                 STOP
{txt} 96{com}.                         {c )-}
{txt} 97{com}.                 drop kittendupe         
{txt} 98{com}.                 {c )-}
{txt} 99{com}.                 {c )-}
{txt}100{com}.                 qui: tempfile mergefile
{txt}101{com}.                 qui: save `mergefile', replace
{txt}102{com}.         restore
{txt}103{com}. 
.         // Merge text
.         di as error "Merging `type' master(`master') using(`using') file(`file') `renametxt'"
{txt}104{com}. 
.         // Merge
.         local options
{txt}105{com}.         if !mi("`gen'") | !mi("`keep'"){c -(}
{txt}106{com}.                 local options ,
{txt}107{com}.                 if !mi("`gen'") {c -(}
{txt}108{com}.                         if "`gen'" == "nogen" local options `options' nogen
{txt}109{com}.                         else local options `options' gen(`gen')
{txt}110{com}.                 {c )-}
{txt}111{com}.                 if !mi("`keep'") & "`keep'" != "." {c -(}
{txt}112{com}.                         local options `options' keep(`keep')
{txt}113{com}.                 {c )-}
{txt}114{com}.         {c )-}        
{txt}115{com}.         cap merge `type' `mergevars' using `mergefile' `options' 
{txt}116{com}.         if _rc merge `type' `mergevars' using `mergefile' `options' force
{txt}117{com}.         
. end
{txt}
{com}. 
. 
{txt}end of do-file
- {c )-}
- if "`file'" != "run.do" do "`path'/`file'"
= if "india_urban.do" != "run.do" do "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core/addons//india_urban.do"

{com}. /***********************************************************************************************************
>  Author: Patrick Liu (pyliu@uw.edu)
>  Date: 7/13/2015
>  Project: ubCov
>  Purpose: Other processes
> 
> ***********************************************************************************************************/
. 
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>                                                                                                          process blocks
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. 
. cap program drop india_urban
{txt}
{com}. program define india_urban
{txt}  1{com}.         qui {c -(}
{txt}  2{com}.         cap confirm variable urban admin_1_id
{txt}  3{com}.         if !_rc {c -(}
{txt}  4{com}.                 preserve
{txt}  5{com}.                 insheet using "$j/WORK/01_covariates/common/ubcov_library/extract/topics/ref/location_maps/IND_urbrur.csv", clear
{txt}  6{com}.                 tempfile temp
{txt}  7{com}.                 save `temp', replace
{txt}  8{com}.                 restore
{txt}  9{com}.                 merge m:1 admin_1_id urban using `temp', nogen keep(1 3)
{txt} 10{com}.                 noisily: di as error "GBD Subnat mapping | India U/R (admin_1_urban_id) mapped"
{txt} 11{com}.         {c )-}
{txt} 12{com}.         {c )-}
{txt} 13{com}. end
{txt}
{com}. 
{txt}end of do-file
- {c )-}
- if "`file'" != "run.do" do "`path'/`file'"
= if "age_calculator.do" != "run.do" do "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core/addons//age_calculator.do"

{com}. /***********************************************************************************************************
>  Author: Patrick Liu (pyliu@uw.edu)
>  Date: 7/13/2015
>  Project: ubCov
>  Purpose: Age calculator
> 
> ***********************************************************************************************************/
. 
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>                                                                                                          blocks
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. cap program drop age_calculator
{txt}
{com}. program define age_calculator
{txt}  1{com}. 
.         syntax, [header(str)]
{txt}  2{com}. 
. /*
> 
> Use a combination of:
> - Age in months, years
> - Birth and interview date (CMC or DMY)
> - Birth and interview DMY
> 
> to calculate age in days, months, and years.
> 
> Logical ranges are placed on each value and replaced with
> missing if outside.
> 
> To run, need globals set for:
> - `header_'birth_date/date_format/day/month/year;
> - int_date/date_format/day/month/year
> 
> */
. 
. /////////////
> // Settings
. /////////////
> 
. // Set logical limits on age in years, months; day, month, and years
. local age_year_range 0, 120
{txt}  3{com}. local age_month_range 0, 1440
{txt}  4{com}. local age_day_range 0, 43400
{txt}  5{com}. local day_range 1, 31
{txt}  6{com}. local month_range 1, 12
{txt}  7{com}. local year : word 3 of `c(current_date)'
{txt}  8{com}. local year_range 1900, `year'
{txt}  9{com}. 
. // Set var local names
. if !mi("`header'") local header `header'_
{txt} 10{com}. else local header ""
{txt} 11{com}. 
. local age_year `header'age_year
{txt} 12{com}. local age_month `header'age_month
{txt} 13{com}. local age_day `header'age_day
{txt} 14{com}. 
. local age_vars `age_year' `age_month' `age_day'
{txt} 15{com}. 
. local birth_date `header'birth_date
{txt} 16{com}. local birth_day `header'birth_day
{txt} 17{com}. local birth_month `header'birth_month
{txt} 18{com}. local birth_year `header'birth_year
{txt} 19{com}. 
. local birth_vars `birth_day' `birth_month' `birth_year'
{txt} 20{com}. 
. local int_date int_date
{txt} 21{com}. local int_day int_day
{txt} 22{com}. local int_month int_month
{txt} 23{com}. local int_year int_year
{txt} 24{com}. 
. local int_vars `int_day' `int_month' `int_year'
{txt} 25{com}. 
. 
. ////////////////
> // Create vars
. ////////////////
> 
. // Parse age_categorical
.         // Split age range and take mean
.         local var `header'age_categorical
{txt} 26{com}.         if !mi("${c -(}`var'{c )-}") & !mi("${c -(}`var'_type{c )-}") & !mi("${c -(}`var'_parse{c )-}")  {c -(}
{txt} 27{com}.                 // Decode if necessary
.                 cap decode `var', gen(kittenage)
{txt} 28{com}.                 if _rc gen kittenage = `var'
{txt} 29{com}.                 // Split using parser
.                 split kittenage, p(`"${c -(}`var'_parse{c )-}"') limit(2)
{txt} 30{com}.                 // Clean vars
.                 local vars
{txt} 31{com}.                 foreach i in `r(varlist)' {c -(}
{txt} 32{com}.                         gen `i'_clean = real(regexs(1)) if regexm(`i',"([0-9]+)")
{txt} 33{com}.                         local vars `vars' `i'_clean
{txt} 34{com}.                 {c )-}
{txt} 35{com}.                 // Take mean of start and end
.                 di "`var'"
{txt} 36{com}.                 local new "`header'age_${c -(}`var'_type{c )-}"
{txt} 37{com}.                 cap confirm variable `new'
{txt} 38{com}.                 if _rc egen `new' = rowmean(`vars')
{txt} 39{com}.                 else {c -(}
{txt} 40{com}.                         egen kittenageclean = rowmean(`vars')
{txt} 41{com}.                         replace `new' kittenageclean if mi(`new')
{txt} 42{com}.                 {c )-}
{txt} 43{com}.                 // Clean
.                 drop kittenage*
{txt} 44{com}.                 di as error "Age Calculator || Split ${c -(}`var'{c )-} and took mean of range"
{txt} 45{com}.         {c )-}
{txt} 46{com}.         else if !mi("${c -(}`var'{c )-}") & mi("${c -(}`var'_type{c )-}") & mi("${c -(}`var'_parse{c )-}")  {c -(}
{txt} 47{com}.                 di as error "Age Calculator || Copied ${c -(}`var'{c )-} into `header'age_categorical"
{txt} 48{com}.         {c )-}
{txt} 49{com}. 
. // Parse interview and birth date variables into DMY
. foreach item in `header'birth int {c -(}
{txt} 50{com}.         local var `item'_date
{txt} 51{com}.         if !mi("${c -(}`var'{c )-}"){c -(}
{txt} 52{com}.         // Dates given as CMC
.         if lower("${c -(}`var'_format{c )-}") == "cmc" {c -(}
{txt} 53{com}.                 // Set formuli
.                 local formula_year 1900 + floor((${c -(}`var'{c )-} - 1)/12)
{txt} 54{com}.                 local formula_month ${c -(}`var'{c )-} - 12*(`item'_year - 1900)
{txt} 55{com}.                 // Generate year and month
.                 foreach i in year month {c -(}
{txt} 56{com}.                         cap confirm variable `item'_`i'
{txt} 57{com}.                         if _rc gen `item'_`i' = `formula_`i''
{txt} 58{com}.                         else  replace `item'_`i' = `formula_`i'' if !mi(`item'_`i')
{txt} 59{com}.                 {c )-}
{txt} 60{com}.                 di as error "Age Calculator || Split `item' from `item'_date (CMC)"
{txt} 61{com}.         {c )-}
{txt} 62{com}.         // Dates given as DMY
.         // Uses utility function date_split to split *_date -> *_day/month/year
.         else {c -(}
{txt} 63{com}.                 cap confirm variable `var'
{txt} 64{com}.                 if _rc {c -(}
{txt} 65{com}.                 gen `var' = ${c -(}`var'{c )-}
{txt} 66{com}.                 date_split `var', format("${c -(}`var'_format{c )-}") newstem(`item')
{txt} 67{com}.                 di as error "Age Calculator || Split `item' from `item'_date (DMY)"
{txt} 68{com}.                 {c )-}
{txt} 69{com}.         {c )-}
{txt} 70{com}.         {c )-}
{txt} 71{com}. {c )-}
{txt} 72{com}. 
. // Set the date variables
. foreach var in `age_vars' `birth_vars' `int_vars' {c -(}
{txt} 73{com}.         if !mi("${c -(}`var'{c )-}") {c -(}
{txt} 74{com}.                 // Destring
.                 cap destring ${c -(}`var'{c )-}, replace force
{txt} 75{com}.                 // Check that its numeric
.                 cap confirm variable ${c -(}`var'{c )-}
{txt} 76{com}.                 // Replace the var if it already exists
.                 cap confirm variable `var'
{txt} 77{com}.                 if !_rc replace `var' = ${c -(}`var'{c )-} if !mi(`var')
{txt} 78{com}.                 else gen `var' = ${c -(}`var'{c )-}
{txt} 79{com}.                 // Set missings
.                 if !mi("${c -(}`var'_missing{c )-}") {c -(}
{txt} 80{com}.                         // Conditional
.                         if regexm("${c -(}`var'_missing{c )-}", ">|<") replace `newvar' = . if `var' ${c -(}`var'_missing{c )-}
{txt} 81{com}.                         // List
.                         else {c -(}
{txt} 82{com}.                                 local clean = subinstr(`"${c -(}`var'_missing{c )-}"', ",", " ", .)
{txt} 83{com}.                                 inlist2, obj(`var') vals(`" `clean' "')
{txt} 84{com}.                                 replace `var' = . if `r(cmd)'
{txt} 85{com}.                         {c )-}
{txt} 86{com}.                 {c )-}
{txt} 87{com}.         {c )-}
{txt} 88{com}. {c )-}
{txt} 89{com}. 
. ////////////////
> // Adjust vars
. ////////////////
> 
. // If need to adjust months
. if "$month_adjust" != "" {c -(}
{txt} 90{com}.         // Note that this does not work well with inputs > 12 and < -12. Please use year_adjust for those.
.         foreach var in "birth_" "int_" {c -(}
{txt} 91{com}.                 cap confirm variable `var'month
{txt} 92{com}.                 if !_rc {c -(}
{txt} 93{com}.                         replace `var'month = `var'month + $month_adjust
{txt} 94{com}. 
.                         //deal with adjustments that total > 12 months
.                         replace `var'year = `var'year + 1 if `var'month > 12
{txt} 95{com}.                         replace `var'month = `var'month - 12 if `var'month > 12
{txt} 96{com}. 
.                         //deal with adjustments that total less than 1 month
.                         replace `var'year = `var'year - 1 if `var'month < 1
{txt} 97{com}.                         replace `var'month = `var'month + 12 if `var'month < 1
{txt} 98{com}.                         {c )-}
{txt} 99{com}.                 di as error "Age Calculator || Month adjust | (`var'month)"
{txt}100{com}.         {c )-}
{txt}101{com}. {c )-}
{txt}102{com}. 
. // If need to adjust years
. if "$year_adjust" != "" {c -(}
{txt}103{com}.         foreach var in `birth_year' `int_year' {c -(}
{txt}104{com}.                 cap confirm variable `var'
{txt}105{com}.                 if !_rc replace `var' = $year_adjust + `var'
{txt}106{com}.                 di as error "Age Calculator || Manual year adjust (adjust: $year_adjust) | (`var')"
{txt}107{com}.         {c )-}
{txt}108{com}. {c )-}
{txt}109{com}. 
. // If need to adjust years because given as two digits
. foreach var in `birth_year' `int_year' {c -(}
{txt}110{com}.         cap confirm variable `var'
{txt}111{com}.         if !_rc {c -(}
{txt}112{com}.                 qui: sum `var' if !mi(`var')
{txt}113{com}.                 if `r(max)' < 100 {c -(}
{txt}114{com}.                         if $year_end < 2000 replace `var' = 1900 + `var'
{txt}115{com}.                         else replace `var' = cond(`var' <= mod($year_end, 100), 2000 + `var', 1900 + `var')
{txt}116{com}.                 {c )-}
{txt}117{com}.         di as error "Age Calculator || Two digit year adjust | (`var')"
{txt}118{com}.         {c )-}
{txt}119{com}. {c )-}
{txt}120{com}. 
. // If missing interview date, use the ceiling of the midpoint of year_start and year_end
. cap confirm variable `int_year'
{txt}121{com}. local cmd `int_year' = ceil(($year_start + $year_end)/2)
{txt}122{com}. if _rc {c -(}
{txt}123{com}.         gen `cmd'
{txt}124{com}.         di as error "Age Calculator || Imputing interview year"
{txt}125{com}. {c )-}
{txt}126{com}. else {c -(}
{txt}127{com}.         cap assert !mi(`int_year')
{txt}128{com}.         if _rc di as error "Age Calculator || Imputing interview year"
{txt}129{com}.         replace `cmd' if mi(`int_year') | !inrange(`int_year', `year_range')
{txt}130{com}. {c )-}
{txt}131{com}. 
. // Set logical range limits on dates
. foreach var in `age_vars' `birth_vars' `int_vars' {c -(}
{txt}132{com}.         cap confirm variable `var'
{txt}133{com}.         if !_rc {c -(}
{txt}134{com}.         // Get the range local associated with item
.         str_split `var', p("_")
{txt}135{com}.         local n `r(N)'
{txt}136{com}.         local item `r(_`n')'
{txt}137{com}.         if regexm("`var'", "age") local range `age_`item'_range'
{txt}138{com}.         else local range ``item'_range'
{txt}139{com}.         // Tabulate if not in range
.         tab `var' if !inrange(`var', `range') & `var' != .
{txt}140{com}.         local n = `r(N)'
{txt}141{com}.         // If more than 10% missing throw warning
.         if `n'/`=_N' > 0.10 {c -(}
{txt}142{com}.                 di as error "Age Calculator || More than 10% (`n'/`=_N') have birth or interview info (`var') out of range (`range'). Check variable"
{txt}143{com}.                 sleep 3000
{txt}144{com}.         {c )-}
{txt}145{com}.         // Replace with missing if not in range
.         replace `var' = . if !inrange(`var', `range')
{txt}146{com}.         {c )-}
{txt}147{com}. {c )-}
{txt}148{com}. 
. //////////////////
> // Calculate age
. //////////////////
> 
. // Age in days
. // Req'd: birth and interview (day month and year)
. cap confirm variable `birth_day' `birth_month' `birth_year' `int_day' `int_month' `int_year'
{txt}149{com}. if !_rc {c -(}
{txt}150{com}.         gen `age_day' = mdy(`int_month', `int_day', `int_year') - mdy(`birth_month', `birth_day', `birth_year')
{txt}151{com}.         di as error "Age Calculator || Generated age in days (from birth and int day/month/year) | (`age_day')"
{txt}152{com}. {c )-}
{txt}153{com}. 
. // Age in months
. // Create through birth and interview (day month and year)
. cap confirm variable `birth_day' `birth_month' `birth_year' `int_day' `int_month' `int_year'
{txt}154{com}. if !_rc {c -(}
{txt}155{com}.         cap confirm variable `age_month'
{txt}156{com}.         local cmd `age_month' = mofd(mdy(`int_month', `int_day', `int_year')) - mofd(mdy(`birth_month', `birth_day', `birth_year'))
{txt}157{com}.         if _rc gen `cmd'
{txt}158{com}.         else replace `cmd' if mi(`age_month')
{txt}159{com}.         di as error "Age Calculator || Generated age in months (from birth and int day/month/year) | (`age_month')"
{txt}160{com}. {c )-}
{txt}161{com}. // Create through birth and interview (month and year)
. // Req'd: birth and interview (month and year)
. cap confirm variable `birth_month' `birth_year' `int_month' `int_year'
{txt}162{com}. if !_rc {c -(}
{txt}163{com}.         cap confirm variable `age_month'
{txt}164{com}.         local cmd `age_month' = (12*(`int_year' - 1900) + `int_month') - (12*(`birth_year' - 1900) + `birth_month')
{txt}165{com}.         if _rc gen `cmd'
{txt}166{com}.         else replace `cmd' if mi(`age_month')
{txt}167{com}.         di as error "Age Calculator || Generated age in months (from birth and int month/year) | (`age_month')"
{txt}168{com}. {c )-}
{txt}169{com}. 
. // Age in years
. // Create through age in months
. // Req'd: age_month
. cap confirm variable `age_month'
{txt}170{com}. if !_rc {c -(}
{txt}171{com}.         cap confirm variable `age_year'
{txt}172{com}.         local cmd `age_year' = round(`age_month'/12, 0.01)
{txt}173{com}.         if _rc gen `cmd'
{txt}174{com}.         else replace `cmd' if mi(`age_year')
{txt}175{com}.         di as error "Age Calculator || Generated age in years (from age in months) | (`age_year')"
{txt}176{com}. {c )-}
{txt}177{com}. // Create through birth and interview (year)
. // Req'd: birth and interview (year)
. cap confirm variable `birth_year' `int_year'
{txt}178{com}. if !_rc {c -(}
{txt}179{com}.         cap confirm variable `age_year'
{txt}180{com}.         local cmd `age_year' = `int_year' - `birth_year'
{txt}181{com}.         if _rc gen `cmd'
{txt}182{com}.         else replace `cmd' if mi(`age_year')
{txt}183{com}.         di as error "Age Calculator || Generated age in years (from birth and int year) | (`age_year')"
{txt}184{com}. {c )-}
{txt}185{com}. 
. //////////////////////////////////
> // Validation
. //////////////////////////////////
> 
. // Make sure ages arent < 0
. foreach var in `age_vars' {c -(}
{txt}186{com}.         cap confirm variable `var'
{txt}187{com}.         if !_rc {c -(}
{txt}188{com}.                 tab `var' if `var' < 0
{txt}189{com}.                 if `r(N)' != 0 & `r(N)'/`=_N' < 0.02 {c -(}
{txt}190{com}.                         replace `var' = . if `var' < 0
{txt}191{com}.                         di as error "Age Calculator || Negative age values for (`var') for `r(N)' rows which is less than 2% of sample. Setting missing."
{txt}192{com}.                 {c )-}
{txt}193{com}.                 else if `r(N)' != 0 {c -(}
{txt}194{com}.                         di as error "Age Calculator || Negative ages for `r(N)' rows. Check age variables to make sure adjustment isn't needed."
{txt}195{com}.                         STOP
{txt}196{com}.                 {c )-}
{txt}197{com}.         {c )-}
{txt}198{com}. {c )-}
{txt}199{com}. 
. end
{txt}
{com}. 
{txt}end of do-file
- {c )-}
- if "`file'" != "run.do" do "`path'/`file'"
= if "translate_labels.do" != "run.do" do "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core/addons//translate_labels.do"

{com}. /***********************************************************************************************************
>  Author: Patrick Liu (pyliu@uw.edu)                                                                                                                                             
>  Date: 7/13/2015
>  Project: ubCov
>  Purpose: Translate labels
>                                                                                                                                                                         
> ***********************************************************************************************************/
. 
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>                                                                                                          
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. cap program drop translate_py
{txt}
{com}. program define translate_py
{txt}  1{com}. 
.         syntax, [in(str)] [out(str)]
{txt}  2{com}.         keep if _n == 1
{txt}  3{com}.         tempfile temp
{txt}  4{com}.         saveold `temp', replace
{txt}  5{com}.         tempfile out
{txt}  6{com}.         saveold `tempout', replace
{txt}  7{com}.         !python "$extract_core/addons/translate.py" `temp' `tempout'
{txt}  8{com}.         import delimited using `tempout', clear varnames(1)
{txt}  9{com}. 
. end
{txt}
{com}. 
. cap program drop set_labels
{txt}
{com}. program define set_labels
{txt}  1{com}. 
.         syntax, file(str)
{txt}  2{com}. 
. end
{txt}
{com}. 
. //cap program drop translate_labels
. //program define translate_labels
. 
.         
. 
. 
{txt}end of do-file
- {c )-}
- if "`file'" != "run.do" do "`path'/`file'"
= if "reshape2.do" != "run.do" do "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core/addons//reshape2.do"

{com}. /***********************************************************************************************************
>  Author: Patrick Liu (pyliu@uw.edu)
>  Date: 7/13/2015
>  Project: ubCov
>  Purpose: Reshape2
> 
> ***********************************************************************************************************/
. 
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
> 
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. 
. ////////////////////////////////////////
> 
. /*
> 
>         For reshaping wide to long (eg WM to CH modules)
> 
>         Two methods:
>                 1.) Parallel (by stem)
>                         - Useful for if have lots of stems
>                         - Finds max number of stems, iterates through, renames, and appends
>                 2.) Megastem
>                         - Useful if few variables but lots of leaves
>                         - Uses expand and replace
> 
> */
. 
. capture program drop insert_stems
{txt}
{com}. program define insert_stems, return
{txt}  1{com}. 
.         local varlist
{txt}  2{com}.         foreach var of varlist * {c -(}
{txt}  3{com}.                         if regexm("`var'", "[0-9][0-9]$") {c -(}
{txt}  4{com}.                                 local num = regexs(0)
{txt}  5{com}.                                 local new_name = regexr("`var'", "[0-9][0-9]$", "_`num'")
{txt}  6{com}.                                 rename `var' `new_name'
{txt}  7{com}.                                 local varlist `varlist' `var'
{txt}  8{com}.                         {c )-}
{txt}  9{com}.         {c )-}
{txt} 10{com}. 
.         if !mi("`varlist'") di as error "Reshape | Inserted stems in vars : (`varlist')"
{txt} 11{com}. 
. end
{txt}
{com}. 
. 
. capture program drop reshape2
{txt}
{com}. program define reshape2, return
{txt}  1{com}. 
.         syntax, id(string) newid(string) [megastem time nodrop threshold(str) keep(str)]
{txt}  2{com}. 
.         ///////////////
>         // Options
.         ///////////////
> 
.         local time 1
{txt}  3{com}. 
.         if mi("`megastem'") local method parallel
{txt}  4{com}.         else local method megastem
{txt}  5{com}. 
.         local method parallel
{txt}  6{com}. 
.         if !mi("`time'") {c -(}
{txt}  7{com}.                 timer clear 1
{txt}  8{com}.                 timer on 1
{txt}  9{com}.         {c )-}
{txt} 10{com}. 
.         if mi("`nodrop'") local nodrop 0
{txt} 11{com}.         else local nodrop 1
{txt} 12{com}. 
.         // Default drop threshold is 1%
.         if mi("`threshold'") local threshold 0.01
{txt} 13{com}. 
.         ///////////////
>         // Setup
.         ///////////////
> 
.         // Deparse comms
.         if regexm("`id'", ",") local id = subinstr("`id'", ",", "", .)
{txt} 14{com}. 
.         // Duplicates tag, drop if less than 1%
.         if `nodrop' == 0 {c -(}
{txt} 15{com}.         duplicates tag `id', gen(kittendupe)
{txt} 16{com}.         tab kittendupe if kittendupe > 0
{txt} 17{com}.         if `r(N)' > 0 {c -(}
{txt} 18{com}.         if `r(N)'/`=_N' < `threshold' {c -(}
{txt} 19{com}.                 drop if kittendupe > 0
{txt} 20{com}.                 di as error "Trying to reshape but have duplicates in id. Number of duplicates (`r(N)') less than 1% of sample size, dropping these observations"
{txt} 21{com}.         {c )-}
{txt} 22{com}.         else {c -(}
{txt} 23{com}.                 di as error "More than 1% of samples are duplicated by id. Check id"
{txt} 24{com}.                 STOP
{txt} 25{com}.         {c )-}
{txt} 26{com}.         {c )-}
{txt} 27{com}.         drop kittendupe
{txt} 28{com}.         {c )-}
{txt} 29{com}. 
.         // Count number of missings
.         egen kittenmissing = rowmiss(`id')
{txt} 30{com}.         tab kittenmissing if kittenmissing > 0
{txt} 31{com}.         if `r(N)' > 0 {c -(}
{txt} 32{com}.         if `r(N)'/`=_N' < `threshold' {c -(}
{txt} 33{com}.                 drop if kittenmissing > 0
{txt} 34{com}.                 di as error "Trying to reshape but have missings in id vars. Number of missings (`r(N)') less than 1% of sample size, dropping these observations"
{txt} 35{com}.         {c )-}
{txt} 36{com}.         else {c -(}
{txt} 37{com}.                 di as error "More than 1% are have missings in id vars. Check id"
{txt} 38{com}.                 STOP
{txt} 39{com}.         {c )-}
{txt} 40{com}.         {c )-}
{txt} 41{com}.         drop kittenmissing
{txt} 42{com}. 
. 
.         // Assert that id uniquely identifies and isn't missing
.         isid `id'
{txt} 43{com}. 
.         // Find vars to reshape
.         quietly: ds
{txt} 44{com}.         local vars `r(varlist)'
{txt} 45{com}.         // Get list of vars that have stems (of the format var_[0-9]*)
.         local reshapevars // list of all vars needed to be reshaped
{txt} 46{com}.         local stems // list of stems
{txt} 47{com}.         local leaves // list of leaves
{txt} 48{com}.         foreach var in `vars' {c -(}
{txt} 49{com}.                 if regexm("`var'", "_[0-9]*$$") {c -(}
{txt} 50{com}.                         // Save stems
.                         local var_stem = regexr("`var'",  "_[0-9]*$", "")
{txt} 51{com}.                         local stems `stems' `var_stem'
{txt} 52{com}.                         // Save leaves (remove leading 0)
.                         if regexm("`var'", "_[0-9]*$") {c -(}
{txt} 53{com}.                                 local var_leaf = subinstr(regexs(0), "_", "", .)
{txt} 54{com}.                                 local var_leaf = regexr("`var_leaf'", "^0", "") // Remove leading 0
{txt} 55{com}.                                 cap rename `var_stem'_0`var_leaf' `var_stem'_`var_leaf' // Rename leading 0
{txt} 56{com}.                         {c )-}
{txt} 57{com}.                         local leaves `leaves' `var_leaf'
{txt} 58{com}.                         // Save vars
.                         local reshapevars `reshapevars' `var_stem'_`var_leaf'
{txt} 59{com}.                         if !mi("`leafvars_`var_leaf''") {c -(}
{txt} 60{com}.                                 local leafvars_`var_leaf' `leafvars_`var_leaf'' `var_stem'_`var_leaf'
{txt} 61{com}.                         {c )-}
{txt} 62{com}.                         else {c -(}
{txt} 63{com}.                                 local leafvars_`var_leaf' `var_stem'_`var_leaf'
{txt} 64{com}.                         {c )-}
{txt} 65{com}.                 {c )-}
{txt} 66{com}.         {c )-}
{txt} 67{com}. 
.         // Non-reshape vars (need to update names incase removed leading 0)
.         quietly: ds
{txt} 68{com}.         local vars `r(varlist)'
{txt} 69{com}.         local nonreshapevars : list vars - reshapevars
{txt} 70{com}. 
.         // Unique stems
.         local unique_stems : list uniq stems
{txt} 71{com}. 
.         // Find max number of unique leaves
.         local unique_leaves : list uniq leaves
{txt} 72{com}.         local max : list sizeof unique_leaves
{txt} 73{com}. 
. 
.         /////////////////////////////
>         // Reshape method : parallel
.         /////////////////////////////
> 
.         if "`method'" == "parallel" {c -(}
{txt} 74{com}.         qui {c -(}
{txt} 75{com}.         tempfile full
{txt} 76{com}.         save `full', replace
{txt} 77{com}. 
.                 // Keep nonreshapevars
.                 keep `id' `nonreshapevars'
{txt} 78{com}.                 tempfile meta
{txt} 79{com}.                 save `meta', replace
{txt} 80{com}. 
.                 // Keep reshape
.                 use `full', clear
{txt} 81{com}.                 keep `id' `reshapevars'
{txt} 82{com}.                 tempfile reshape
{txt} 83{com}.                 save `reshape', replace
{txt} 84{com}. 
.                 // Reshape
.                 local count = 1
{txt} 85{com}.                 foreach leaf in `unique_leaves' {c -(}
{txt} 86{com}.                         // Load
.                         use `id' `leafvars_`leaf'' using `reshape', clear
{txt} 87{com}.                         local pass 0
{txt} 88{com}. 
.                         // Ignore leaf if all missing, skips missing check if
.                         local nvars : word count `leafvars_`leaf''
{txt} 89{com}.                         foreach var in `leafvars_`leaf'' {c -(}
{txt} 90{com}.                                 cap assert mi(`var')
{txt} 91{com}.                                 if _rc {c -(}
{txt} 92{com}.                                         local pass 1
{txt} 93{com}.                                         continue, break
{txt} 94{com}.                                 {c )-}
{txt} 95{com}.                         {c )-}
{txt} 96{com}.                         if `pass' == 0 {c -(}
{txt} 97{com}.                                 di as error "Passing *_`leaf' because all missing"
{txt} 98{com}.                         {c )-}
{txt} 99{com}. 
.                         // Otherwise reshape
.                         if `pass' == 1 {c -(}
{txt}100{com}.                         // Rename
.                         rename *_`leaf' *
{txt}101{com}.                         // If keep identifier provided
.                         if !mi("`keep'") {c -(}
{txt}102{com}.                                 cap confirm var `keep'
{txt}103{com}.                                 if !_rc keep if !mi(`keep')
{txt}104{com}.                         {c )-}
{txt}105{com}.                         // Gen id
.                         gen `newid' = `leaf'
{txt}106{com}.                         if `count' == 1 {c -(}
{txt}107{com}.                                 tempfile long
{txt}108{com}.                                 save `long', replace
{txt}109{com}.                         {c )-}
{txt}110{com}.                         else {c -(}
{txt}111{com}.                                 append using `long', nolabel force
{txt}112{com}.                                 save `long', replace
{txt}113{com}.                         {c )-}
{txt}114{com}.                         local ++count
{txt}115{com}.                         {c )-}
{txt}116{com}.                 {c )-}
{txt}117{com}. 
. 
.                 // Merge on nonreshape
.                 use `long', clear
{txt}118{com}.                 merge m:1 `id' using `meta', nogen
{txt}119{com}.         {c )-}
{txt}120{com}.         {c )-}
{txt}121{com}. 
. 
.         //////////////////////////////
>         // Reshape method : megastem
.         //////////////////////////////
> 
.         if "`method'" == "megastem" {c -(}
{txt}122{com}.                 // Expand and set ids
.                 expand `max'
{txt}123{com}.                 bysort `id': gen `newid' = _n
{txt}124{com}.                 // Reshape
.                 foreach stem in `unique_stems' {c -(}
{txt}125{com}.                         local count 1
{txt}126{com}.                         foreach leaf in `unique_leaves' {c -(}
{txt}127{com}.                                 // Set variable and value labels using first var
.                                 if `count' == 1 {c -(}
{txt}128{com}.                                         cap confirm numeric variable `stem'_`leaf'
{txt}129{com}.                                         if !_rc {c -(}
{txt}130{com}.                                                 gen `stem' = .
{txt}131{com}.                                         {c )-}
{txt}132{com}.                                         else {c -(}
{txt}133{com}.                                                 cap confirm string variable `stem'_`leaf'
{txt}134{com}.                                                 if !_rc {c -(}
{txt}135{com}.                                                         gen `stem' = ""
{txt}136{com}.                                                 {c )-}
{txt}137{com}.                                         {c )-}
{txt}138{com}. 
.                                         _crcslbl `stem' `stem'_`leaf'
{txt}139{com}.                                         label values `stem' `: value label `stem'_`leaf''
{txt}140{com}.                                 {c )-}
{txt}141{com}.                                 cap confirm variable `stem'_`leaf'
{txt}142{com}.                                 qui: if !_rc replace `stem' = `stem'_`leaf' if `newid' == `leaf'
{txt}143{com}.                                 local ++count
{txt}144{com}.                         {c )-}
{txt}145{com}. 
.                 {c )-}
{txt}146{com}. 
.                 // Remove the wide vars
.                 drop `reshapevars'
{txt}147{com}.         {c )-}
{txt}148{com}. 
. 
.         if !mi("`time'") {c -(}
{txt}149{com}.                 timer off 1
{txt}150{com}.                 di as error "Reshape time:"
{txt}151{com}.                 timer list 1
{txt}152{com}.         {c )-}
{txt}153{com}. 
.         return local stems `unique_stems'
{txt}154{com}.         return local leaves `unique_leaves'
{txt}155{com}. 
. end
{txt}
{com}. 
{txt}end of do-file
- {c )-}
- if "`file'" != "run.do" do "`path'/`file'"
= if "gbd_subnat.do" != "run.do" do "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core/addons//gbd_subnat.do"

{com}. /***********************************************************************************************************
>  Author: Patrick Liu (pyliu@uw.edu)                                                                                                                                             
>  Date: 7/13/2015
>  Project: ubCov
>  Purpose: GBD Subnationals
>                                                                                                                                                                         
> ***********************************************************************************************************/
. 
. 
. /* /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
>                                                                                                          blocks
> ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */
. 
. // Location settings
. global gbd_subnat_locs BRA CHN GBR GBR_4749 IND IDN JPN KEN MEX SWE ZAF SAU USA RUS UKR NZL NOR IRN ETH ITA NGA PAK PHL POL 
{txt}
{com}. global gbd_subnat_spec TEMP
{txt}
{com}. local a $gbd_subnat_locs
{txt}
{com}. local b $gbd_subnat_spec
{txt}
{com}. local gbd_subnat_nospec : list a - b
{txt}
{com}. global gbd_subnat_nospec `gbd_subnat_nospec'
{txt}
{com}. 
. //////////////////////////////////////////////////
> 
. cap program drop map_gbd_subnat
{txt}
{com}. program define map_gbd_subnat
{txt}  1{com}. 
.         syntax, [bypass_map]
{txt}  2{com}. 
. // Map on gbd ihme_loc_id for subnationals using 
. qui {c -(}
{txt}  3{com}. 
.         // Settings
.                 // Set different keys based on ihme_loc_id
.                 inlist2, obj($ihme_loc_id) vals($gbd_subnat_spec) string
{txt}  4{com}.                 if `r(cmd)' local key ihme_loc_id year_start
{txt}  5{com}.                 else local key ihme_loc_id
{txt}  6{com}.                 // Set vars trying to erge based on ihme_loc_id
.                 if "$ihme_loc_id" == "GBR" local vars admin_1 admin_2
{txt}  7{com}.                         else if "$ihme_loc_id" == "KEN" local vars admin_1 admin_2
{txt}  8{com}.                         else local vars admin_1
{txt}  9{com}.                 // Adjust vars based on presence in dataset and if its string
.                 local clean_vars
{txt} 10{com}.                 foreach var in `vars' {c -(}
{txt} 11{com}.                         cap confirm string var `var'
{txt} 12{com}.                         if !_rc {c -(}
{txt} 13{com}.                                 local clean_vars `clean_vars' `var'
{txt} 14{com}.                                 replace `var' = subinstr(`var', "`=char(130)'", "",.) // hotfix
{txt} 15{com}.                         {c )-}
{txt} 16{com}.                 {c )-}
{txt} 17{com}.                 local vars `clean_vars'
{txt} 18{com}.                 local n : list sizeof vars
{txt} 19{com}. 
.         tempfile data
{txt} 20{com}.         save `data', replace
{txt} 21{com}. 
.         if `n' > 0 {c -(}    
{txt} 22{com}.         // Pull and clean gbd_subnat_map
.                 gs_db, obj(gbd_subnat_map)
{txt} 23{com}.                 // Be evil and don't let anyone use this until things are fully mapped
.                 qui: tab ihme_loc_id if mi(location_name_short_ihme_loc_id)
{txt} 24{com}.                 if `r(N)' > 0 {c -(}
{txt} 25{com}.                         di as error "Incomplete maps in (https://docs.google.com/spreadsheets/d/1Jxls67NnwB3Fw0Qvw2XUyKQxNcrXo1Lbe0UMEy-3yvI/edit#gid=0)"
{txt} 26{com}.                         di as error "All values must be mapped to continue"
{txt} 27{com}.                         STOP
{txt} 28{com}.                 {c )-}
{txt} 29{com}.                 // Split location_name_short_ihme_loc_id
.                 rename location_name_short_ihme_loc_id kittens
{txt} 30{com}.                 split kittens, p("|")
{txt} 31{com}.                 rename kittens1 location_name_short
{txt} 32{com}.                 rename kittens2 subnat_loc_id
{txt} 33{com}.                 drop kittens
{txt} 34{com}.                 // Keep mapped values
.                 keep if !mi(location_name_short)
{txt} 35{com}.                 // Other cleaning
.                 destring *, replace
{txt} 36{com}.                 tempfile map
{txt} 37{com}.                 save `map', replace
{txt} 38{com}. 
.         // Merge onto dataset
.         foreach var in `vars' {c -(}
{txt} 39{com}.                 // Prep map
.                 use `map', clear
{txt} 40{com}.                 keep if indicator ==  "`var'"
{txt} 41{com}.                 keep if ihme_loc_id == "$ihme_loc_id"
{txt} 42{com}.                 keep `key' value location_name_short subnat_loc_id
{txt} 43{com}.                 rename value `var'
{txt} 44{com}.                 rename subnat_loc_id `var'_id
{txt} 45{com}.                 rename location_name_short `var'_mapped
{txt} 46{com}.                 tempfile map_clean
{txt} 47{com}.                 save `map_clean'
{txt} 48{com}.                 // Prep data
.                 use `data', clear
{txt} 49{com}.                 replace `var' = trim(lower(`var'))
{txt} 50{com}.                 merge m:1 `key' `var' using `map_clean', gen(kittenmerge) keep(1 3)
{txt} 51{com}.                 // Store unmapped values
.                 levelsof `var' if mi(`var'_id) & kittenmerge == 1, l(new_`var')
{txt} 52{com}.                 drop kittenmerge
{txt} 53{com}.                 save `data', replace
{txt} 54{com}.                 di as error "GBD Subnat mapping | (`var') mapped"
{txt} 55{com}.         {c )-}
{txt} 56{com}. 
.         // Store unmerged values
.         local continue 0
{txt} 57{com}.         foreach var in `vars' {c -(}
{txt} 58{com}.                 local n : list sizeof new_`var'
{txt} 59{com}.                 if `n' > 0 local continue 1
{txt} 60{com}.         {c )-}
{txt} 61{com}.         if `continue' {c -(}
{txt} 62{com}.                 // Create new frame
.                 clear
{txt} 63{com}.                 set obs 1
{txt} 64{com}.                 foreach var in `vars' {c -(}
{txt} 65{com}.                         gen value_`var' = ""
{txt} 66{com}.                         local n : list sizeof new_`var'
{txt} 67{com}.                         if `n' > _N set obs `n'
{txt} 68{com}.                         forvalues i = 1/`n' {c -(}
{txt} 69{com}.                                 local word : word `i' of `new_`var''
{txt} 70{com}.                                 replace value_`var' = "`word'" if _n == `i'
{txt} 71{com}.                         {c )-}
{txt} 72{com}.                 {c )-}
{txt} 73{com}.                 gen row = _n
{txt} 74{com}.                 reshape long value_, i(row) j(indicator) string
{txt} 75{com}.                 // Clean
.                 drop row
{txt} 76{com}.                 rename value_ value
{txt} 77{com}.                 gen ihme_loc_id = "$ihme_loc_id"
{txt} 78{com}.                 if "`key'" == "ihme_loc_id" gen year_start = .
{txt} 79{com}.                 else gen year_start = $year_start
{txt} 80{com}.                 order ihme_loc_id year_start indicator value
{txt} 81{com}.                 // Prompt for merging
.                 if mi("`bypass_map'") {c -(}
{txt} 82{com}.                 local pass 0
{txt} 83{com}.                 di as error "New values to map for gbd_subnat_map (https://docs.google.com/spreadsheets/d/1Jxls67NnwB3Fw0Qvw2XUyKQxNcrXo1Lbe0UMEy-3yvI/edit#gid=0)"
{txt} 84{com}.                 br
{txt} 85{com}.                 while `pass' == 0 {c -(}
{txt} 86{com}.                         noisily: di as error "Type 'y' to continue", _request(ans)
{txt} 87{com}.                         if "$ans" == "y" {c -(}
{txt} 88{com}.                                 local pass 1
{txt} 89{com}.                         {c )-}
{txt} 90{com}.                         else {c -(}
{txt} 91{com}.                                 cap $ans
{txt} 92{com}.                         {c )-}
{txt} 93{com}.                 {c )-}
{txt} 94{com}.                 {c )-}
{txt} 95{com}.         {c )-}
{txt} 96{com}.         {c )-} // Check if any vars to map
{txt} 97{com}. 
.         // Restore data
.         use `data', clear       
{txt} 98{com}. {c )-}
{txt} 99{com}. end
{txt}
{com}. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
. 
{txt}end of do-file
- {c )-}
- {c )-}

{com}. 
. // Make sure you're in central
. cd `central_root'
{res}/snfs1/WORK/01_covariates/common/ubcov_central
{txt}
{com}. 
. // Initialize the system
. /* 
>     Brings in the databases, after which you can run
>     extraction or sourcing functions like: new_topic_rows
> 
>     You can view each of the loaded databases by running: get, *db* (eg. get, codebook)
> */
. 
. ubcov_path
{txt}  {hline 76} begin ubcov_path {hline}
  - syntax
  - local pwd = subinstr(c(pwd), "\", "/", .)
  - preserve
  - clear
    {hline 79} begin clear {hline}
    - if _caller() < 10 {c -(}
      _clear_9 `0'
      exit
      {c )-}
    - version 10
    - syntax [anything]
    - tokenize `anything'
    = tokenize 
    - if `"`2'"' != "" {c -(}
    = if `""' != "" {c -(}
      display as err "`2' not allowed"
      exit 198
      {c )-}
    - if "`1'"=="" {c -(}
    = if ""=="" {c -(}
    - drop _all
    - label drop _all
      {hline 77} begin label {hline}
      - version 10.0
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("drop", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - _label `macval(0)'
      = _label drop _all
      - {c )-}
      {hline 79} end label {hline}
    - {c )-}
    - else if "`1'"=="mata" {c -(}
    = else if ""=="mata" {c -(}
      mata: mata clear
      {c )-}
    - else if inlist("`1'", "results", "matrix") {c -(}
    = else if inlist("", "results", "matrix") {c -(}
      return clear
      clearreturn
      ereturn clear
      sreturn clear
      _return drop _all
      if ("`1'" == "matrix") {c -(}
      matrix drop _all
      _est drop _all
      {c )-}
      {c )-}
    - else if "`1'"=="programs" {c -(}
    = else if ""=="programs" {c -(}
      program drop _all
      {c )-}
    - else if "`1'"=="ado" {c -(}
    = else if ""=="ado" {c -(}
      program drop _allado
      {c )-}
    - else if "`1'"=="*" | "`1'"=="all" {c -(}
    = else if ""=="*" | ""=="all" {c -(}
      capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
      capture
      if (0`semmods') {c -(}
      display as err "-clear all- not allowed while an SEM Builder is open"
      exit 1
      {c )-}
      drop _all
      label drop _all
      matrix drop _all
      scalar drop _all
      constraint drop _all
      eq drop _all
      file close _all
      postutil clear
      _return drop _all
      discard
      program drop _all
      timer clear
      mata: mata clear
      {c )-}
    - else {c -(}
      display as err "`1' not allowed"
      exit 198
      {c )-}
    {hline 81} end clear {hline}
  - set obs 1
obs was 0, now 1
  - gen root = "`pwd'"
  = gen root = "/snfs1/WORK/01_covariates/common/ubcov_central"
  - split root, p("ubcov_central")
    {hline 79} begin split {hline}
    - version 7, missing
    - syntax varname(str) [if] [in] [, Generate(str) noTrim Parse(str asis) DESTRING force float Ignore(string) percent Limit(numlist int >0 max=1) ]
    - marksample touse, strok
    - qui count if `touse'
    = qui count if __000000
    - if r(N) == 0 {c -(}
      error 2000
      {c )-}
    - if `"`parse'"' == `""' | `"`parse'"' == `""""' {c -(}
    = if `""ubcov_central""' == `""' | `""ubcov_central""' == `""""' {c -(}
      if "`trim'" != "" {c -(}
      di as err "parsing on spaces incompatible with notrim"
      exit 198
      {c )-}
      local parse `"" ""'
      local trm "trim"
      {c )-}
    - if `"`parse'"' == `""' | `"`parse'"' == `""""' {c -(}
    = if `""ubcov_central""' == `""' | `""ubcov_central""' == `""""' {c -(}
      local parse `"" ""'
      local trm "trim"
      {c )-}
    - local nparse : word count `parse'
    = local nparse : word count "ubcov_central"
    - tokenize `"`parse'"'
    = tokenize `""ubcov_central""'
    - if `"`generate'"' != "" {c -(}
    = if `""' != "" {c -(}
      confirm name `generate'
      if `: word count `generate'' > 1 {c -(}
      di as err "invalid stub `generate'"
      exit 198
      {c )-}
      {c )-}
    - qui {c -(}
    - tempvar vw tp mp pl
    - gen int `tp' = 0
    = gen int __000002 = 0
    - gen int `mp' = 0
    = gen int __000003 = 0
    - gen int `pl' = 0
    = gen int __000004 = 0
    - gen str1 `vw' = ""
    = gen str1 __000001 = ""
    - if "`trim'" == "" {c -(}
    = if "" == "" {c -(}
    - replace `vw' = trim(`varlist') if `touse'
    = replace __000001 = trim(root) if __000000
    - {c )-}
    - else {c -(}
      replace `vw' = `varlist' if `touse'
      {c )-}
    - {c )-}
    - if "`generate'" == "" {c -(}
    = if "" == "" {c -(}
    - local generate "`varlist'"
    = local generate "root"
    - {c )-}
    - local j = 0
    - local go = 1
    - if "`limit'" == "" {c -(}
    = if "" == "" {c -(}
    - local limit .
    - {c )-}
    - qui while `go' & `j' < `limit' {c -(}
    = qui while 1 & 0 < . {c -(}
    - replace `mp' = .
    = replace __000003 = .
    - replace `pl' = 0
    = replace __000004 = 0
    - forval i = 1 / `nparse' {c -(}
    = forval i = 1 / 1 {c -(}
    - forval i = 1 / `nparse' {c -(}
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"ubcov_central"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"ubcov_central"') if __000003 == __000002
    - {c )-}
    - local ++j
    - tempvar part`j'
    = tempvar part1
    - gen str1 `part`j'' = ""
    = gen str1 __000005 = ""
    - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
    = replace __000005 = substr(__000001, 1, __000003-1) if __000003 < .
    - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
    = replace __000001 = (substr(__000001, __000003+__000004, .)) if __000003 < .
    - replace `part`j'' = `vw' if `mp' >= .
    = replace __000005 = __000001 if __000003 >= .
    - replace `vw' = "" if `mp' >= .
    = replace __000001 = "" if __000003 >= .
    - local newvars "`newvars'`generate'`j' "
    = local newvars "root1 "
    - capture assert `vw' == ""
    = capture assert __000001 == ""
    - local go = _rc
    - {c )-}
    - qui while `go' & `j' < `limit' {c -(}
    = qui while 0 & 1 < . {c -(}
      replace `mp' = .
      replace `pl' = 0
      forval i = 1 / `nparse' {c -(}
      replace `tp' = index(`vw', `"``i''"')
      replace `mp' = min(`tp', `mp') if `tp'
      replace `pl' = length(`"``i''"') if `mp' == `tp'
      {c )-}
      local ++j
      tempvar part`j'
      gen str1 `part`j'' = ""
      replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
      replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
      replace `part`j'' = `vw' if `mp' >= .
      replace `vw' = "" if `mp' >= .
      local newvars "`newvars'`generate'`j' "
      capture assert `vw' == ""
      local go = _rc
      {c )-}
    - capture confirm new var `newvars'
    = capture confirm new var root1 
    - if _rc {c -(}
      di as err "invalid stub `generate'"
      exit _rc
      {c )-}
    - qui forval i = 1 / `j' {c -(}
    = qui forval i = 1 / 1 {c -(}
    - qui forval i = 1 / `j' {c -(}
    - gen str1 `generate'`i' = ""
    = gen str1 root1 = ""
    - replace `generate'`i' = `part`i''
    = replace root1 = __000005
    - {c )-}
    - return local varlist "`newvars'"
    = return local varlist "root1 "
    - return local nvars "`j'"
    = return local nvars "1"
    - local s = cond(`j' > 1, "s", "")
    = local s = cond(1 > 1, "s", "")
    - if "`destring'" != "" {c -(}
    = if "" != "" {c -(}
      di as res "variable`s' born as string: "
      {c )-}
    - else di as res "variable`s' created as string: "
    = else di as res "variable created as string: "
{res}variable created as string: 
    {txt}- ds `newvars'
    = ds root1 
      {hline 80} begin ds {hline}
      - version 9
      - local version : di "version " string(_caller()) ":"
      - if (_caller() <= 4) {c -(}
        `version' describe, simple
        exit
        {c )-}
      - else {c -(}
      - ds_util `0'
      = ds_util root1 
        {hline 73} begin ds_util {hline}
        - version 8
        - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detail Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
        - if "`varlist'" == "" {c -(}
        = if "root1" == "" {c -(}
          exit
          {c )-}
        - if !inrange(`indent',0,244) {c -(}
        = if !inrange(0,0,244) {c -(}
          di as err "indent() should be in the range 0..244"
          exit 198
          {c )-}
        - if !inrange(`varwidth',5,32) {c -(}
        = if !inrange(12,5,32) {c -(}
          di as err "varwidth() should be in the range 5..32"
          exit 198
          {c )-}
        - if !inrange(`skip',1,10) {c -(}
        = if !inrange(2,1,10) {c -(}
          di as err "skip() should be in the range 1..10"
          exit 198
          {c )-}
        - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
        = local nopts = (`""' != "") + (`""' != "") + ("" != "")
        - if `nopts' == 3 {c -(}
        = if 0 == 3 {c -(}
          di as err "may not combine options has(), not(), and not"
          exit 198
          {c )-}
        - else if `nopts' == 2 {c -(}
        = else if 0 == 2 {c -(}
          if (`"`has'"' == "") {c -(}
          di as err "may not combine options not() and not"
          exit 198
          {c )-}
          else if (`"`not'"' == "") {c -(}
          di as err "may not combine options has() and not"
          exit 198
          {c )-}
          else if (`"`not2'"' == "") {c -(}
          di as err "may not combine options has() and not()"
          exit 198
          {c )-}
          {c )-}
        - if `"`not'"' != "" {c -(}
        = if `""' != "" {c -(}
          local has `"`not'"'
          local opt "not"
          {c )-}
        - else if `"`has'"' != "" {c -(}
        = else if `""' != "" {c -(}
          local opt "has"
          {c )-}
        - local inse = "`insensitive'" != ""
        = local inse = "" != ""
        - if `"`has'"' != "" {c -(}
        = if `""' != "" {c -(}
          CheckHas `"`has'"' "`opt'" "`inse'"
          if "`what'" == "varl" | "`what'" == "vall" {c -(}
          VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
          {c )-}
          else if "`what'" == "f" {c -(}
          Format `"`which'"' "`varlist'" "`inse'"
          {c )-}
          else if "`what'" == "c" {c -(}
          Char `"`which'"' "`varlist'" "`inse'"
          {c )-}
          else if "`what'" == "t" {c -(}
          Type `"`which'"' "`varlist'"
          {c )-}
          if `"`not'"' != "" {c -(}
          local varlist : list varlist - vlist
          {c )-}
          else if `"`has'"' != "" {c -(}
          local varlist "`vlist'"
          {c )-}
          {c )-}
        - if `"`not2'"' != "" {c -(}
        = if `""' != "" {c -(}
          unab all : *
          local varlist : list all - varlist
          {c )-}
        - if "`varlist'" == "" {c -(}
        = if "root1" == "" {c -(}
          exit
          {c )-}
        - if "`alpha'" != "" {c -(}
        = if "" != "" {c -(}
          local varlist : list sort varlist
          {c )-}
        - if "`detail'" != "" {c -(}
        = if "" != "" {c -(}
          describe `varlist'
          {c )-}
        - else {c -(}
        - local nvar : word count `varlist'
        = local nvar : word count root1
        - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
        = local ncol = int((99 + 2) / (12 + 2))
        - local i 0
        - local vlist
        - foreach v of local varlist {c -(}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" root1"'
        - {c )-}
        - DisplayInCols txt `indent' `skip' 0 `vlist'
        = DisplayInCols txt 0 2 0  root1
          {hline 57} begin ds_util.DisplayInCols {hline}
          - gettoken sty 0 : 0
          - gettoken indent 0 : 0
          - gettoken pad 0 : 0
          - gettoken wid 0 : 0
          - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
          = local indent = cond(0==. | 0<0, 0, 0)
          - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
          = local pad = cond(2==. | 2<1, 2, 2)
          - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
          = local wid = cond(0==. | 0<0, 0, 0)
          - local n : list sizeof 0
          - if `n'==0 {c -(}
          = if 1==0 {c -(}
            exit
            {c )-}
          - foreach x of local 0 {c -(}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(0, length(`"root1"'))
          - {c )-}
          - local wid = `wid' + `pad'
          = local wid = 5 + 2
          - local cols = int((`c(linesize)'+1-`indent')/`wid')
          = local cols = int((99+1-0)/7)
          - if `cols' < 2 {c -(}
          = if 14 < 2 {c -(}
            if `indent' {c -(}
            local col "_column(`=`indent'+1')"
            {c )-}
            foreach x of local 0 {c -(}
            di as `sty' `col' `"`x'"'
            {c )-}
            exit
            {c )-}
          - local lines = `n'/`cols'
          = local lines = 1/14
          - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
          = local lines = int(cond(.0714285714285714>int(.0714285714285714), .0714285714285714+1, .0714285714285714))
          - forvalues i=1(1)`lines' {c -(}
          = forvalues i=1(1)1 {c -(}
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((14)*1+1, 1)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {c -(}
          = forvalues j=1(1)1 {c -(}
          - local x : word `j' of `0'
          = local x : word 1 of   root1
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "root1" _c
{col 1}root1          - local col = `col' + `wid'
          = local col = 1 + 7
          - {c )-}
          - di as `sty'
          = di as txt

          - {c )-}
          {hline 59} end ds_util.DisplayInCols {hline}
        - {c )-}
        - return local varlist `varlist'
        = return local varlist root1
        {hline 75} end ds_util {hline}
      - exit
      {hline 82} end ds {hline}
    - if "`destring'" != "" {c -(}
    = if "" != "" {c -(}
      if `"`ignore'"' != "" {c -(}
      local ignore `"ignore(`ignore')"'
      {c )-}
      destring `newvars', replace `force' `float' `ignore' `percent'
      {c )-}
    {hline 81} end split {hline}
  - local root = root1[1] + "/ubcov_central"
  - restore
  - insheet using "`root'/paths.csv", clear names
  = insheet using "/snfs1/WORK/01_covariates/common//ubcov_central/paths.csv", clear names
(7 vars, 29 obs)
  - qui: ds
    {hline 82} begin ds {hline}
    - version 9
    - local version : di "version " string(_caller()) ":"
    - if (_caller() <= 4) {c -(}
      `version' describe, simple
      exit
      {c )-}
    - else {c -(}
    - ds_util `0'
    = ds_util 
      {hline 75} begin ds_util {hline}
      - version 8
      - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detail Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
      - if "`varlist'" == "" {c -(}
      = if "object class path1 path2 path3 path4 path5" == "" {c -(}
        exit
        {c )-}
      - if !inrange(`indent',0,244) {c -(}
      = if !inrange(0,0,244) {c -(}
        di as err "indent() should be in the range 0..244"
        exit 198
        {c )-}
      - if !inrange(`varwidth',5,32) {c -(}
      = if !inrange(12,5,32) {c -(}
        di as err "varwidth() should be in the range 5..32"
        exit 198
        {c )-}
      - if !inrange(`skip',1,10) {c -(}
      = if !inrange(2,1,10) {c -(}
        di as err "skip() should be in the range 1..10"
        exit 198
        {c )-}
      - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
      = local nopts = (`""' != "") + (`""' != "") + ("" != "")
      - if `nopts' == 3 {c -(}
      = if 0 == 3 {c -(}
        di as err "may not combine options has(), not(), and not"
        exit 198
        {c )-}
      - else if `nopts' == 2 {c -(}
      = else if 0 == 2 {c -(}
        if (`"`has'"' == "") {c -(}
        di as err "may not combine options not() and not"
        exit 198
        {c )-}
        else if (`"`not'"' == "") {c -(}
        di as err "may not combine options has() and not"
        exit 198
        {c )-}
        else if (`"`not2'"' == "") {c -(}
        di as err "may not combine options has() and not()"
        exit 198
        {c )-}
        {c )-}
      - if `"`not'"' != "" {c -(}
      = if `""' != "" {c -(}
        local has `"`not'"'
        local opt "not"
        {c )-}
      - else if `"`has'"' != "" {c -(}
      = else if `""' != "" {c -(}
        local opt "has"
        {c )-}
      - local inse = "`insensitive'" != ""
      = local inse = "" != ""
      - if `"`has'"' != "" {c -(}
      = if `""' != "" {c -(}
        CheckHas `"`has'"' "`opt'" "`inse'"
        if "`what'" == "varl" | "`what'" == "vall" {c -(}
        VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
        {c )-}
        else if "`what'" == "f" {c -(}
        Format `"`which'"' "`varlist'" "`inse'"
        {c )-}
        else if "`what'" == "c" {c -(}
        Char `"`which'"' "`varlist'" "`inse'"
        {c )-}
        else if "`what'" == "t" {c -(}
        Type `"`which'"' "`varlist'"
        {c )-}
        if `"`not'"' != "" {c -(}
        local varlist : list varlist - vlist
        {c )-}
        else if `"`has'"' != "" {c -(}
        local varlist "`vlist'"
        {c )-}
        {c )-}
      - if `"`not2'"' != "" {c -(}
      = if `""' != "" {c -(}
        unab all : *
        local varlist : list all - varlist
        {c )-}
      - if "`varlist'" == "" {c -(}
      = if "object class path1 path2 path3 path4 path5" == "" {c -(}
        exit
        {c )-}
      - if "`alpha'" != "" {c -(}
      = if "" != "" {c -(}
        local varlist : list sort varlist
        {c )-}
      - if "`detail'" != "" {c -(}
      = if "" != "" {c -(}
        describe `varlist'
        {c )-}
      - else {c -(}
      - local nvar : word count `varlist'
      = local nvar : word count object class path1 path2 path3 path4 path5
      - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
      = local ncol = int((99 + 2) / (12 + 2))
      - local i 0
      - local vlist
      - foreach v of local varlist {c -(}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" object"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" object class"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" object class path1"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" object class path1 path2"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" object class path1 path2 path3"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" object class path1 path2 path3 path4"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" object class path1 path2 path3 path4 path5"'
      - {c )-}
      - DisplayInCols txt `indent' `skip' 0 `vlist'
      = DisplayInCols txt 0 2 0  object class path1 path2 path3 path4 path5
        {hline 59} begin ds_util.DisplayInCols {hline}
        - gettoken sty 0 : 0
        - gettoken indent 0 : 0
        - gettoken pad 0 : 0
        - gettoken wid 0 : 0
        - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
        = local indent = cond(0==. | 0<0, 0, 0)
        - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
        = local pad = cond(2==. | 2<1, 2, 2)
        - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
        = local wid = cond(0==. | 0<0, 0, 0)
        - local n : list sizeof 0
        - if `n'==0 {c -(}
        = if 7==0 {c -(}
          exit
          {c )-}
        - foreach x of local 0 {c -(}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(0, length(`"object"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(6, length(`"class"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(6, length(`"path1"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(6, length(`"path2"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(6, length(`"path3"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(6, length(`"path4"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(6, length(`"path5"'))
        - {c )-}
        - local wid = `wid' + `pad'
        = local wid = 6 + 2
        - local cols = int((`c(linesize)'+1-`indent')/`wid')
        = local cols = int((99+1-0)/8)
        - if `cols' < 2 {c -(}
        = if 12 < 2 {c -(}
          if `indent' {c -(}
          local col "_column(`=`indent'+1')"
          {c )-}
          foreach x of local 0 {c -(}
          di as `sty' `col' `"`x'"'
          {c )-}
          exit
          {c )-}
        - local lines = `n'/`cols'
        = local lines = 7/12
        - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        = local lines = int(cond(.5833333333333334>int(.5833333333333334), .5833333333333334+1, .5833333333333334))
        - forvalues i=1(1)`lines' {c -(}
        = forvalues i=1(1)1 {c -(}
        - local top = min((`cols')*`lines'+`i', `n')
        = local top = min((12)*1+1, 7)
        - local col = `indent' + 1
        = local col = 0 + 1
        - forvalues j=`i'(`lines')`top' {c -(}
        = forvalues j=1(1)7 {c -(}
        - local x : word `j' of `0'
        = local x : word 1 of   object class path1 path2 path3 path4 path5
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(1) "object" _c
        - local col = `col' + `wid'
        = local col = 1 + 8
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 2 of   object class path1 path2 path3 path4 path5
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(9) "class" _c
        - local col = `col' + `wid'
        = local col = 9 + 8
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 3 of   object class path1 path2 path3 path4 path5
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(17) "path1" _c
        - local col = `col' + `wid'
        = local col = 17 + 8
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 4 of   object class path1 path2 path3 path4 path5
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(25) "path2" _c
        - local col = `col' + `wid'
        = local col = 25 + 8
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 5 of   object class path1 path2 path3 path4 path5
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(33) "path3" _c
        - local col = `col' + `wid'
        = local col = 33 + 8
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 6 of   object class path1 path2 path3 path4 path5
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(41) "path4" _c
        - local col = `col' + `wid'
        = local col = 41 + 8
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 7 of   object class path1 path2 path3 path4 path5
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(49) "path5" _c
        - local col = `col' + `wid'
        = local col = 49 + 8
        - {c )-}
        - di as `sty'
        = di as txt
        - {c )-}
        {hline 61} end ds_util.DisplayInCols {hline}
      - {c )-}
      - return local varlist `varlist'
      = return local varlist object class path1 path2 path3 path4 path5
      {hline 77} end ds_util {hline}
    - exit
    {hline 84} end ds {hline}
  - local npath: word `c(k)' of `r(varlist)'
  = local npath: word 7 of object class path1 path2 path3 path4 path5
  - while regexm("`npath'", "[a-z]") {c -(}
  = while regexm("path5", "[a-z]") {c -(}
  - local npath = regexr("`npath'", "[a-z]", "")
  = local npath = regexr("path5", "[a-z]", "")
  - {c )-}
  - while regexm("`npath'", "[a-z]") {c -(}
  = while regexm("ath5", "[a-z]") {c -(}
  - local npath = regexr("`npath'", "[a-z]", "")
  = local npath = regexr("ath5", "[a-z]", "")
  - {c )-}
  - while regexm("`npath'", "[a-z]") {c -(}
  = while regexm("th5", "[a-z]") {c -(}
  - local npath = regexr("`npath'", "[a-z]", "")
  = local npath = regexr("th5", "[a-z]", "")
  - {c )-}
  - while regexm("`npath'", "[a-z]") {c -(}
  = while regexm("h5", "[a-z]") {c -(}
  - local npath = regexr("`npath'", "[a-z]", "")
  = local npath = regexr("h5", "[a-z]", "")
  - {c )-}
  - while regexm("`npath'", "[a-z]") {c -(}
  = while regexm("5", "[a-z]") {c -(}
    local npath = regexr("`npath'", "[a-z]", "")
    {c )-}
  - forvalues i = 1/`npath' {c -(}
  = forvalues i = 1/5 {c -(}
  - forvalues n = 1/`=_N' {c -(}
  = forvalues n = 1/29 {c -(}
  - local obj = object[`n']
  = local obj = object[1]
  - local path = path`i'[`n']
  = local path = path1[1]
  - if "`path'" != "" {c -(}
  = if "J:/WORK/01_covariates/common/ubcov_central" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("J:/WORK/01_covariates/common/ubcov_central", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
  - else {c -(}
  - global `obj' `path'
  = global central_root J:/WORK/01_covariates/common/ubcov_central
  - {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global central_root = subinstr("J:/WORK/01_covariates/common/ubcov_central", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global central_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[2]
  - local path = path`i'[`n']
  = local path = path1[2]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[3]
  - local path = path`i'[`n']
  = local path = path1[3]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[4]
  - local path = path`i'[`n']
  = local path = path1[4]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[5]
  - local path = path`i'[`n']
  = local path = path1[5]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[6]
  - local path = path`i'[`n']
  = local path = path1[6]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[7]
  - local path = path`i'[`n']
  = local path = path1[7]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[8]
  - local path = path`i'[`n']
  = local path = path1[8]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[9]
  - local path = path`i'[`n']
  = local path = path1[9]
  - if "`path'" != "" {c -(}
  = if "J:/WORK/01_covariates/common/ubcov_library/extract/topics" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("J:/WORK/01_covariates/common/ubcov_library/extract/topics", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
  - else {c -(}
  - global `obj' `path'
  = global topics_root J:/WORK/01_covariates/common/ubcov_library/extract/topics
  - {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global topics_root = subinstr("J:/WORK/01_covariates/common/ubcov_library/extract/topics", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global topics_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_library/extract/topics", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[10]
  - local path = path`i'[`n']
  = local path = path1[10]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[11]
  - local path = path`i'[`n']
  = local path = path1[11]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[12]
  - local path = path`i'[`n']
  = local path = path1[12]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[13]
  - local path = path`i'[`n']
  = local path = path1[13]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[14]
  - local path = path`i'[`n']
  = local path = path1[14]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[15]
  - local path = path`i'[`n']
  = local path = path1[15]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[16]
  - local path = path`i'[`n']
  = local path = path1[16]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[17]
  - local path = path`i'[`n']
  = local path = path1[17]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[18]
  - local path = path`i'[`n']
  = local path = path1[18]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[19]
  - local path = path`i'[`n']
  = local path = path1[19]
  - if "`path'" != "" {c -(}
  = if "/share/covariates/ubcov" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("/share/covariates/ubcov", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
  - else {c -(}
  - global `obj' `path'
  = global cluster_root /share/covariates/ubcov
  - {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global cluster_root = subinstr("/share/covariates/ubcov", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global cluster_root = subinstr("/share/covariates/ubcov", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[20]
  - local path = path`i'[`n']
  = local path = path1[20]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[21]
  - local path = path`i'[`n']
  = local path = path1[21]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[22]
  - local path = path`i'[`n']
  = local path = path1[22]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[23]
  - local path = path`i'[`n']
  = local path = path1[23]
  - if "`path'" != "" {c -(}
  = if "J:/WORK/01_covariates/common/ubcov_library/" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("J:/WORK/01_covariates/common/ubcov_library/", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
  - else {c -(}
  - global `obj' `path'
  = global ubcov_library J:/WORK/01_covariates/common/ubcov_library/
  - {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global ubcov_library = subinstr("J:/WORK/01_covariates/common/ubcov_library/", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global ubcov_library = subinstr("/home/j/WORK/01_covariates/common/ubcov_library/", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[24]
  - local path = path`i'[`n']
  = local path = path1[24]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[25]
  - local path = path`i'[`n']
  = local path = path1[25]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[26]
  - local path = path`i'[`n']
  = local path = path1[26]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[27]
  - local path = path`i'[`n']
  = local path = path1[27]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[28]
  - local path = path`i'[`n']
  = local path = path1[28]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[29]
  - local path = path`i'[`n']
  = local path = path1[29]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - {c )-}
  - forvalues n = 1/`=_N' {c -(}
  = forvalues n = 1/29 {c -(}
  - local obj = object[`n']
  = local obj = object[1]
  - local path = path`i'[`n']
  = local path = path2[1]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[2]
  - local path = path`i'[`n']
  = local path = path2[2]
  - if "`path'" != "" {c -(}
  = if "central_root, /modules" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("central_root, /modules", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "central_root, /modules", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global modules_root "/home/j/WORK/01_covariates/common/ubcov_central/modules"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global modules_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global modules_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[3]
  - local path = path`i'[`n']
  = local path = path2[3]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[4]
  - local path = path`i'[`n']
  = local path = path2[4]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[5]
  - local path = path`i'[`n']
  = local path = path2[5]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[6]
  - local path = path`i'[`n']
  = local path = path2[6]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[7]
  - local path = path`i'[`n']
  = local path = path2[7]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[8]
  - local path = path`i'[`n']
  = local path = path2[8]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[9]
  - local path = path`i'[`n']
  = local path = path2[9]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[10]
  - local path = path`i'[`n']
  = local path = path2[10]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[11]
  - local path = path`i'[`n']
  = local path = path2[11]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[12]
  - local path = path`i'[`n']
  = local path = path2[12]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[13]
  - local path = path`i'[`n']
  = local path = path2[13]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[14]
  - local path = path`i'[`n']
  = local path = path2[14]
  - if "`path'" != "" {c -(}
  = if "central_root, /functions" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("central_root, /functions", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "central_root, /functions", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global functions_root "/home/j/WORK/01_covariates/common/ubcov_central/functions"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global functions_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global functions_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[15]
  - local path = path`i'[`n']
  = local path = path2[15]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[16]
  - local path = path`i'[`n']
  = local path = path2[16]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[17]
  - local path = path`i'[`n']
  = local path = path2[17]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[18]
  - local path = path`i'[`n']
  = local path = path2[18]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[19]
  - local path = path`i'[`n']
  = local path = path2[19]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[20]
  - local path = path`i'[`n']
  = local path = path2[20]
  - if "`path'" != "" {c -(}
  = if "cluster_root, /model" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("cluster_root, /model", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "cluster_root, /model", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global cluster_model "/share/covariates/ubcov/model"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global cluster_model = subinstr("/share/covariates/ubcov/model", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global cluster_model = subinstr("/share/covariates/ubcov/model", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[21]
  - local path = path`i'[`n']
  = local path = path2[21]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[22]
  - local path = path`i'[`n']
  = local path = path2[22]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[23]
  - local path = path`i'[`n']
  = local path = path2[23]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[24]
  - local path = path`i'[`n']
  = local path = path2[24]
  - if "`path'" != "" {c -(}
  = if "ubcov_library, /databases" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("ubcov_library, /databases", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "ubcov_library, /databases", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global model_db_root "/home/j/WORK/01_covariates/common/ubcov_library//databases"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global model_db_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global model_db_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[25]
  - local path = path`i'[`n']
  = local path = path2[25]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[26]
  - local path = path`i'[`n']
  = local path = path2[26]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[27]
  - local path = path`i'[`n']
  = local path = path2[27]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[28]
  - local path = path`i'[`n']
  = local path = path2[28]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[29]
  - local path = path`i'[`n']
  = local path = path2[29]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - {c )-}
  - forvalues n = 1/`=_N' {c -(}
  = forvalues n = 1/29 {c -(}
  - local obj = object[`n']
  = local obj = object[1]
  - local path = path`i'[`n']
  = local path = path3[1]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[2]
  - local path = path`i'[`n']
  = local path = path3[2]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[3]
  - local path = path`i'[`n']
  = local path = path3[3]
  - if "`path'" != "" {c -(}
  = if "modules_root,  /model" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("modules_root,  /model", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "modules_root,  /model", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global model_root "/home/j/WORK/01_covariates/common/ubcov_central/modules/model"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global model_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global model_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[4]
  - local path = path`i'[`n']
  = local path = path3[4]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[5]
  - local path = path`i'[`n']
  = local path = path3[5]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[6]
  - local path = path`i'[`n']
  = local path = path3[6]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[7]
  - local path = path`i'[`n']
  = local path = path3[7]
  - if "`path'" != "" {c -(}
  = if "modules_root, /extract" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("modules_root, /extract", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "modules_root, /extract", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global extract_root "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global extract_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global extract_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[8]
  - local path = path`i'[`n']
  = local path = path3[8]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[9]
  - local path = path`i'[`n']
  = local path = path3[9]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[10]
  - local path = path`i'[`n']
  = local path = path3[10]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[11]
  - local path = path`i'[`n']
  = local path = path3[11]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[12]
  - local path = path`i'[`n']
  = local path = path3[12]
  - if "`path'" != "" {c -(}
  = if "modules_root, /collapse" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("modules_root, /collapse", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "modules_root, /collapse", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global collapse_root "/home/j/WORK/01_covariates/common/ubcov_central/modules/collapse"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global collapse_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/collapse", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global collapse_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/collapse", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[13]
  - local path = path`i'[`n']
  = local path = path3[13]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[14]
  - local path = path`i'[`n']
  = local path = path3[14]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[15]
  - local path = path`i'[`n']
  = local path = path3[15]
  - if "`path'" != "" {c -(}
  = if "functions_root, /shells" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("functions_root, /shells", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "functions_root, /shells", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global shells_root "/home/j/WORK/01_covariates/common/ubcov_central/functions/shells"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global shells_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/shells", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global shells_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/shells", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[16]
  - local path = path`i'[`n']
  = local path = path3[16]
  - if "`path'" != "" {c -(}
  = if "functions_root, /cluster_tools.r" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("functions_root, /cluster_tools.r", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "functions_root, /cluster_tools.r", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global cluster_tools "/home/j/WORK/01_covariates/common/ubcov_central/functions/cluster_tools.r"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global cluster_tools = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/cluster_tools.r", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global cluster_tools = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/cluster_tools.r", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[17]
  - local path = path`i'[`n']
  = local path = path3[17]
  - if "`path'" != "" {c -(}
  = if "functions_root, /utilitybelt/db_tools.r" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("functions_root, /utilitybelt/db_tools.r", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "functions_root, /utilitybelt/db_tools.r", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global db_tools "/home/j/WORK/01_covariates/common/ubcov_central/functions/utilitybelt/db_tools.r"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global db_tools = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/utilitybelt/db_tools.r", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global db_tools = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/utilitybelt/db_tools.r", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[18]
  - local path = path`i'[`n']
  = local path = path3[18]
  - if "`path'" != "" {c -(}
  = if "functions_root, /ubcov_tools.r" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("functions_root, /ubcov_tools.r", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "functions_root, /ubcov_tools.r", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global ubcov_tools "/home/j/WORK/01_covariates/common/ubcov_central/functions/ubcov_tools.r"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global ubcov_tools = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/ubcov_tools.r", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global ubcov_tools = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/functions/ubcov_tools.r", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[19]
  - local path = path`i'[`n']
  = local path = path3[19]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[20]
  - local path = path`i'[`n']
  = local path = path3[20]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[21]
  - local path = path`i'[`n']
  = local path = path3[21]
  - if "`path'" != "" {c -(}
  = if "cluster_model, /data" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("cluster_model, /data", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "cluster_model, /data", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global cluster_model_data "/share/covariates/ubcov/model/data"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global cluster_model_data = subinstr("/share/covariates/ubcov/model/data", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global cluster_model_data = subinstr("/share/covariates/ubcov/model/data", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[22]
  - local path = path`i'[`n']
  = local path = path3[22]
  - if "`path'" != "" {c -(}
  = if "cluster_model, /output" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("cluster_model, /output", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "cluster_model, /output", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global cluster_model_output "/share/covariates/ubcov/model/output"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global cluster_model_output = subinstr("/share/covariates/ubcov/model/output", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global cluster_model_output = subinstr("/share/covariates/ubcov/model/output", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[23]
  - local path = path`i'[`n']
  = local path = path3[23]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[24]
  - local path = path`i'[`n']
  = local path = path3[24]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[25]
  - local path = path`i'[`n']
  = local path = path3[25]
  - if "`path'" != "" {c -(}
  = if "model_db_root, /data_db.csv" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("model_db_root, /data_db.csv", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "model_db_root, /data_db.csv", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global data_db "/home/j/WORK/01_covariates/common/ubcov_library//databases/data_db.csv"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global data_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/data_db.csv", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global data_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/data_db.csv", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[26]
  - local path = path`i'[`n']
  = local path = path3[26]
  - if "`path'" != "" {c -(}
  = if "model_db_root, /model_db.csv" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("model_db_root, /model_db.csv", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "model_db_root, /model_db.csv", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global model_db "/home/j/WORK/01_covariates/common/ubcov_library//databases/model_db.csv"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global model_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/model_db.csv", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global model_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/model_db.csv", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[27]
  - local path = path`i'[`n']
  = local path = path3[27]
  - if "`path'" != "" {c -(}
  = if "model_db_root, /run_db.csv" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("model_db_root, /run_db.csv", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "model_db_root, /run_db.csv", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global run_db "/home/j/WORK/01_covariates/common/ubcov_library//databases/run_db.csv"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global run_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/run_db.csv", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global run_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/run_db.csv", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[28]
  - local path = path`i'[`n']
  = local path = path3[28]
  - if "`path'" != "" {c -(}
  = if "model_db_root, /me_db.csv" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("model_db_root, /me_db.csv", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "model_db_root, /me_db.csv", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global me_db "/home/j/WORK/01_covariates/common/ubcov_library//databases/me_db.csv"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global me_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/me_db.csv", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global me_db = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/me_db.csv", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[29]
  - local path = path`i'[`n']
  = local path = path3[29]
  - if "`path'" != "" {c -(}
  = if "model_db_root, /outliers" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("model_db_root, /outliers", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "model_db_root, /outliers", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global outlier_root "/home/j/WORK/01_covariates/common/ubcov_library//databases/outliers"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global outlier_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/outliers", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global outlier_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_library//databases/outliers", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - {c )-}
  - forvalues n = 1/`=_N' {c -(}
  = forvalues n = 1/29 {c -(}
  - local obj = object[`n']
  = local obj = object[1]
  - local path = path`i'[`n']
  = local path = path4[1]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[2]
  - local path = path`i'[`n']
  = local path = path4[2]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[3]
  - local path = path`i'[`n']
  = local path = path4[3]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[4]
  - local path = path`i'[`n']
  = local path = path4[4]
  - if "`path'" != "" {c -(}
  = if "model_root, /templates" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("model_root, /templates", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "model_root, /templates", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global model_templates "/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global model_templates = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global model_templates = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[5]
  - local path = path`i'[`n']
  = local path = path4[5]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[6]
  - local path = path`i'[`n']
  = local path = path4[6]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[7]
  - local path = path`i'[`n']
  = local path = path4[7]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[8]
  - local path = path`i'[`n']
  = local path = path4[8]
  - if "`path'" != "" {c -(}
  = if "extract_root, /core" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("extract_root, /core", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "extract_root, /core", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global extract_core "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global extract_core = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global extract_core = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/core", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[9]
  - local path = path`i'[`n']
  = local path = path4[9]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[10]
  - local path = path`i'[`n']
  = local path = path4[10]
  - if "`path'" != "" {c -(}
  = if "extract_root, /survey" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("extract_root, /survey", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "extract_root, /survey", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global survey_root "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/survey"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global survey_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/survey", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global survey_root = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/survey", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[11]
  - local path = path`i'[`n']
  = local path = path4[11]
  - if "`path'" != "" {c -(}
  = if "extract_root, /databases" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("extract_root, /databases", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "extract_root, /databases", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global extract_databases "/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/databases"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global extract_databases = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/databases", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global extract_databases = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/extract/databases", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[12]
  - local path = path`i'[`n']
  = local path = path4[12]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[13]
  - local path = path`i'[`n']
  = local path = path4[13]
  - if "`path'" != "" {c -(}
  = if "collapse_root, /launch.r" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("collapse_root, /launch.r", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "collapse_root, /launch.r", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global collapse_launch "/home/j/WORK/01_covariates/common/ubcov_central/modules/collapse/launch.r"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global collapse_launch = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/collapse/launch.r", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global collapse_launch = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/collapse/launch.r", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[14]
  - local path = path`i'[`n']
  = local path = path4[14]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[15]
  - local path = path`i'[`n']
  = local path = path4[15]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[16]
  - local path = path`i'[`n']
  = local path = path4[16]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[17]
  - local path = path`i'[`n']
  = local path = path4[17]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[18]
  - local path = path`i'[`n']
  = local path = path4[18]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[19]
  - local path = path`i'[`n']
  = local path = path4[19]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[20]
  - local path = path`i'[`n']
  = local path = path4[20]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[21]
  - local path = path`i'[`n']
  = local path = path4[21]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[22]
  - local path = path`i'[`n']
  = local path = path4[22]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[23]
  - local path = path`i'[`n']
  = local path = path4[23]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[24]
  - local path = path`i'[`n']
  = local path = path4[24]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[25]
  - local path = path`i'[`n']
  = local path = path4[25]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[26]
  - local path = path`i'[`n']
  = local path = path4[26]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[27]
  - local path = path`i'[`n']
  = local path = path4[27]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[28]
  - local path = path`i'[`n']
  = local path = path4[28]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[29]
  - local path = path`i'[`n']
  = local path = path4[29]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - {c )-}
  - forvalues n = 1/`=_N' {c -(}
  = forvalues n = 1/29 {c -(}
  - local obj = object[`n']
  = local obj = object[1]
  - local path = path`i'[`n']
  = local path = path5[1]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[2]
  - local path = path`i'[`n']
  = local path = path5[2]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[3]
  - local path = path`i'[`n']
  = local path = path5[3]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[4]
  - local path = path`i'[`n']
  = local path = path5[4]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[5]
  - local path = path`i'[`n']
  = local path = path5[5]
  - if "`path'" != "" {c -(}
  = if "model_templates, /data_template.csv" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("model_templates, /data_template.csv", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "model_templates, /data_template.csv", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global data_template "/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates/data_template.csv"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global data_template = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates/data_template.csv", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global data_template = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates/data_template.csv", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[6]
  - local path = path`i'[`n']
  = local path = path5[6]
  - if "`path'" != "" {c -(}
  = if "model_templates, /model_db.csv" != "" {c -(}
  - if regexm("`path'", ",") {c -(}
  = if regexm("model_templates, /model_db.csv", ",") {c -(}
  - tokenize "`path'", p(" ,")
  = tokenize "model_templates, /model_db.csv", p(" ,")
  - global `obj' "${c -(}`1'{c )-}`3'"
  = global model_template "/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates/model_db.csv"
  - {c )-}
  - else {c -(}
    global `obj' `path'
    {c )-}
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
  = global model_template = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates/model_db.csv", "J:", "/home/j", .)
  - global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
  = global model_template = subinstr("/home/j/WORK/01_covariates/common/ubcov_central/modules/model/templates/model_db.csv", "H:", "/snfs2/HOME/albrja", .)
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
  - {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[7]
  - local path = path`i'[`n']
  = local path = path5[7]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[8]
  - local path = path`i'[`n']
  = local path = path5[8]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[9]
  - local path = path`i'[`n']
  = local path = path5[9]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[10]
  - local path = path`i'[`n']
  = local path = path5[10]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[11]
  - local path = path`i'[`n']
  = local path = path5[11]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[12]
  - local path = path`i'[`n']
  = local path = path5[12]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[13]
  - local path = path`i'[`n']
  = local path = path5[13]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[14]
  - local path = path`i'[`n']
  = local path = path5[14]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[15]
  - local path = path`i'[`n']
  = local path = path5[15]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[16]
  - local path = path`i'[`n']
  = local path = path5[16]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[17]
  - local path = path`i'[`n']
  = local path = path5[17]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[18]
  - local path = path`i'[`n']
  = local path = path5[18]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[19]
  - local path = path`i'[`n']
  = local path = path5[19]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[20]
  - local path = path`i'[`n']
  = local path = path5[20]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[21]
  - local path = path`i'[`n']
  = local path = path5[21]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[22]
  - local path = path`i'[`n']
  = local path = path5[22]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[23]
  - local path = path`i'[`n']
  = local path = path5[23]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[24]
  - local path = path`i'[`n']
  = local path = path5[24]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[25]
  - local path = path`i'[`n']
  = local path = path5[25]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[26]
  - local path = path`i'[`n']
  = local path = path5[26]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[27]
  - local path = path`i'[`n']
  = local path = path5[27]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[28]
  - local path = path`i'[`n']
  = local path = path5[28]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - local obj = object[`n']
  = local obj = object[29]
  - local path = path`i'[`n']
  = local path = path5[29]
  - if "`path'" != "" {c -(}
  = if "" != "" {c -(}
    if regexm("`path'", ",") {c -(}
    tokenize "`path'", p(" ,")
    global `obj' "${c -(}`1'{c )-}`3'"
    {c )-}
    else {c -(}
    global `obj' `path'
    {c )-}
    if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "J:", "/home/j", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "H:", "/snfs2/HOME/`c(username)'", .)
    {c )-}
    else if c(os) == "Windows" {c -(}
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/home/j", "J:", .)
    global `obj' = subinstr("${c -(}`obj'{c )-}", "/snfs2/HOME/`c(username)'", "H:", .)
    {c )-}
    {c )-}
  - {c )-}
  - {c )-}
  {hline 78} end ubcov_path {hline}

{com}. init, topics(`topics')
{txt}  {hline 82} begin init {hline}
  - syntax, [topics(str) save(str) load(str)]
  - qui {c -(}
  - if !mi("`topics'") {c -(}
  = if !mi("hap") {c -(}
  - global sel_topics `topics'
  = global sel_topics hap
  - local topics basic design demographics geography `topics'
  = local topics basic design demographics geography hap
  - {c )-}
  - else {c -(}
    global sel_topics basic
    local topics basic design demographics geography
    {c )-}
  - global topics `topics'
  = global topics basic design demographics geography hap
  - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
  - global j "/home/j"
  - global h "/snfs2/HOME/`c(username)'"
  = global h "/snfs2/HOME/albrja"
  - set odbcmgr unixodbc
  - {c )-}
  - else if c(os) == "Windows" {c -(}
    global j "J:"
    global h "H:"
    {c )-}
  - foreach db in vars indicators codebook labels merges {c -(}
  - if mi("`load'") db_load, db(`db')
  = if mi("") db_load, db(vars)
    {hline 77} begin db_load {hline}
    - syntax, db(str)
    - if "`db'" == "codebook" {c -(}
    = if "vars" == "codebook" {c -(}
      foreach topic in basic $sel_topics {c -(}
      gs_db, topic(`topic') obj("codebook")
      ds
      local cb_vars `r(varlist)'
      local vars ubcov_id $vars
      local drop_vars : list cb_vars - vars
      drop `drop_vars'
      destring ubcov_id, replace force
      drop if ubcov_id == .
      duplicates tag $key, gen(kittendupe)
      tab kittendupe if kittendupe > 0
      if `r(N)' > 0 {c -(}
      di as error "Duplicates in codebook (`topic'). Please address."
      br if kittendupe > 0
      STOP
      {c )-}
      drop kittendupe
      if "`topic'" == "basic" {c -(}
      keep if !mi(ubcov_id)
      tempfile temp
      save `temp', replace
      {c )-}
      else {c -(}
      drop nid survey_name ihme_loc_id year_start year_end survey_module file_path
      merge 1:1 ubcov_id using `temp', gen(kittenmerge_`topic') keep(2 3)
      replace kittenmerge_`topic' = 0 if kittenmerge_`topic' != 3
      save `temp', replace
      {c )-}
      {c )-}
      if "$sel_topics" != "basic" {c -(}
      egen kittenkeep = rowtotal(kittenmerge_*)
      keep if kittenkeep > 0
      {c )-}
      keep ubcov_id $vars
      order ubcov_id $vars
      sort ubcov_id
      {c )-}
    - else {c -(}
    - gs_db, obj(`db')
    = gs_db, obj(vars)
      {hline 77} begin gs_db {hline}
      - syntax, obj(str) [topic(str)]
      - local links = "1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY"
      - gs_load, key(`links')
      = gs_load, key(1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY)
        {hline 73} begin gs_load {hline}
        - syntax, key(str)
        - preserve
        - clear
          {hline 73} begin clear {hline}
          - if _caller() < 10 {c -(}
            _clear_9 `0'
            exit
            {c )-}
          - version 10
          - syntax [anything]
          - tokenize `anything'
          = tokenize 
          - if `"`2'"' != "" {c -(}
          = if `""' != "" {c -(}
            display as err "`2' not allowed"
            exit 198
            {c )-}
          - if "`1'"=="" {c -(}
          = if ""=="" {c -(}
          - drop _all
          - label drop _all
            {hline 71} begin label {hline}
            - version 10.0
            - gettoken val : 0
            - if (strpos("`val'", "val") > 0 ) {c -(}
            = if (strpos("drop", "val") > 0 ) {c -(}
              gettoken val 0 : 0
              syntax anything [, nofix]
              if "`fix'" != "" {c -(}
              local fix ", nofix"
              {c )-}
              gettoken var rest : anything
              while `"`rest'"' != "" {c -(}
              gettoken lab rest : rest
              local label "`lab'"
              {c )-}
              local vlist : list anything - lab
              if "`lab'" == "." {c -(}
              local lab ""
              {c )-}
              foreach var of varlist `vlist' {c -(}
              _label `val' `var' `lab' `fix'
              {c )-}
              {c )-}
            - else {c -(}
            - _label `macval(0)'
            = _label drop _all
            - {c )-}
            {hline 73} end label {hline}
          - {c )-}
          - else if "`1'"=="mata" {c -(}
          = else if ""=="mata" {c -(}
            mata: mata clear
            {c )-}
          - else if inlist("`1'", "results", "matrix") {c -(}
          = else if inlist("", "results", "matrix") {c -(}
            return clear
            clearreturn
            ereturn clear
            sreturn clear
            _return drop _all
            if ("`1'" == "matrix") {c -(}
            matrix drop _all
            _est drop _all
            {c )-}
            {c )-}
          - else if "`1'"=="programs" {c -(}
          = else if ""=="programs" {c -(}
            program drop _all
            {c )-}
          - else if "`1'"=="ado" {c -(}
          = else if ""=="ado" {c -(}
            program drop _allado
            {c )-}
          - else if "`1'"=="*" | "`1'"=="all" {c -(}
          = else if ""=="*" | ""=="all" {c -(}
            capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
            capture
            if (0`semmods') {c -(}
            display as err "-clear all- not allowed while an SEM Builder is open"
            exit 1
            {c )-}
            drop _all
            label drop _all
            matrix drop _all
            scalar drop _all
            constraint drop _all
            eq drop _all
            file close _all
            postutil clear
            _return drop _all
            discard
            program drop _all
            timer clear
            mata: mata clear
            {c )-}
          - else {c -(}
            display as err "`1' not allowed"
            exit 198
            {c )-}
          {hline 75} end clear {hline}
        - set obs 1
        - gen blah = 1
        - tempfile temp
        - save `temp', replace
        = save /tmp/St48035.000002, replace
        - restore
        - local link "https://docs.google.com/spreadsheets/d/`key'/export?format=csv"
        = local link "https://docs.google.com/spreadsheets/d/1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY/export?format=csv"
        - copy "`link'" `temp'
        = copy "https://docs.google.com/spreadsheets/d/1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY/export?format=csv" /tmp/St48035.000002
        - import delimited using `temp', clear varnames(1) stringcols(_all) charset("utf-8")
        = import delimited using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
          {hline 72} begin import {hline}
          - version 12
          - gettoken subcmd 0 : 0, parse(" ,")
          - if `"`subcmd'"' == "delim" {c -(}
          = if `"delimited"' == "delim" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimi" {c -(}
          = else if `"delimited"' == "delimi" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimit" {c -(}
          = else if `"delimited"' == "delimit" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimite" {c -(}
          = else if `"delimited"' == "delimite" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimited" {c -(}
          = else if `"delimited"' == "delimited" {c -(}
          - ImpDelim `0'
          = ImpDelim  using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
            {hline 61} begin import.ImpDelim {hline}
            - version 13
            - import_delimited `0'
            = import_delimited using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
              {hline 58} begin import_delimited {hline}
              - version 13
              - gettoken filename rest : 0, parse(" ,")
              - gettoken comma : rest, parse(" ,")
              - if (`"`filename'"' != "" & (trim(`"`comma'"') == "," | trim(`"`comma'"') == "")) {c -(}
              = if (`"using"' != "" & (trim(`"/tmp/St48035.000002"') == "," | trim(`"/tmp/St48035.000002"') == "")) {c -(}
                local 0 `"using `0'"'
                {c )-}
              - capture syntax using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
              - if _rc {c -(}
                syntax [anything(name=vlist id="vlist")] using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
                {c )-}
              - mata:import_delim_import_file()
                {hline 67} begin clear {hline}
                - if _caller() < 10 {c -(}
                  _clear_9 `0'
                  exit
                  {c )-}
                - version 10
                - syntax [anything]
                - tokenize `anything'
                = tokenize 
                - if `"`2'"' != "" {c -(}
                = if `""' != "" {c -(}
                  display as err "`2' not allowed"
                  exit 198
                  {c )-}
                - if "`1'"=="" {c -(}
                = if ""=="" {c -(}
                - drop _all
                - label drop _all
                  {hline 65} begin label {hline}
                  - version 10.0
                  - gettoken val : 0
                  - if (strpos("`val'", "val") > 0 ) {c -(}
                  = if (strpos("drop", "val") > 0 ) {c -(}
                    gettoken val 0 : 0
                    syntax anything [, nofix]
                    if "`fix'" != "" {c -(}
                    local fix ", nofix"
                    {c )-}
                    gettoken var rest : anything
                    while `"`rest'"' != "" {c -(}
                    gettoken lab rest : rest
                    local label "`lab'"
                    {c )-}
                    local vlist : list anything - lab
                    if "`lab'" == "." {c -(}
                    local lab ""
                    {c )-}
                    foreach var of varlist `vlist' {c -(}
                    _label `val' `var' `lab' `fix'
                    {c )-}
                    {c )-}
                  - else {c -(}
                  - _label `macval(0)'
                  = _label drop _all
                  - {c )-}
                  {hline 67} end label {hline}
                - {c )-}
                - else if "`1'"=="mata" {c -(}
                = else if ""=="mata" {c -(}
                  mata: mata clear
                  {c )-}
                - else if inlist("`1'", "results", "matrix") {c -(}
                = else if inlist("", "results", "matrix") {c -(}
                  return clear
                  clearreturn
                  ereturn clear
                  sreturn clear
                  _return drop _all
                  if ("`1'" == "matrix") {c -(}
                  matrix drop _all
                  _est drop _all
                  {c )-}
                  {c )-}
                - else if "`1'"=="programs" {c -(}
                = else if ""=="programs" {c -(}
                  program drop _all
                  {c )-}
                - else if "`1'"=="ado" {c -(}
                = else if ""=="ado" {c -(}
                  program drop _allado
                  {c )-}
                - else if "`1'"=="*" | "`1'"=="all" {c -(}
                = else if ""=="*" | ""=="all" {c -(}
                  capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
                  capture
                  if (0`semmods') {c -(}
                  display as err "-clear all- not allowed while an SEM Builder is open"
                  exit 1
                  {c )-}
                  drop _all
                  label drop _all
                  matrix drop _all
                  scalar drop _all
                  constraint drop _all
                  eq drop _all
                  file close _all
                  postutil clear
                  _return drop _all
                  discard
                  program drop _all
                  timer clear
                  mata: mata clear
                  {c )-}
                - else {c -(}
                  display as err "`1' not allowed"
                  exit 198
                  {c )-}
                {hline 69} end clear {hline}
              {hline 60} end import_delimited {hline}
            {hline 63} end import.ImpDelim {hline}
          - {c )-}
          - else if `"`subcmd'"' == "exc" {c -(}
          = else if `"delimited"' == "exc" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "exce" {c -(}
          = else if `"delimited"' == "exce" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "excel" {c -(}
          = else if `"delimited"' == "excel" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "hav" {c -(}
          = else if `"delimited"' == "hav" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "have" {c -(}
          = else if `"delimited"' == "have" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "haver" {c -(}
          = else if `"delimited"' == "haver" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "sasxport" {c -(}
          = else if `"delimited"' == "sasxport" {c -(}
            ImpSasxport `0'
            {c )-}
          - else {c -(}
            display as error `"import: unknown subcommand "`subcmd'""'
            exit 198
            {c )-}
          {hline 74} end import {hline}
        {hline 75} end gs_load {hline}
      - keep if obj =="`obj'"
      = keep if obj =="vars"
      - if !mi("`topic'") keep if topic == "`topic'"
      = if !mi("") keep if topic == ""
      - if _N == 0 {c -(}
        di as error "Codebook not listed in links (https://docs.google.com/spreadsheets/d/`links'/edit#gid=0)"
        STOP
        {c )-}
      - if _N > 1 {c -(}
        if !mi("`topic'") di as error "Duplicates in topic (`topic') and obj (`obj')"
        else di as error "Duplicates in obj (`obj')"
        STOP
        {c )-}
      - else {c -(}
      - local key `=key[1]'
      = local key 1Z1oqVmYsEXLovoyLThshAxdcjP5JRA10KESyJFWyGjk
      - gs_load, key(`key')
      = gs_load, key(1Z1oqVmYsEXLovoyLThshAxdcjP5JRA10KESyJFWyGjk)
        {hline 73} begin gs_load {hline}
        - syntax, key(str)
        - preserve
        - clear
          {hline 73} begin clear {hline}
          - if _caller() < 10 {c -(}
            _clear_9 `0'
            exit
            {c )-}
          - version 10
          - syntax [anything]
          - tokenize `anything'
          = tokenize 
          - if `"`2'"' != "" {c -(}
          = if `""' != "" {c -(}
            display as err "`2' not allowed"
            exit 198
            {c )-}
          - if "`1'"=="" {c -(}
          = if ""=="" {c -(}
          - drop _all
          - label drop _all
            {hline 71} begin label {hline}
            - version 10.0
            - gettoken val : 0
            - if (strpos("`val'", "val") > 0 ) {c -(}
            = if (strpos("drop", "val") > 0 ) {c -(}
              gettoken val 0 : 0
              syntax anything [, nofix]
              if "`fix'" != "" {c -(}
              local fix ", nofix"
              {c )-}
              gettoken var rest : anything
              while `"`rest'"' != "" {c -(}
              gettoken lab rest : rest
              local label "`lab'"
              {c )-}
              local vlist : list anything - lab
              if "`lab'" == "." {c -(}
              local lab ""
              {c )-}
              foreach var of varlist `vlist' {c -(}
              _label `val' `var' `lab' `fix'
              {c )-}
              {c )-}
            - else {c -(}
            - _label `macval(0)'
            = _label drop _all
            - {c )-}
            {hline 73} end label {hline}
          - {c )-}
          - else if "`1'"=="mata" {c -(}
          = else if ""=="mata" {c -(}
            mata: mata clear
            {c )-}
          - else if inlist("`1'", "results", "matrix") {c -(}
          = else if inlist("", "results", "matrix") {c -(}
            return clear
            clearreturn
            ereturn clear
            sreturn clear
            _return drop _all
            if ("`1'" == "matrix") {c -(}
            matrix drop _all
            _est drop _all
            {c )-}
            {c )-}
          - else if "`1'"=="programs" {c -(}
          = else if ""=="programs" {c -(}
            program drop _all
            {c )-}
          - else if "`1'"=="ado" {c -(}
          = else if ""=="ado" {c -(}
            program drop _allado
            {c )-}
          - else if "`1'"=="*" | "`1'"=="all" {c -(}
          = else if ""=="*" | ""=="all" {c -(}
            capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
            capture
            if (0`semmods') {c -(}
            display as err "-clear all- not allowed while an SEM Builder is open"
            exit 1
            {c )-}
            drop _all
            label drop _all
            matrix drop _all
            scalar drop _all
            constraint drop _all
            eq drop _all
            file close _all
            postutil clear
            _return drop _all
            discard
            program drop _all
            timer clear
            mata: mata clear
            {c )-}
          - else {c -(}
            display as err "`1' not allowed"
            exit 198
            {c )-}
          {hline 75} end clear {hline}
        - set obs 1
        - gen blah = 1
        - tempfile temp
        - save `temp', replace
        = save /tmp/St48035.000002, replace
        - restore
        - local link "https://docs.google.com/spreadsheets/d/`key'/export?format=csv"
        = local link "https://docs.google.com/spreadsheets/d/1Z1oqVmYsEXLovoyLThshAxdcjP5JRA10KESyJFWyGjk/export?format=csv"
        - copy "`link'" `temp'
        = copy "https://docs.google.com/spreadsheets/d/1Z1oqVmYsEXLovoyLThshAxdcjP5JRA10KESyJFWyGjk/export?format=csv" /tmp/St48035.000002
        - import delimited using `temp', clear varnames(1) stringcols(_all) charset("utf-8")
        = import delimited using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
          {hline 72} begin import {hline}
          - version 12
          - gettoken subcmd 0 : 0, parse(" ,")
          - if `"`subcmd'"' == "delim" {c -(}
          = if `"delimited"' == "delim" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimi" {c -(}
          = else if `"delimited"' == "delimi" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimit" {c -(}
          = else if `"delimited"' == "delimit" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimite" {c -(}
          = else if `"delimited"' == "delimite" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimited" {c -(}
          = else if `"delimited"' == "delimited" {c -(}
          - ImpDelim `0'
          = ImpDelim  using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
            {hline 61} begin import.ImpDelim {hline}
            - version 13
            - import_delimited `0'
            = import_delimited using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
              {hline 58} begin import_delimited {hline}
              - version 13
              - gettoken filename rest : 0, parse(" ,")
              - gettoken comma : rest, parse(" ,")
              - if (`"`filename'"' != "" & (trim(`"`comma'"') == "," | trim(`"`comma'"') == "")) {c -(}
              = if (`"using"' != "" & (trim(`"/tmp/St48035.000002"') == "," | trim(`"/tmp/St48035.000002"') == "")) {c -(}
                local 0 `"using `0'"'
                {c )-}
              - capture syntax using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
              - if _rc {c -(}
                syntax [anything(name=vlist id="vlist")] using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
                {c )-}
              - mata:import_delim_import_file()
                {hline 67} begin clear {hline}
                - if _caller() < 10 {c -(}
                  _clear_9 `0'
                  exit
                  {c )-}
                - version 10
                - syntax [anything]
                - tokenize `anything'
                = tokenize 
                - if `"`2'"' != "" {c -(}
                = if `""' != "" {c -(}
                  display as err "`2' not allowed"
                  exit 198
                  {c )-}
                - if "`1'"=="" {c -(}
                = if ""=="" {c -(}
                - drop _all
                - label drop _all
                  {hline 65} begin label {hline}
                  - version 10.0
                  - gettoken val : 0
                  - if (strpos("`val'", "val") > 0 ) {c -(}
                  = if (strpos("drop", "val") > 0 ) {c -(}
                    gettoken val 0 : 0
                    syntax anything [, nofix]
                    if "`fix'" != "" {c -(}
                    local fix ", nofix"
                    {c )-}
                    gettoken var rest : anything
                    while `"`rest'"' != "" {c -(}
                    gettoken lab rest : rest
                    local label "`lab'"
                    {c )-}
                    local vlist : list anything - lab
                    if "`lab'" == "." {c -(}
                    local lab ""
                    {c )-}
                    foreach var of varlist `vlist' {c -(}
                    _label `val' `var' `lab' `fix'
                    {c )-}
                    {c )-}
                  - else {c -(}
                  - _label `macval(0)'
                  = _label drop _all
                  - {c )-}
                  {hline 67} end label {hline}
                - {c )-}
                - else if "`1'"=="mata" {c -(}
                = else if ""=="mata" {c -(}
                  mata: mata clear
                  {c )-}
                - else if inlist("`1'", "results", "matrix") {c -(}
                = else if inlist("", "results", "matrix") {c -(}
                  return clear
                  clearreturn
                  ereturn clear
                  sreturn clear
                  _return drop _all
                  if ("`1'" == "matrix") {c -(}
                  matrix drop _all
                  _est drop _all
                  {c )-}
                  {c )-}
                - else if "`1'"=="programs" {c -(}
                = else if ""=="programs" {c -(}
                  program drop _all
                  {c )-}
                - else if "`1'"=="ado" {c -(}
                = else if ""=="ado" {c -(}
                  program drop _allado
                  {c )-}
                - else if "`1'"=="*" | "`1'"=="all" {c -(}
                = else if ""=="*" | ""=="all" {c -(}
                  capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
                  capture
                  if (0`semmods') {c -(}
                  display as err "-clear all- not allowed while an SEM Builder is open"
                  exit 1
                  {c )-}
                  drop _all
                  label drop _all
                  matrix drop _all
                  scalar drop _all
                  constraint drop _all
                  eq drop _all
                  file close _all
                  postutil clear
                  _return drop _all
                  discard
                  program drop _all
                  timer clear
                  mata: mata clear
                  {c )-}
                - else {c -(}
                  display as err "`1' not allowed"
                  exit 198
                  {c )-}
                {hline 69} end clear {hline}
              {hline 60} end import_delimited {hline}
            {hline 63} end import.ImpDelim {hline}
          - {c )-}
          - else if `"`subcmd'"' == "exc" {c -(}
          = else if `"delimited"' == "exc" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "exce" {c -(}
          = else if `"delimited"' == "exce" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "excel" {c -(}
          = else if `"delimited"' == "excel" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "hav" {c -(}
          = else if `"delimited"' == "hav" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "have" {c -(}
          = else if `"delimited"' == "have" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "haver" {c -(}
          = else if `"delimited"' == "haver" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "sasxport" {c -(}
          = else if `"delimited"' == "sasxport" {c -(}
            ImpSasxport `0'
            {c )-}
          - else {c -(}
            display as error `"import: unknown subcommand "`subcmd'""'
            exit 198
            {c )-}
          {hline 74} end import {hline}
        {hline 75} end gs_load {hline}
      - {c )-}
      {hline 79} end gs_db {hline}
    - {c )-}
    {hline 79} end db_load {hline}
  - if !mi("`load'") import delimited using "`load'/`db'.csv", clear varnames(1) stringcols(_all) charset("utf-8")
  = if !mi("") import delimited using "/vars.csv", clear varnames(1) stringcols(_all) charset("utf-8")
  - if !mi("`save'") export delimited using "`save'/`db'.csv", replace
  = if !mi("") export delimited using "/vars.csv", replace
  - tostring *, replace
    {hline 76} begin tostring {hline}
    - version 8.0
    - syntax varlist, [Generate(string) replace] [force] [format(str) Usedisplayformat]
    - if "`generate'" != "" & "`replace'" != "" {c -(}
    = if "" != "" & "replace" != "" {c -(}
      di as err "{c -(}p{c )-}options generate and replace are mutually exclusive{c -(}p_end{c )-}"
      exit 198
      {c )-}
    - if "`generate'" == "" & "`replace'" == "" {c -(}
    = if "" == "" & "replace" == "" {c -(}
      di as err "{c -(}p{c )-}must specify either generate or replace option{c -(}p_end{c )-}"
      exit 198
      {c )-}
    - if "`generate'" != "" {c -(}
    = if "" != "" {c -(}
      local ct1: word count `varlist'
      local save "`varlist'"
      local 0 "`generate'"
      capture syntax newvarlist
      if _rc {c -(}
      di as err "generate(newvarlist) invalid"
      exit _rc
      {c )-}
      local generate "`varlist'"
      local varlist "`save'"
      local ct2: word count `generate'
      if `ct1' != `ct2' {c -(}
      di as err "{c -(}p{c )-}number of variables in varlist " "must equal number of variables in generate(newvarlist){c -(}p_end{c )-}"
      exit 198
      {c )-}
      {c )-}
    - if "`usedisplayformat'" != "" & "`format'" != "" {c -(}
    = if "" != "" & "" != "" {c -(}
      di as err "{c -(}p{c )-}must choose between usedisplayformat and format() options{c -(}p_end{c )-}"
      exit 198
      {c )-}
    - if "`format'" != "" {c -(}
    = if "" != "" {c -(}
      if index("`format'", "s") {c -(}
      di as err "use numeric format in format() option"
      exit 198
      {c )-}
      capture di `format' 12345.67890
      if _rc {c -(}
      di as err "format() option invalid"
      exit 198
      {c )-}
      local fmt "`format'"
      local format `", "`format'""'
      {c )-}
    - else {c -(}
    - local fmt "%12.0g"
    - local format `", "%12.0g""'
    - {c )-}
    - local u = "`usedisplayformat'" != ""
    = local u = "" != ""
    - if "`generate'" != "" {c -(}
    = if "" != "" {c -(}
      tokenize `generate'
      local i = 0
      foreach v of local varlist {c -(}
      local ++i
      capture confirm string variable `v'
      if _rc == 0 {c -(}
      di as txt "`v' already string; no " as res "generate"
      {c )-}
      else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "generate"
      {c )-}
      else {c -(}
      gen ``i'' = `temp'
      di as txt "``i'' generated as {c -(}res:`: type ``i'''{c )-}"
      _crcslbl ``i'' `v'
      move ``i'' `v'
      move `v' ``i''
      Charcopy `v' ``i''
      if `flag' & "`force'" != "" {c -(}
      di as txt "``i'' was forced to string; some loss of information"
      char ``i''[tostring] "forced to string; `fmt'"
      {c )-}
      else char ``i''[tostring] "converted to string"
      {c )-}
      drop `temp'
      {c )-}
      {c )-}
      {c )-}
    - else if "`replace'" != "" {c -(}
    = else if "replace" != "" {c -(}
    - foreach v of local varlist {c -(}
    - capture confirm string variable `v'
    = capture confirm string variable v1
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "v1 already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable var_name
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "var_name already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable topic_name
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "topic_name already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable var_type
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "var_type already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable var_desc
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "var_desc already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable lookfor_values
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "lookfor_values already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable date_added
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "date_added already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable v8
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "v8 already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - {c )-}
    {hline 78} end tostring {hline}
  - inlist2, obj(topic_name) vals(`topics') str(vals)
  = inlist2, obj(topic_name) vals(basic design demographics geography hap) str(vals)
    {hline 77} begin inlist2 {hline}
    - syntax, obj(str) vals(str) [cond(str) str(str) string]
    - if !mi("`cond'") {c -(}
    = if !mi("") {c -(}
      if !inlist("`cond'", "&", "|") {c -(}
      STOP
      {c )-}
      local cond `cond'
      {c )-}
    - else {c -(}
    - local cond |
    - {c )-}
    - local i 1
    - local cmd 1==0
    - foreach val in `vals' {c -(}
    = foreach val in basic design demographics geography hap {c -(}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | "topic_name" == basic
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | "topic_name" == "basic"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | "topic_name" == design
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | "topic_name" == "design"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | "topic_name" == demographics
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | "topic_name" == "demographics"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | "topic_name" == geography
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | "topic_name" == "geography"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | "topic_name" == hap
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap" | "topic_name" == "hap"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - return local cmd "`cmd'"
    = return local cmd "1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap""
    {hline 79} end inlist2 {hline}
  - local ifcmd `r(cmd)'
  = local ifcmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap"
  - if "`db'" == "vars" {c -(}
  = if "vars" == "vars" {c -(}
  - keep if `ifcmd'
  = keep if 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap"
  - global vars
  - forvalues i = 1/`=_N' {c -(}
  = forvalues i = 1/76 {c -(}
  - global vars $vars `=var_name[`i']'
  = global vars  survey_name
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false housing_roof
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false housing_roof housing_wall
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false housing_roof housing_wall housing_floor
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num
  - {c )-}
  - global vars $vars `=var_name[`i']'
  = global vars survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num
  - {c )-}
  - {c )-}
  - if "`db'" == "indicators" {c -(}
  = if "vars" == "indicators" {c -(}
    keep if `ifcmd'
    global indicators
    forvalues i = 1/`=_N' {c -(}
    global indicators $indicators `=indicator_name[`i']'
    {c )-}
    {c )-}
  - ds
    {hline 82} begin ds {hline}
    - version 9
    - local version : di "version " string(_caller()) ":"
    - if (_caller() <= 4) {c -(}
      `version' describe, simple
      exit
      {c )-}
    - else {c -(}
    - ds_util `0'
    = ds_util 
      {hline 75} begin ds_util {hline}
      - version 8
      - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detail Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
      - if "`varlist'" == "" {c -(}
      = if "v1 var_name topic_name var_type var_desc lookfor_values date_added v8" == "" {c -(}
        exit
        {c )-}
      - if !inrange(`indent',0,244) {c -(}
      = if !inrange(0,0,244) {c -(}
        di as err "indent() should be in the range 0..244"
        exit 198
        {c )-}
      - if !inrange(`varwidth',5,32) {c -(}
      = if !inrange(12,5,32) {c -(}
        di as err "varwidth() should be in the range 5..32"
        exit 198
        {c )-}
      - if !inrange(`skip',1,10) {c -(}
      = if !inrange(2,1,10) {c -(}
        di as err "skip() should be in the range 1..10"
        exit 198
        {c )-}
      - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
      = local nopts = (`""' != "") + (`""' != "") + ("" != "")
      - if `nopts' == 3 {c -(}
      = if 0 == 3 {c -(}
        di as err "may not combine options has(), not(), and not"
        exit 198
        {c )-}
      - else if `nopts' == 2 {c -(}
      = else if 0 == 2 {c -(}
        if (`"`has'"' == "") {c -(}
        di as err "may not combine options not() and not"
        exit 198
        {c )-}
        else if (`"`not'"' == "") {c -(}
        di as err "may not combine options has() and not"
        exit 198
        {c )-}
        else if (`"`not2'"' == "") {c -(}
        di as err "may not combine options has() and not()"
        exit 198
        {c )-}
        {c )-}
      - if `"`not'"' != "" {c -(}
      = if `""' != "" {c -(}
        local has `"`not'"'
        local opt "not"
        {c )-}
      - else if `"`has'"' != "" {c -(}
      = else if `""' != "" {c -(}
        local opt "has"
        {c )-}
      - local inse = "`insensitive'" != ""
      = local inse = "" != ""
      - if `"`has'"' != "" {c -(}
      = if `""' != "" {c -(}
        CheckHas `"`has'"' "`opt'" "`inse'"
        if "`what'" == "varl" | "`what'" == "vall" {c -(}
        VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
        {c )-}
        else if "`what'" == "f" {c -(}
        Format `"`which'"' "`varlist'" "`inse'"
        {c )-}
        else if "`what'" == "c" {c -(}
        Char `"`which'"' "`varlist'" "`inse'"
        {c )-}
        else if "`what'" == "t" {c -(}
        Type `"`which'"' "`varlist'"
        {c )-}
        if `"`not'"' != "" {c -(}
        local varlist : list varlist - vlist
        {c )-}
        else if `"`has'"' != "" {c -(}
        local varlist "`vlist'"
        {c )-}
        {c )-}
      - if `"`not2'"' != "" {c -(}
      = if `""' != "" {c -(}
        unab all : *
        local varlist : list all - varlist
        {c )-}
      - if "`varlist'" == "" {c -(}
      = if "v1 var_name topic_name var_type var_desc lookfor_values date_added v8" == "" {c -(}
        exit
        {c )-}
      - if "`alpha'" != "" {c -(}
      = if "" != "" {c -(}
        local varlist : list sort varlist
        {c )-}
      - if "`detail'" != "" {c -(}
      = if "" != "" {c -(}
        describe `varlist'
        {c )-}
      - else {c -(}
      - local nvar : word count `varlist'
      = local nvar : word count v1 var_name topic_name var_type var_desc lookfor_values date_added v8
      - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
      = local ncol = int((99 + 2) / (12 + 2))
      - local i 0
      - local vlist
      - foreach v of local varlist {c -(}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" v1"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" v1 var_name"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" v1 var_name topic_name"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" v1 var_name topic_name var_type"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" v1 var_name topic_name var_type var_desc"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" v1 var_name topic_name var_type var_desc lookfor_va~s"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" v1 var_name topic_name var_type var_desc lookfor_va~s date_added"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" v1 var_name topic_name var_type var_desc lookfor_va~s date_added v8"'
      - {c )-}
      - DisplayInCols txt `indent' `skip' 0 `vlist'
      = DisplayInCols txt 0 2 0  v1 var_name topic_name var_type var_desc lookfor_va~s date_added v8
        {hline 59} begin ds_util.DisplayInCols {hline}
        - gettoken sty 0 : 0
        - gettoken indent 0 : 0
        - gettoken pad 0 : 0
        - gettoken wid 0 : 0
        - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
        = local indent = cond(0==. | 0<0, 0, 0)
        - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
        = local pad = cond(2==. | 2<1, 2, 2)
        - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
        = local wid = cond(0==. | 0<0, 0, 0)
        - local n : list sizeof 0
        - if `n'==0 {c -(}
        = if 8==0 {c -(}
          exit
          {c )-}
        - foreach x of local 0 {c -(}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(0, length(`"v1"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(2, length(`"var_name"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(8, length(`"topic_name"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(10, length(`"var_type"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(10, length(`"var_desc"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(10, length(`"lookfor_va~s"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"date_added"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"v8"'))
        - {c )-}
        - local wid = `wid' + `pad'
        = local wid = 12 + 2
        - local cols = int((`c(linesize)'+1-`indent')/`wid')
        = local cols = int((99+1-0)/14)
        - if `cols' < 2 {c -(}
        = if 7 < 2 {c -(}
          if `indent' {c -(}
          local col "_column(`=`indent'+1')"
          {c )-}
          foreach x of local 0 {c -(}
          di as `sty' `col' `"`x'"'
          {c )-}
          exit
          {c )-}
        - local lines = `n'/`cols'
        = local lines = 8/7
        - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        = local lines = int(cond(1.142857142857143>int(1.142857142857143), 1.142857142857143+1, 1.142857142857143))
        - forvalues i=1(1)`lines' {c -(}
        = forvalues i=1(1)2 {c -(}
        - local top = min((`cols')*`lines'+`i', `n')
        = local top = min((7)*2+1, 8)
        - local col = `indent' + 1
        = local col = 0 + 1
        - forvalues j=`i'(`lines')`top' {c -(}
        = forvalues j=1(2)8 {c -(}
        - local x : word `j' of `0'
        = local x : word 1 of   v1 var_name topic_name var_type var_desc lookfor_va~s date_added v8
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(1) "v1" _c
        - local col = `col' + `wid'
        = local col = 1 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 3 of   v1 var_name topic_name var_type var_desc lookfor_va~s date_added v8
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(15) "topic_name" _c
        - local col = `col' + `wid'
        = local col = 15 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 5 of   v1 var_name topic_name var_type var_desc lookfor_va~s date_added v8
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(29) "var_desc" _c
        - local col = `col' + `wid'
        = local col = 29 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 7 of   v1 var_name topic_name var_type var_desc lookfor_va~s date_added v8
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(43) "date_added" _c
        - local col = `col' + `wid'
        = local col = 43 + 14
        - {c )-}
        - di as `sty'
        = di as txt
        - {c )-}
        - local top = min((`cols')*`lines'+`i', `n')
        = local top = min((7)*2+2, 8)
        - local col = `indent' + 1
        = local col = 0 + 1
        - forvalues j=`i'(`lines')`top' {c -(}
        = forvalues j=2(2)8 {c -(}
        - local x : word `j' of `0'
        = local x : word 2 of   v1 var_name topic_name var_type var_desc lookfor_va~s date_added v8
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(1) "var_name" _c
        - local col = `col' + `wid'
        = local col = 1 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 4 of   v1 var_name topic_name var_type var_desc lookfor_va~s date_added v8
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(15) "var_type" _c
        - local col = `col' + `wid'
        = local col = 15 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 6 of   v1 var_name topic_name var_type var_desc lookfor_va~s date_added v8
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(29) "lookfor_va~s" _c
        - local col = `col' + `wid'
        = local col = 29 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 8 of   v1 var_name topic_name var_type var_desc lookfor_va~s date_added v8
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(43) "v8" _c
        - local col = `col' + `wid'
        = local col = 43 + 14
        - {c )-}
        - di as `sty'
        = di as txt
        - {c )-}
        {hline 61} end ds_util.DisplayInCols {hline}
      - {c )-}
      - return local varlist `varlist'
      = return local varlist v1 var_name topic_name var_type var_desc lookfor_values date_added v8
      {hline 77} end ds_util {hline}
    - exit
    {hline 84} end ds {hline}
  - global `db'_cols `r(varlist)'
  = global vars_cols v1 var_name topic_name var_type var_desc lookfor_values date_added v8
  - putmata `db' = (${c -(}`db'_cols{c )-}), replace
  = putmata vars = (v1 var_name topic_name var_type var_desc lookfor_values date_added v8), replace
    =        real scalar       isnumeric
    =        real scalar       hasnumeric
    =        string scalar            name
    =        string rowvector            contents
    =        real scalar                       op_copy
    =        real scalar                       op_replace
    =        real scalar                       op_omitmissing
    =        real scalar                            N
    =        real rowvector                            inrange
    =        string scalar                            touse
    =        pointer(struct elinfo scalar) rowvector    el
    =void put(string scalar touse, string scalar in)
    =        real rowvector            count
    =        struct prinfo scalar       pr
    =void setup_problem(struct prinfo scalar pr, string scalar touse, string scalar in)
    =        real scalar            l, lb, ub
    =void parse_putlist(struct prinfo scalar pr)
    =        string scalar    putlist
    =void parse_putlist_nonempty(string scalar putlist, struct prinfo scalar pr)
    =        transmorphic    t
    =        string scalar    token
    =        string scalar    varlist
    =void parse_putlist_star(struct prinfo scalar pr)
    =        real scalar    i, n
    =        real scalar    j
    =        string scalar    name
    =                        setelement(*(pr.el[j]), st_isnumvar(i), 0,
    =void parse_putlist_finish(string scalar varlist, struct prinfo scalar pr)
    =        string rowvector    names
    =        string scalar    name
    =        real scalar    i, j
    =                setelement(*(pr.el[j]), st_isnumvar(name), 0, name, name)
    =void parse_putlist_name_equal(transmorphic t, string scalar name, struct prinfo scalar pr)
    =        real scalar    j
    =        string scalar    token
    =        string rowvector    contents
    =        setelement(*(pr.el[j]), st_isnumvar(contents), 0, name, contents)
    =void parse_putlist_name_equal_paren(string scalar name, string scalar list, struct prinfo scalar pr)
    =        real scalar            i, j
    =        string scalar            evarlist
    =        string rowvector            contents
    =        real scalar       isnumeric, hasnumeric
    =real scalar isnumvar_or_number(string scalar s)
    =        real scalar    r
    =string rowvector parse_evarlist(string scalar evarlist, real scalar emptyok, real scalar hasnumeric)
    =        string rowvector    result, toparse
    =        hasnumeric = 0
    =                hasnumeric = 1
    =string rowvector split_on_number(string scalar evarlist)
    =        transmorphic    t
    =        string scalar    token, lhs
    =        real scalar    r
    =string rowvector parse_varlist(string scalar varlist, real scalar emptyok)
    =        real scalar    rc
    =        string scalar    result
    =void setelement(struct elinfo scalar el,
    =        real scalar isnumeric, real scalar hasnumeric, string scalar name, string rowvector contents)
    =void assert_names_unique(struct prinfo scalar pr)
    =        real scalar    i, n
    =        string colvector    name, bad
    =        string scalar    s_matrix
    =void set_obs_touse(struct prinfo scalar pr)
    =        real scalar    i, j, k
    =        real scalar    nvars
    =        string colvector    vars
    =        string rowvector    v
    =real scalar count_obs(struct prinfo scalar pr)
    =        real colvector    touse
    =void verify_element_names(struct prinfo scalar pr)
    =        real scalar    i
    =        string rowvector    problem
    =void remove_element_names(struct prinfo scalar pr)
    =        real scalar            i
    =void post_elements_to_matrices(struct prinfo scalar pr)
    =        real scalar            i, n, nv, nm
    =void post_matrix(struct prinfo scalar pr, struct elinfo scalar el)
    =        pointer(transmorphic) scalar    p
    =real matrix post_matrix_mixed(real rowvector inrange, string rowvector contents, string scalar touse, real scalar N)
    =        real scalar    i
    =        real colvector    r
    =        real matrix    X
    =real colvector find_i0i1(string rowvector contents, real scalar i0)
    =        real scalar    i, r
    =real rowvector count_elements(struct prinfo scalar pr)
    =        real scalar    i, n, na
    =string rowvector numeric_varnames_of_el(struct elinfo scalar el)
    =void verify_no_strls(struct prinfo scalar pr)
    =real scalar has_strls(struct prinfo scalar pr)
    =        real scalar    i
    =                if (has_strls_j(*(pr.el[i]))) return(1)
    =        return(0)
    =real scalar has_strls_j(struct elinfo scalar el)
    =        real scalar    j
    =                if (st_vartype(el.contents[j])=="strL") return(1)
    =        return(0)
    {hline 77} begin putmata {hline}
    - version 11
    - syntax [anything(name=putlist id="putlist" equalok)] [if] [in] [, OMITmissing REPLACE VIEW]
    - marksample touse, novarlist
    - if ("`in'"!="") {c -(}
    = if (""!="") {c -(}
      local in = substr("`in'", 3, .)
      {c )-}
    - mata: put("`touse'", "`in'")
    = mata: put("__000000", "")
      {hline 78} begin unab {hline}
      - version 6
      - gettoken user 0: 0, parse(" :")
      - gettoken colon 0: 0, parse(" :")
      - if `"`colon'"' != ":" {c -(} error 198 {c )-}
      = if `":"' != ":" {c -(} error 198 {c )-}
      - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 32767) NAME(string)]
      - c_local `user' `varlist'
      = c_local _parse_varlist v1 var_name topic_name var_type var_desc lookfor_values date_added v8
      - local n : word count `varlist'
      = local n : word count v1 var_name topic_name var_type var_desc lookfor_values date_added v8
      - if `n'>=`min' & `n'<=`max' {c -(} exit {c )-}
      = if 8>=1 & 8<=32767 {c -(} exit {c )-}
      {hline 80} end unab {hline}
    {hline 79} end putmata {hline}
  - {c )-}
  - if mi("`load'") db_load, db(`db')
  = if mi("") db_load, db(indicators)
    {hline 77} begin db_load {hline}
    - syntax, db(str)
    - if "`db'" == "codebook" {c -(}
    = if "indicators" == "codebook" {c -(}
      foreach topic in basic $sel_topics {c -(}
      gs_db, topic(`topic') obj("codebook")
      ds
      local cb_vars `r(varlist)'
      local vars ubcov_id $vars
      local drop_vars : list cb_vars - vars
      drop `drop_vars'
      destring ubcov_id, replace force
      drop if ubcov_id == .
      duplicates tag $key, gen(kittendupe)
      tab kittendupe if kittendupe > 0
      if `r(N)' > 0 {c -(}
      di as error "Duplicates in codebook (`topic'). Please address."
      br if kittendupe > 0
      STOP
      {c )-}
      drop kittendupe
      if "`topic'" == "basic" {c -(}
      keep if !mi(ubcov_id)
      tempfile temp
      save `temp', replace
      {c )-}
      else {c -(}
      drop nid survey_name ihme_loc_id year_start year_end survey_module file_path
      merge 1:1 ubcov_id using `temp', gen(kittenmerge_`topic') keep(2 3)
      replace kittenmerge_`topic' = 0 if kittenmerge_`topic' != 3
      save `temp', replace
      {c )-}
      {c )-}
      if "$sel_topics" != "basic" {c -(}
      egen kittenkeep = rowtotal(kittenmerge_*)
      keep if kittenkeep > 0
      {c )-}
      keep ubcov_id $vars
      order ubcov_id $vars
      sort ubcov_id
      {c )-}
    - else {c -(}
    - gs_db, obj(`db')
    = gs_db, obj(indicators)
      {hline 77} begin gs_db {hline}
      - syntax, obj(str) [topic(str)]
      - local links = "1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY"
      - gs_load, key(`links')
      = gs_load, key(1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY)
        {hline 73} begin gs_load {hline}
        - syntax, key(str)
        - preserve
        - clear
          {hline 73} begin clear {hline}
          - if _caller() < 10 {c -(}
            _clear_9 `0'
            exit
            {c )-}
          - version 10
          - syntax [anything]
          - tokenize `anything'
          = tokenize 
          - if `"`2'"' != "" {c -(}
          = if `""' != "" {c -(}
            display as err "`2' not allowed"
            exit 198
            {c )-}
          - if "`1'"=="" {c -(}
          = if ""=="" {c -(}
          - drop _all
          - label drop _all
            {hline 71} begin label {hline}
            - version 10.0
            - gettoken val : 0
            - if (strpos("`val'", "val") > 0 ) {c -(}
            = if (strpos("drop", "val") > 0 ) {c -(}
              gettoken val 0 : 0
              syntax anything [, nofix]
              if "`fix'" != "" {c -(}
              local fix ", nofix"
              {c )-}
              gettoken var rest : anything
              while `"`rest'"' != "" {c -(}
              gettoken lab rest : rest
              local label "`lab'"
              {c )-}
              local vlist : list anything - lab
              if "`lab'" == "." {c -(}
              local lab ""
              {c )-}
              foreach var of varlist `vlist' {c -(}
              _label `val' `var' `lab' `fix'
              {c )-}
              {c )-}
            - else {c -(}
            - _label `macval(0)'
            = _label drop _all
            - {c )-}
            {hline 73} end label {hline}
          - {c )-}
          - else if "`1'"=="mata" {c -(}
          = else if ""=="mata" {c -(}
            mata: mata clear
            {c )-}
          - else if inlist("`1'", "results", "matrix") {c -(}
          = else if inlist("", "results", "matrix") {c -(}
            return clear
            clearreturn
            ereturn clear
            sreturn clear
            _return drop _all
            if ("`1'" == "matrix") {c -(}
            matrix drop _all
            _est drop _all
            {c )-}
            {c )-}
          - else if "`1'"=="programs" {c -(}
          = else if ""=="programs" {c -(}
            program drop _all
            {c )-}
          - else if "`1'"=="ado" {c -(}
          = else if ""=="ado" {c -(}
            program drop _allado
            {c )-}
          - else if "`1'"=="*" | "`1'"=="all" {c -(}
          = else if ""=="*" | ""=="all" {c -(}
            capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
            capture
            if (0`semmods') {c -(}
            display as err "-clear all- not allowed while an SEM Builder is open"
            exit 1
            {c )-}
            drop _all
            label drop _all
            matrix drop _all
            scalar drop _all
            constraint drop _all
            eq drop _all
            file close _all
            postutil clear
            _return drop _all
            discard
            program drop _all
            timer clear
            mata: mata clear
            {c )-}
          - else {c -(}
            display as err "`1' not allowed"
            exit 198
            {c )-}
          {hline 75} end clear {hline}
        - set obs 1
        - gen blah = 1
        - tempfile temp
        - save `temp', replace
        = save /tmp/St48035.000002, replace
        - restore
        - local link "https://docs.google.com/spreadsheets/d/`key'/export?format=csv"
        = local link "https://docs.google.com/spreadsheets/d/1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY/export?format=csv"
        - copy "`link'" `temp'
        = copy "https://docs.google.com/spreadsheets/d/1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY/export?format=csv" /tmp/St48035.000002
        - import delimited using `temp', clear varnames(1) stringcols(_all) charset("utf-8")
        = import delimited using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
          {hline 72} begin import {hline}
          - version 12
          - gettoken subcmd 0 : 0, parse(" ,")
          - if `"`subcmd'"' == "delim" {c -(}
          = if `"delimited"' == "delim" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimi" {c -(}
          = else if `"delimited"' == "delimi" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimit" {c -(}
          = else if `"delimited"' == "delimit" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimite" {c -(}
          = else if `"delimited"' == "delimite" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimited" {c -(}
          = else if `"delimited"' == "delimited" {c -(}
          - ImpDelim `0'
          = ImpDelim  using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
            {hline 61} begin import.ImpDelim {hline}
            - version 13
            - import_delimited `0'
            = import_delimited using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
              {hline 58} begin import_delimited {hline}
              - version 13
              - gettoken filename rest : 0, parse(" ,")
              - gettoken comma : rest, parse(" ,")
              - if (`"`filename'"' != "" & (trim(`"`comma'"') == "," | trim(`"`comma'"') == "")) {c -(}
              = if (`"using"' != "" & (trim(`"/tmp/St48035.000002"') == "," | trim(`"/tmp/St48035.000002"') == "")) {c -(}
                local 0 `"using `0'"'
                {c )-}
              - capture syntax using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
              - if _rc {c -(}
                syntax [anything(name=vlist id="vlist")] using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
                {c )-}
              - mata:import_delim_import_file()
                {hline 67} begin clear {hline}
                - if _caller() < 10 {c -(}
                  _clear_9 `0'
                  exit
                  {c )-}
                - version 10
                - syntax [anything]
                - tokenize `anything'
                = tokenize 
                - if `"`2'"' != "" {c -(}
                = if `""' != "" {c -(}
                  display as err "`2' not allowed"
                  exit 198
                  {c )-}
                - if "`1'"=="" {c -(}
                = if ""=="" {c -(}
                - drop _all
                - label drop _all
                  {hline 65} begin label {hline}
                  - version 10.0
                  - gettoken val : 0
                  - if (strpos("`val'", "val") > 0 ) {c -(}
                  = if (strpos("drop", "val") > 0 ) {c -(}
                    gettoken val 0 : 0
                    syntax anything [, nofix]
                    if "`fix'" != "" {c -(}
                    local fix ", nofix"
                    {c )-}
                    gettoken var rest : anything
                    while `"`rest'"' != "" {c -(}
                    gettoken lab rest : rest
                    local label "`lab'"
                    {c )-}
                    local vlist : list anything - lab
                    if "`lab'" == "." {c -(}
                    local lab ""
                    {c )-}
                    foreach var of varlist `vlist' {c -(}
                    _label `val' `var' `lab' `fix'
                    {c )-}
                    {c )-}
                  - else {c -(}
                  - _label `macval(0)'
                  = _label drop _all
                  - {c )-}
                  {hline 67} end label {hline}
                - {c )-}
                - else if "`1'"=="mata" {c -(}
                = else if ""=="mata" {c -(}
                  mata: mata clear
                  {c )-}
                - else if inlist("`1'", "results", "matrix") {c -(}
                = else if inlist("", "results", "matrix") {c -(}
                  return clear
                  clearreturn
                  ereturn clear
                  sreturn clear
                  _return drop _all
                  if ("`1'" == "matrix") {c -(}
                  matrix drop _all
                  _est drop _all
                  {c )-}
                  {c )-}
                - else if "`1'"=="programs" {c -(}
                = else if ""=="programs" {c -(}
                  program drop _all
                  {c )-}
                - else if "`1'"=="ado" {c -(}
                = else if ""=="ado" {c -(}
                  program drop _allado
                  {c )-}
                - else if "`1'"=="*" | "`1'"=="all" {c -(}
                = else if ""=="*" | ""=="all" {c -(}
                  capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
                  capture
                  if (0`semmods') {c -(}
                  display as err "-clear all- not allowed while an SEM Builder is open"
                  exit 1
                  {c )-}
                  drop _all
                  label drop _all
                  matrix drop _all
                  scalar drop _all
                  constraint drop _all
                  eq drop _all
                  file close _all
                  postutil clear
                  _return drop _all
                  discard
                  program drop _all
                  timer clear
                  mata: mata clear
                  {c )-}
                - else {c -(}
                  display as err "`1' not allowed"
                  exit 198
                  {c )-}
                {hline 69} end clear {hline}
              {hline 60} end import_delimited {hline}
            {hline 63} end import.ImpDelim {hline}
          - {c )-}
          - else if `"`subcmd'"' == "exc" {c -(}
          = else if `"delimited"' == "exc" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "exce" {c -(}
          = else if `"delimited"' == "exce" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "excel" {c -(}
          = else if `"delimited"' == "excel" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "hav" {c -(}
          = else if `"delimited"' == "hav" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "have" {c -(}
          = else if `"delimited"' == "have" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "haver" {c -(}
          = else if `"delimited"' == "haver" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "sasxport" {c -(}
          = else if `"delimited"' == "sasxport" {c -(}
            ImpSasxport `0'
            {c )-}
          - else {c -(}
            display as error `"import: unknown subcommand "`subcmd'""'
            exit 198
            {c )-}
          {hline 74} end import {hline}
        {hline 75} end gs_load {hline}
      - keep if obj =="`obj'"
      = keep if obj =="indicators"
      - if !mi("`topic'") keep if topic == "`topic'"
      = if !mi("") keep if topic == ""
      - if _N == 0 {c -(}
        di as error "Codebook not listed in links (https://docs.google.com/spreadsheets/d/`links'/edit#gid=0)"
        STOP
        {c )-}
      - if _N > 1 {c -(}
        if !mi("`topic'") di as error "Duplicates in topic (`topic') and obj (`obj')"
        else di as error "Duplicates in obj (`obj')"
        STOP
        {c )-}
      - else {c -(}
      - local key `=key[1]'
      = local key 1102j0K8qd11v3BUzo-AXEBdr5eu-MUg415gc7Rqgj1w
      - gs_load, key(`key')
      = gs_load, key(1102j0K8qd11v3BUzo-AXEBdr5eu-MUg415gc7Rqgj1w)
        {hline 73} begin gs_load {hline}
        - syntax, key(str)
        - preserve
        - clear
          {hline 73} begin clear {hline}
          - if _caller() < 10 {c -(}
            _clear_9 `0'
            exit
            {c )-}
          - version 10
          - syntax [anything]
          - tokenize `anything'
          = tokenize 
          - if `"`2'"' != "" {c -(}
          = if `""' != "" {c -(}
            display as err "`2' not allowed"
            exit 198
            {c )-}
          - if "`1'"=="" {c -(}
          = if ""=="" {c -(}
          - drop _all
          - label drop _all
            {hline 71} begin label {hline}
            - version 10.0
            - gettoken val : 0
            - if (strpos("`val'", "val") > 0 ) {c -(}
            = if (strpos("drop", "val") > 0 ) {c -(}
              gettoken val 0 : 0
              syntax anything [, nofix]
              if "`fix'" != "" {c -(}
              local fix ", nofix"
              {c )-}
              gettoken var rest : anything
              while `"`rest'"' != "" {c -(}
              gettoken lab rest : rest
              local label "`lab'"
              {c )-}
              local vlist : list anything - lab
              if "`lab'" == "." {c -(}
              local lab ""
              {c )-}
              foreach var of varlist `vlist' {c -(}
              _label `val' `var' `lab' `fix'
              {c )-}
              {c )-}
            - else {c -(}
            - _label `macval(0)'
            = _label drop _all
            - {c )-}
            {hline 73} end label {hline}
          - {c )-}
          - else if "`1'"=="mata" {c -(}
          = else if ""=="mata" {c -(}
            mata: mata clear
            {c )-}
          - else if inlist("`1'", "results", "matrix") {c -(}
          = else if inlist("", "results", "matrix") {c -(}
            return clear
            clearreturn
            ereturn clear
            sreturn clear
            _return drop _all
            if ("`1'" == "matrix") {c -(}
            matrix drop _all
            _est drop _all
            {c )-}
            {c )-}
          - else if "`1'"=="programs" {c -(}
          = else if ""=="programs" {c -(}
            program drop _all
            {c )-}
          - else if "`1'"=="ado" {c -(}
          = else if ""=="ado" {c -(}
            program drop _allado
            {c )-}
          - else if "`1'"=="*" | "`1'"=="all" {c -(}
          = else if ""=="*" | ""=="all" {c -(}
            capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
            capture
            if (0`semmods') {c -(}
            display as err "-clear all- not allowed while an SEM Builder is open"
            exit 1
            {c )-}
            drop _all
            label drop _all
            matrix drop _all
            scalar drop _all
            constraint drop _all
            eq drop _all
            file close _all
            postutil clear
            _return drop _all
            discard
            program drop _all
            timer clear
            mata: mata clear
            {c )-}
          - else {c -(}
            display as err "`1' not allowed"
            exit 198
            {c )-}
          {hline 75} end clear {hline}
        - set obs 1
        - gen blah = 1
        - tempfile temp
        - save `temp', replace
        = save /tmp/St48035.000002, replace
        - restore
        - local link "https://docs.google.com/spreadsheets/d/`key'/export?format=csv"
        = local link "https://docs.google.com/spreadsheets/d/1102j0K8qd11v3BUzo-AXEBdr5eu-MUg415gc7Rqgj1w/export?format=csv"
        - copy "`link'" `temp'
        = copy "https://docs.google.com/spreadsheets/d/1102j0K8qd11v3BUzo-AXEBdr5eu-MUg415gc7Rqgj1w/export?format=csv" /tmp/St48035.000002
        - import delimited using `temp', clear varnames(1) stringcols(_all) charset("utf-8")
        = import delimited using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
          {hline 72} begin import {hline}
          - version 12
          - gettoken subcmd 0 : 0, parse(" ,")
          - if `"`subcmd'"' == "delim" {c -(}
          = if `"delimited"' == "delim" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimi" {c -(}
          = else if `"delimited"' == "delimi" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimit" {c -(}
          = else if `"delimited"' == "delimit" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimite" {c -(}
          = else if `"delimited"' == "delimite" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimited" {c -(}
          = else if `"delimited"' == "delimited" {c -(}
          - ImpDelim `0'
          = ImpDelim  using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
            {hline 61} begin import.ImpDelim {hline}
            - version 13
            - import_delimited `0'
            = import_delimited using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
              {hline 58} begin import_delimited {hline}
              - version 13
              - gettoken filename rest : 0, parse(" ,")
              - gettoken comma : rest, parse(" ,")
              - if (`"`filename'"' != "" & (trim(`"`comma'"') == "," | trim(`"`comma'"') == "")) {c -(}
              = if (`"using"' != "" & (trim(`"/tmp/St48035.000002"') == "," | trim(`"/tmp/St48035.000002"') == "")) {c -(}
                local 0 `"using `0'"'
                {c )-}
              - capture syntax using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
              - if _rc {c -(}
                syntax [anything(name=vlist id="vlist")] using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
                {c )-}
              - mata:import_delim_import_file()
                {hline 67} begin clear {hline}
                - if _caller() < 10 {c -(}
                  _clear_9 `0'
                  exit
                  {c )-}
                - version 10
                - syntax [anything]
                - tokenize `anything'
                = tokenize 
                - if `"`2'"' != "" {c -(}
                = if `""' != "" {c -(}
                  display as err "`2' not allowed"
                  exit 198
                  {c )-}
                - if "`1'"=="" {c -(}
                = if ""=="" {c -(}
                - drop _all
                - label drop _all
                  {hline 65} begin label {hline}
                  - version 10.0
                  - gettoken val : 0
                  - if (strpos("`val'", "val") > 0 ) {c -(}
                  = if (strpos("drop", "val") > 0 ) {c -(}
                    gettoken val 0 : 0
                    syntax anything [, nofix]
                    if "`fix'" != "" {c -(}
                    local fix ", nofix"
                    {c )-}
                    gettoken var rest : anything
                    while `"`rest'"' != "" {c -(}
                    gettoken lab rest : rest
                    local label "`lab'"
                    {c )-}
                    local vlist : list anything - lab
                    if "`lab'" == "." {c -(}
                    local lab ""
                    {c )-}
                    foreach var of varlist `vlist' {c -(}
                    _label `val' `var' `lab' `fix'
                    {c )-}
                    {c )-}
                  - else {c -(}
                  - _label `macval(0)'
                  = _label drop _all
                  - {c )-}
                  {hline 67} end label {hline}
                - {c )-}
                - else if "`1'"=="mata" {c -(}
                = else if ""=="mata" {c -(}
                  mata: mata clear
                  {c )-}
                - else if inlist("`1'", "results", "matrix") {c -(}
                = else if inlist("", "results", "matrix") {c -(}
                  return clear
                  clearreturn
                  ereturn clear
                  sreturn clear
                  _return drop _all
                  if ("`1'" == "matrix") {c -(}
                  matrix drop _all
                  _est drop _all
                  {c )-}
                  {c )-}
                - else if "`1'"=="programs" {c -(}
                = else if ""=="programs" {c -(}
                  program drop _all
                  {c )-}
                - else if "`1'"=="ado" {c -(}
                = else if ""=="ado" {c -(}
                  program drop _allado
                  {c )-}
                - else if "`1'"=="*" | "`1'"=="all" {c -(}
                = else if ""=="*" | ""=="all" {c -(}
                  capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
                  capture
                  if (0`semmods') {c -(}
                  display as err "-clear all- not allowed while an SEM Builder is open"
                  exit 1
                  {c )-}
                  drop _all
                  label drop _all
                  matrix drop _all
                  scalar drop _all
                  constraint drop _all
                  eq drop _all
                  file close _all
                  postutil clear
                  _return drop _all
                  discard
                  program drop _all
                  timer clear
                  mata: mata clear
                  {c )-}
                - else {c -(}
                  display as err "`1' not allowed"
                  exit 198
                  {c )-}
                {hline 69} end clear {hline}
              {hline 60} end import_delimited {hline}
            {hline 63} end import.ImpDelim {hline}
          - {c )-}
          - else if `"`subcmd'"' == "exc" {c -(}
          = else if `"delimited"' == "exc" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "exce" {c -(}
          = else if `"delimited"' == "exce" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "excel" {c -(}
          = else if `"delimited"' == "excel" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "hav" {c -(}
          = else if `"delimited"' == "hav" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "have" {c -(}
          = else if `"delimited"' == "have" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "haver" {c -(}
          = else if `"delimited"' == "haver" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "sasxport" {c -(}
          = else if `"delimited"' == "sasxport" {c -(}
            ImpSasxport `0'
            {c )-}
          - else {c -(}
            display as error `"import: unknown subcommand "`subcmd'""'
            exit 198
            {c )-}
          {hline 74} end import {hline}
        {hline 75} end gs_load {hline}
      - {c )-}
      {hline 79} end gs_db {hline}
    - {c )-}
    {hline 79} end db_load {hline}
  - if !mi("`load'") import delimited using "`load'/`db'.csv", clear varnames(1) stringcols(_all) charset("utf-8")
  = if !mi("") import delimited using "/indicators.csv", clear varnames(1) stringcols(_all) charset("utf-8")
  - if !mi("`save'") export delimited using "`save'/`db'.csv", replace
  = if !mi("") export delimited using "/indicators.csv", replace
  - tostring *, replace
    {hline 76} begin tostring {hline}
    - version 8.0
    - syntax varlist, [Generate(string) replace] [force] [format(str) Usedisplayformat]
    - if "`generate'" != "" & "`replace'" != "" {c -(}
    = if "" != "" & "replace" != "" {c -(}
      di as err "{c -(}p{c )-}options generate and replace are mutually exclusive{c -(}p_end{c )-}"
      exit 198
      {c )-}
    - if "`generate'" == "" & "`replace'" == "" {c -(}
    = if "" == "" & "replace" == "" {c -(}
      di as err "{c -(}p{c )-}must specify either generate or replace option{c -(}p_end{c )-}"
      exit 198
      {c )-}
    - if "`generate'" != "" {c -(}
    = if "" != "" {c -(}
      local ct1: word count `varlist'
      local save "`varlist'"
      local 0 "`generate'"
      capture syntax newvarlist
      if _rc {c -(}
      di as err "generate(newvarlist) invalid"
      exit _rc
      {c )-}
      local generate "`varlist'"
      local varlist "`save'"
      local ct2: word count `generate'
      if `ct1' != `ct2' {c -(}
      di as err "{c -(}p{c )-}number of variables in varlist " "must equal number of variables in generate(newvarlist){c -(}p_end{c )-}"
      exit 198
      {c )-}
      {c )-}
    - if "`usedisplayformat'" != "" & "`format'" != "" {c -(}
    = if "" != "" & "" != "" {c -(}
      di as err "{c -(}p{c )-}must choose between usedisplayformat and format() options{c -(}p_end{c )-}"
      exit 198
      {c )-}
    - if "`format'" != "" {c -(}
    = if "" != "" {c -(}
      if index("`format'", "s") {c -(}
      di as err "use numeric format in format() option"
      exit 198
      {c )-}
      capture di `format' 12345.67890
      if _rc {c -(}
      di as err "format() option invalid"
      exit 198
      {c )-}
      local fmt "`format'"
      local format `", "`format'""'
      {c )-}
    - else {c -(}
    - local fmt "%12.0g"
    - local format `", "%12.0g""'
    - {c )-}
    - local u = "`usedisplayformat'" != ""
    = local u = "" != ""
    - if "`generate'" != "" {c -(}
    = if "" != "" {c -(}
      tokenize `generate'
      local i = 0
      foreach v of local varlist {c -(}
      local ++i
      capture confirm string variable `v'
      if _rc == 0 {c -(}
      di as txt "`v' already string; no " as res "generate"
      {c )-}
      else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "generate"
      {c )-}
      else {c -(}
      gen ``i'' = `temp'
      di as txt "``i'' generated as {c -(}res:`: type ``i'''{c )-}"
      _crcslbl ``i'' `v'
      move ``i'' `v'
      move `v' ``i''
      Charcopy `v' ``i''
      if `flag' & "`force'" != "" {c -(}
      di as txt "``i'' was forced to string; some loss of information"
      char ``i''[tostring] "forced to string; `fmt'"
      {c )-}
      else char ``i''[tostring] "converted to string"
      {c )-}
      drop `temp'
      {c )-}
      {c )-}
      {c )-}
    - else if "`replace'" != "" {c -(}
    = else if "replace" != "" {c -(}
    - foreach v of local varlist {c -(}
    - capture confirm string variable `v'
    = capture confirm string variable v1
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "v1 already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable indicator_name
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "indicator_name already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable topic_name
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "topic_name already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable indicator_desc
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "indicator_desc already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable indicator_type
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "indicator_type already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable input_vars
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "input_vars already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable input_meta
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "input_meta already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable map_indicator
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "map_indicator already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable code_custom
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "code_custom already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable indicator_required
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "indicator_required already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable indicator_validation
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "indicator_validation already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable date_added
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "date_added already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable last_modified
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "last_modified already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - {c )-}
    {hline 78} end tostring {hline}
  - inlist2, obj(topic_name) vals(`topics') str(vals)
  = inlist2, obj(topic_name) vals(basic design demographics geography hap) str(vals)
    {hline 77} begin inlist2 {hline}
    - syntax, obj(str) vals(str) [cond(str) str(str) string]
    - if !mi("`cond'") {c -(}
    = if !mi("") {c -(}
      if !inlist("`cond'", "&", "|") {c -(}
      STOP
      {c )-}
      local cond `cond'
      {c )-}
    - else {c -(}
    - local cond |
    - {c )-}
    - local i 1
    - local cmd 1==0
    - foreach val in `vals' {c -(}
    = foreach val in basic design demographics geography hap {c -(}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | "topic_name" == basic
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | "topic_name" == "basic"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | "topic_name" == design
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | "topic_name" == "design"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | "topic_name" == demographics
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | "topic_name" == "demographics"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | "topic_name" == geography
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | "topic_name" == "geography"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | "topic_name" == hap
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap" | "topic_name" == "hap"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - return local cmd "`cmd'"
    = return local cmd "1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap""
    {hline 79} end inlist2 {hline}
  - local ifcmd `r(cmd)'
  = local ifcmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap"
  - if "`db'" == "vars" {c -(}
  = if "indicators" == "vars" {c -(}
    keep if `ifcmd'
    global vars
    forvalues i = 1/`=_N' {c -(}
    global vars $vars `=var_name[`i']'
    {c )-}
    {c )-}
  - if "`db'" == "indicators" {c -(}
  = if "indicators" == "indicators" {c -(}
  - keep if `ifcmd'
  = keep if 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap"
  - global indicators
  - forvalues i = 1/`=_N' {c -(}
  = forvalues i = 1/53 {c -(}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators  file_path
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4 admin_5
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4 admin_5 latitude
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4 admin_5 latitude longitude
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4 admin_5 latitude longitude urban
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4 admin_5 latitude longitude urban hh_size
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4 admin_5 latitude longitude urban hh_size cooking_fuel
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4 admin_5 latitude longitude urban hh_size cooking_fuel cooking_type
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4 admin_5 latitude longitude urban hh_size cooking_fuel cooking_type cooking_type_chimney
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4 admin_5 latitude longitude urban hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4 admin_5 latitude longitude urban hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4 admin_5 latitude longitude urban hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4 admin_5 latitude longitude urban hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4 admin_5 latitude longitude urban hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4 admin_5 latitude longitude urban hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel electricity
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4 admin_5 latitude longitude urban hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel electricity housing_roof
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4 admin_5 latitude longitude urban hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel electricity housing_roof housing_wall
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4 admin_5 latitude longitude urban hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel electricity housing_roof housing_wall housing_floor
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4 admin_5 latitude longitude urban hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel electricity housing_roof housing_wall housing_floor housing_roof_num
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4 admin_5 latitude longitude urban hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel electricity housing_roof housing_wall housing_floor housing_roof_num housing_wall_num
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4 admin_5 latitude longitude urban hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel electricity housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num
  - {c )-}
  - global indicators $indicators `=indicator_name[`i']'
  = global indicators file_path ihme_loc_id nid survey_module survey_name year_end year_start age_categorical age_day age_month age_year int_day int_month int_year sex_id geospatial_id hh_id hhweight line_id psu psu_recode pweight pweight_admin_1 pweight_admin_2 pweight_admin_3 smaller_site_unit strata strata_recode admin_1 admin_2 admin_3 admin_4 admin_5 latitude longitude urban hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel electricity housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num cooking_fuel_multi
  - {c )-}
  - {c )-}
  - ds
    {hline 82} begin ds {hline}
    - version 9
    - local version : di "version " string(_caller()) ":"
    - if (_caller() <= 4) {c -(}
      `version' describe, simple
      exit
      {c )-}
    - else {c -(}
    - ds_util `0'
    = ds_util 
      {hline 75} begin ds_util {hline}
      - version 8
      - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detail Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
      - if "`varlist'" == "" {c -(}
      = if "v1 indicator_name topic_name indicator_desc indicator_type input_vars input_meta map_indicator code_custom indicator_required indicator_validation date_added last_modified" == "" {c -(}
        exit
        {c )-}
      - if !inrange(`indent',0,244) {c -(}
      = if !inrange(0,0,244) {c -(}
        di as err "indent() should be in the range 0..244"
        exit 198
        {c )-}
      - if !inrange(`varwidth',5,32) {c -(}
      = if !inrange(12,5,32) {c -(}
        di as err "varwidth() should be in the range 5..32"
        exit 198
        {c )-}
      - if !inrange(`skip',1,10) {c -(}
      = if !inrange(2,1,10) {c -(}
        di as err "skip() should be in the range 1..10"
        exit 198
        {c )-}
      - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
      = local nopts = (`""' != "") + (`""' != "") + ("" != "")
      - if `nopts' == 3 {c -(}
      = if 0 == 3 {c -(}
        di as err "may not combine options has(), not(), and not"
        exit 198
        {c )-}
      - else if `nopts' == 2 {c -(}
      = else if 0 == 2 {c -(}
        if (`"`has'"' == "") {c -(}
        di as err "may not combine options not() and not"
        exit 198
        {c )-}
        else if (`"`not'"' == "") {c -(}
        di as err "may not combine options has() and not"
        exit 198
        {c )-}
        else if (`"`not2'"' == "") {c -(}
        di as err "may not combine options has() and not()"
        exit 198
        {c )-}
        {c )-}
      - if `"`not'"' != "" {c -(}
      = if `""' != "" {c -(}
        local has `"`not'"'
        local opt "not"
        {c )-}
      - else if `"`has'"' != "" {c -(}
      = else if `""' != "" {c -(}
        local opt "has"
        {c )-}
      - local inse = "`insensitive'" != ""
      = local inse = "" != ""
      - if `"`has'"' != "" {c -(}
      = if `""' != "" {c -(}
        CheckHas `"`has'"' "`opt'" "`inse'"
        if "`what'" == "varl" | "`what'" == "vall" {c -(}
        VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
        {c )-}
        else if "`what'" == "f" {c -(}
        Format `"`which'"' "`varlist'" "`inse'"
        {c )-}
        else if "`what'" == "c" {c -(}
        Char `"`which'"' "`varlist'" "`inse'"
        {c )-}
        else if "`what'" == "t" {c -(}
        Type `"`which'"' "`varlist'"
        {c )-}
        if `"`not'"' != "" {c -(}
        local varlist : list varlist - vlist
        {c )-}
        else if `"`has'"' != "" {c -(}
        local varlist "`vlist'"
        {c )-}
        {c )-}
      - if `"`not2'"' != "" {c -(}
      = if `""' != "" {c -(}
        unab all : *
        local varlist : list all - varlist
        {c )-}
      - if "`varlist'" == "" {c -(}
      = if "v1 indicator_name topic_name indicator_desc indicator_type input_vars input_meta map_indicator code_custom indicator_required indicator_validation date_added last_modified" == "" {c -(}
        exit
        {c )-}
      - if "`alpha'" != "" {c -(}
      = if "" != "" {c -(}
        local varlist : list sort varlist
        {c )-}
      - if "`detail'" != "" {c -(}
      = if "" != "" {c -(}
        describe `varlist'
        {c )-}
      - else {c -(}
      - local nvar : word count `varlist'
      = local nvar : word count v1 indicator_name topic_name indicator_desc indicator_type input_vars input_meta map_indicator code_custom indicator_required indicator_validation date_added last_modified
      - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
      = local ncol = int((99 + 2) / (12 + 2))
      - local i 0
      - local vlist
      - foreach v of local varlist {c -(}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" v1"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" v1 indicator~me"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" v1 indicator~me topic_name"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" v1 indicator~me topic_name indicator_~c"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" v1 indicator~me topic_name indicator_~c indicator~pe"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" v1 indicator~me topic_name indicator_~c indicator~pe input_vars"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" v1 indicator~me topic_name indicator_~c indicator~pe input_vars input_meta"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" v1 indicator~me topic_name indicator_~c indicator~pe input_vars input_meta map_indica~r"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" v1 indicator~me topic_name indicator_~c indicator~pe input_vars input_meta map_indica~r code_custom"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" v1 indicator~me topic_name indicator_~c indicator~pe input_vars input_meta map_indica~r code_custom indicator_~d"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" v1 indicator~me topic_name indicator_~c indicator~pe input_vars input_meta map_indica~r code_custom indicator_~d indicator_~n"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" v1 indicator~me topic_name indicator_~c indicator~pe input_vars input_meta map_indica~r code_custom indicator_~d indicator_~n date_added"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" v1 indicator~me topic_name indicator_~c indicator~pe input_vars input_meta map_indica~r code_custom indicator_~d indicator_~n date_added last_modif~d"'
      - {c )-}
      - DisplayInCols txt `indent' `skip' 0 `vlist'
      = DisplayInCols txt 0 2 0  v1 indicator~me topic_name indicator_~c indicator~pe input_vars input_meta map_indica~r code_custom indicator_~d indicator_~n date_added last_modif~d
        {hline 59} begin ds_util.DisplayInCols {hline}
        - gettoken sty 0 : 0
        - gettoken indent 0 : 0
        - gettoken pad 0 : 0
        - gettoken wid 0 : 0
        - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
        = local indent = cond(0==. | 0<0, 0, 0)
        - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
        = local pad = cond(2==. | 2<1, 2, 2)
        - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
        = local wid = cond(0==. | 0<0, 0, 0)
        - local n : list sizeof 0
        - if `n'==0 {c -(}
        = if 13==0 {c -(}
          exit
          {c )-}
        - foreach x of local 0 {c -(}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(0, length(`"v1"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(2, length(`"indicator~me"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"topic_name"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"indicator_~c"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"indicator~pe"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"input_vars"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"input_meta"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"map_indica~r"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"code_custom"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"indicator_~d"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"indicator_~n"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"date_added"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"last_modif~d"'))
        - {c )-}
        - local wid = `wid' + `pad'
        = local wid = 12 + 2
        - local cols = int((`c(linesize)'+1-`indent')/`wid')
        = local cols = int((99+1-0)/14)
        - if `cols' < 2 {c -(}
        = if 7 < 2 {c -(}
          if `indent' {c -(}
          local col "_column(`=`indent'+1')"
          {c )-}
          foreach x of local 0 {c -(}
          di as `sty' `col' `"`x'"'
          {c )-}
          exit
          {c )-}
        - local lines = `n'/`cols'
        = local lines = 13/7
        - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        = local lines = int(cond(1.857142857142857>int(1.857142857142857), 1.857142857142857+1, 1.857142857142857))
        - forvalues i=1(1)`lines' {c -(}
        = forvalues i=1(1)2 {c -(}
        - local top = min((`cols')*`lines'+`i', `n')
        = local top = min((7)*2+1, 13)
        - local col = `indent' + 1
        = local col = 0 + 1
        - forvalues j=`i'(`lines')`top' {c -(}
        = forvalues j=1(2)13 {c -(}
        - local x : word `j' of `0'
        = local x : word 1 of   v1 indicator~me topic_name indicator_~c indicator~pe input_vars input_meta map_indica~r code_custom indicator_~d indicator_~n date_added last_modif~d
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(1) "v1" _c
        - local col = `col' + `wid'
        = local col = 1 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 3 of   v1 indicator~me topic_name indicator_~c indicator~pe input_vars input_meta map_indica~r code_custom indicator_~d indicator_~n date_added last_modif~d
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(15) "topic_name" _c
        - local col = `col' + `wid'
        = local col = 15 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 5 of   v1 indicator~me topic_name indicator_~c indicator~pe input_vars input_meta map_indica~r code_custom indicator_~d indicator_~n date_added last_modif~d
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(29) "indicator~pe" _c
        - local col = `col' + `wid'
        = local col = 29 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 7 of   v1 indicator~me topic_name indicator_~c indicator~pe input_vars input_meta map_indica~r code_custom indicator_~d indicator_~n date_added last_modif~d
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(43) "input_meta" _c
        - local col = `col' + `wid'
        = local col = 43 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 9 of   v1 indicator~me topic_name indicator_~c indicator~pe input_vars input_meta map_indica~r code_custom indicator_~d indicator_~n date_added last_modif~d
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(57) "code_custom" _c
        - local col = `col' + `wid'
        = local col = 57 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 11 of   v1 indicator~me topic_name indicator_~c indicator~pe input_vars input_meta map_indica~r code_custom indicator_~d indicator_~n date_added last_modif~d
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(71) "indicator_~n" _c
        - local col = `col' + `wid'
        = local col = 71 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 13 of   v1 indicator~me topic_name indicator_~c indicator~pe input_vars input_meta map_indica~r code_custom indicator_~d indicator_~n date_added last_modif~d
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(85) "last_modif~d" _c
        - local col = `col' + `wid'
        = local col = 85 + 14
        - {c )-}
        - di as `sty'
        = di as txt
        - {c )-}
        - local top = min((`cols')*`lines'+`i', `n')
        = local top = min((7)*2+2, 13)
        - local col = `indent' + 1
        = local col = 0 + 1
        - forvalues j=`i'(`lines')`top' {c -(}
        = forvalues j=2(2)13 {c -(}
        - local x : word `j' of `0'
        = local x : word 2 of   v1 indicator~me topic_name indicator_~c indicator~pe input_vars input_meta map_indica~r code_custom indicator_~d indicator_~n date_added last_modif~d
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(1) "indicator~me" _c
        - local col = `col' + `wid'
        = local col = 1 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 4 of   v1 indicator~me topic_name indicator_~c indicator~pe input_vars input_meta map_indica~r code_custom indicator_~d indicator_~n date_added last_modif~d
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(15) "indicator_~c" _c
        - local col = `col' + `wid'
        = local col = 15 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 6 of   v1 indicator~me topic_name indicator_~c indicator~pe input_vars input_meta map_indica~r code_custom indicator_~d indicator_~n date_added last_modif~d
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(29) "input_vars" _c
        - local col = `col' + `wid'
        = local col = 29 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 8 of   v1 indicator~me topic_name indicator_~c indicator~pe input_vars input_meta map_indica~r code_custom indicator_~d indicator_~n date_added last_modif~d
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(43) "map_indica~r" _c
        - local col = `col' + `wid'
        = local col = 43 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 10 of   v1 indicator~me topic_name indicator_~c indicator~pe input_vars input_meta map_indica~r code_custom indicator_~d indicator_~n date_added last_modif~d
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(57) "indicator_~d" _c
        - local col = `col' + `wid'
        = local col = 57 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 12 of   v1 indicator~me topic_name indicator_~c indicator~pe input_vars input_meta map_indica~r code_custom indicator_~d indicator_~n date_added last_modif~d
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(71) "date_added" _c
        - local col = `col' + `wid'
        = local col = 71 + 14
        - {c )-}
        - di as `sty'
        = di as txt
        - {c )-}
        {hline 61} end ds_util.DisplayInCols {hline}
      - {c )-}
      - return local varlist `varlist'
      = return local varlist v1 indicator_name topic_name indicator_desc indicator_type input_vars input_meta map_indicator code_custom indicator_required indicator_validation date_added last_modified
      {hline 77} end ds_util {hline}
    - exit
    {hline 84} end ds {hline}
  - global `db'_cols `r(varlist)'
  = global indicators_cols v1 indicator_name topic_name indicator_desc indicator_type input_vars input_meta map_indicator code_custom indicator_required indicator_validation date_added last_modified
  - putmata `db' = (${c -(}`db'_cols{c )-}), replace
  = putmata indicators = (v1 indicator_name topic_name indicator_desc indicator_type input_vars input_meta map_indicator code_custom indicator_required indicator_validation date_added last_modified), replace
    {hline 77} begin putmata {hline}
    - version 11
    - syntax [anything(name=putlist id="putlist" equalok)] [if] [in] [, OMITmissing REPLACE VIEW]
    - marksample touse, novarlist
    - if ("`in'"!="") {c -(}
    = if (""!="") {c -(}
      local in = substr("`in'", 3, .)
      {c )-}
    - mata: put("`touse'", "`in'")
    = mata: put("__000000", "")
      {hline 78} begin unab {hline}
      - version 6
      - gettoken user 0: 0, parse(" :")
      - gettoken colon 0: 0, parse(" :")
      - if `"`colon'"' != ":" {c -(} error 198 {c )-}
      = if `":"' != ":" {c -(} error 198 {c )-}
      - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 32767) NAME(string)]
      - c_local `user' `varlist'
      = c_local _parse_varlist v1 indicator_name topic_name indicator_desc indicator_type input_vars input_meta map_indicator code_custom indicator_required indicator_validation date_added last_modified
      - local n : word count `varlist'
      = local n : word count v1 indicator_name topic_name indicator_desc indicator_type input_vars input_meta map_indicator code_custom indicator_required indicator_validation date_added last_modified
      - if `n'>=`min' & `n'<=`max' {c -(} exit {c )-}
      = if 13>=1 & 13<=32767 {c -(} exit {c )-}
      {hline 80} end unab {hline}
    {hline 79} end putmata {hline}
  - {c )-}
  - if mi("`load'") db_load, db(`db')
  = if mi("") db_load, db(codebook)
    {hline 77} begin db_load {hline}
    - syntax, db(str)
    - if "`db'" == "codebook" {c -(}
    = if "codebook" == "codebook" {c -(}
    - foreach topic in basic $sel_topics {c -(}
    = foreach topic in basic hap {c -(}
    - gs_db, topic(`topic') obj("codebook")
    = gs_db, topic(basic) obj("codebook")
      {hline 77} begin gs_db {hline}
      - syntax, obj(str) [topic(str)]
      - local links = "1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY"
      - gs_load, key(`links')
      = gs_load, key(1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY)
        {hline 73} begin gs_load {hline}
        - syntax, key(str)
        - preserve
        - clear
          {hline 73} begin clear {hline}
          - if _caller() < 10 {c -(}
            _clear_9 `0'
            exit
            {c )-}
          - version 10
          - syntax [anything]
          - tokenize `anything'
          = tokenize 
          - if `"`2'"' != "" {c -(}
          = if `""' != "" {c -(}
            display as err "`2' not allowed"
            exit 198
            {c )-}
          - if "`1'"=="" {c -(}
          = if ""=="" {c -(}
          - drop _all
          - label drop _all
            {hline 71} begin label {hline}
            - version 10.0
            - gettoken val : 0
            - if (strpos("`val'", "val") > 0 ) {c -(}
            = if (strpos("drop", "val") > 0 ) {c -(}
              gettoken val 0 : 0
              syntax anything [, nofix]
              if "`fix'" != "" {c -(}
              local fix ", nofix"
              {c )-}
              gettoken var rest : anything
              while `"`rest'"' != "" {c -(}
              gettoken lab rest : rest
              local label "`lab'"
              {c )-}
              local vlist : list anything - lab
              if "`lab'" == "." {c -(}
              local lab ""
              {c )-}
              foreach var of varlist `vlist' {c -(}
              _label `val' `var' `lab' `fix'
              {c )-}
              {c )-}
            - else {c -(}
            - _label `macval(0)'
            = _label drop _all
            - {c )-}
            {hline 73} end label {hline}
          - {c )-}
          - else if "`1'"=="mata" {c -(}
          = else if ""=="mata" {c -(}
            mata: mata clear
            {c )-}
          - else if inlist("`1'", "results", "matrix") {c -(}
          = else if inlist("", "results", "matrix") {c -(}
            return clear
            clearreturn
            ereturn clear
            sreturn clear
            _return drop _all
            if ("`1'" == "matrix") {c -(}
            matrix drop _all
            _est drop _all
            {c )-}
            {c )-}
          - else if "`1'"=="programs" {c -(}
          = else if ""=="programs" {c -(}
            program drop _all
            {c )-}
          - else if "`1'"=="ado" {c -(}
          = else if ""=="ado" {c -(}
            program drop _allado
            {c )-}
          - else if "`1'"=="*" | "`1'"=="all" {c -(}
          = else if ""=="*" | ""=="all" {c -(}
            capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
            capture
            if (0`semmods') {c -(}
            display as err "-clear all- not allowed while an SEM Builder is open"
            exit 1
            {c )-}
            drop _all
            label drop _all
            matrix drop _all
            scalar drop _all
            constraint drop _all
            eq drop _all
            file close _all
            postutil clear
            _return drop _all
            discard
            program drop _all
            timer clear
            mata: mata clear
            {c )-}
          - else {c -(}
            display as err "`1' not allowed"
            exit 198
            {c )-}
          {hline 75} end clear {hline}
        - set obs 1
        - gen blah = 1
        - tempfile temp
        - save `temp', replace
        = save /tmp/St48035.000002, replace
        - restore
        - local link "https://docs.google.com/spreadsheets/d/`key'/export?format=csv"
        = local link "https://docs.google.com/spreadsheets/d/1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY/export?format=csv"
        - copy "`link'" `temp'
        = copy "https://docs.google.com/spreadsheets/d/1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY/export?format=csv" /tmp/St48035.000002
        - import delimited using `temp', clear varnames(1) stringcols(_all) charset("utf-8")
        = import delimited using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
          {hline 72} begin import {hline}
          - version 12
          - gettoken subcmd 0 : 0, parse(" ,")
          - if `"`subcmd'"' == "delim" {c -(}
          = if `"delimited"' == "delim" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimi" {c -(}
          = else if `"delimited"' == "delimi" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimit" {c -(}
          = else if `"delimited"' == "delimit" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimite" {c -(}
          = else if `"delimited"' == "delimite" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimited" {c -(}
          = else if `"delimited"' == "delimited" {c -(}
          - ImpDelim `0'
          = ImpDelim  using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
            {hline 61} begin import.ImpDelim {hline}
            - version 13
            - import_delimited `0'
            = import_delimited using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
              {hline 58} begin import_delimited {hline}
              - version 13
              - gettoken filename rest : 0, parse(" ,")
              - gettoken comma : rest, parse(" ,")
              - if (`"`filename'"' != "" & (trim(`"`comma'"') == "," | trim(`"`comma'"') == "")) {c -(}
              = if (`"using"' != "" & (trim(`"/tmp/St48035.000002"') == "," | trim(`"/tmp/St48035.000002"') == "")) {c -(}
                local 0 `"using `0'"'
                {c )-}
              - capture syntax using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
              - if _rc {c -(}
                syntax [anything(name=vlist id="vlist")] using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
                {c )-}
              - mata:import_delim_import_file()
                {hline 67} begin clear {hline}
                - if _caller() < 10 {c -(}
                  _clear_9 `0'
                  exit
                  {c )-}
                - version 10
                - syntax [anything]
                - tokenize `anything'
                = tokenize 
                - if `"`2'"' != "" {c -(}
                = if `""' != "" {c -(}
                  display as err "`2' not allowed"
                  exit 198
                  {c )-}
                - if "`1'"=="" {c -(}
                = if ""=="" {c -(}
                - drop _all
                - label drop _all
                  {hline 65} begin label {hline}
                  - version 10.0
                  - gettoken val : 0
                  - if (strpos("`val'", "val") > 0 ) {c -(}
                  = if (strpos("drop", "val") > 0 ) {c -(}
                    gettoken val 0 : 0
                    syntax anything [, nofix]
                    if "`fix'" != "" {c -(}
                    local fix ", nofix"
                    {c )-}
                    gettoken var rest : anything
                    while `"`rest'"' != "" {c -(}
                    gettoken lab rest : rest
                    local label "`lab'"
                    {c )-}
                    local vlist : list anything - lab
                    if "`lab'" == "." {c -(}
                    local lab ""
                    {c )-}
                    foreach var of varlist `vlist' {c -(}
                    _label `val' `var' `lab' `fix'
                    {c )-}
                    {c )-}
                  - else {c -(}
                  - _label `macval(0)'
                  = _label drop _all
                  - {c )-}
                  {hline 67} end label {hline}
                - {c )-}
                - else if "`1'"=="mata" {c -(}
                = else if ""=="mata" {c -(}
                  mata: mata clear
                  {c )-}
                - else if inlist("`1'", "results", "matrix") {c -(}
                = else if inlist("", "results", "matrix") {c -(}
                  return clear
                  clearreturn
                  ereturn clear
                  sreturn clear
                  _return drop _all
                  if ("`1'" == "matrix") {c -(}
                  matrix drop _all
                  _est drop _all
                  {c )-}
                  {c )-}
                - else if "`1'"=="programs" {c -(}
                = else if ""=="programs" {c -(}
                  program drop _all
                  {c )-}
                - else if "`1'"=="ado" {c -(}
                = else if ""=="ado" {c -(}
                  program drop _allado
                  {c )-}
                - else if "`1'"=="*" | "`1'"=="all" {c -(}
                = else if ""=="*" | ""=="all" {c -(}
                  capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
                  capture
                  if (0`semmods') {c -(}
                  display as err "-clear all- not allowed while an SEM Builder is open"
                  exit 1
                  {c )-}
                  drop _all
                  label drop _all
                  matrix drop _all
                  scalar drop _all
                  constraint drop _all
                  eq drop _all
                  file close _all
                  postutil clear
                  _return drop _all
                  discard
                  program drop _all
                  timer clear
                  mata: mata clear
                  {c )-}
                - else {c -(}
                  display as err "`1' not allowed"
                  exit 198
                  {c )-}
                {hline 69} end clear {hline}
              {hline 60} end import_delimited {hline}
            {hline 63} end import.ImpDelim {hline}
          - {c )-}
          - else if `"`subcmd'"' == "exc" {c -(}
          = else if `"delimited"' == "exc" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "exce" {c -(}
          = else if `"delimited"' == "exce" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "excel" {c -(}
          = else if `"delimited"' == "excel" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "hav" {c -(}
          = else if `"delimited"' == "hav" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "have" {c -(}
          = else if `"delimited"' == "have" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "haver" {c -(}
          = else if `"delimited"' == "haver" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "sasxport" {c -(}
          = else if `"delimited"' == "sasxport" {c -(}
            ImpSasxport `0'
            {c )-}
          - else {c -(}
            display as error `"import: unknown subcommand "`subcmd'""'
            exit 198
            {c )-}
          {hline 74} end import {hline}
        {hline 75} end gs_load {hline}
      - keep if obj =="`obj'"
      = keep if obj =="codebook"
      - if !mi("`topic'") keep if topic == "`topic'"
      = if !mi("basic") keep if topic == "basic"
      - if _N == 0 {c -(}
        di as error "Codebook not listed in links (https://docs.google.com/spreadsheets/d/`links'/edit#gid=0)"
        STOP
        {c )-}
      - if _N > 1 {c -(}
        if !mi("`topic'") di as error "Duplicates in topic (`topic') and obj (`obj')"
        else di as error "Duplicates in obj (`obj')"
        STOP
        {c )-}
      - else {c -(}
      - local key `=key[1]'
      = local key 1uq_mrH3gYnEdcYkYA_c4NhwZ7wavX5PLRjoBkhm_gVM
      - gs_load, key(`key')
      = gs_load, key(1uq_mrH3gYnEdcYkYA_c4NhwZ7wavX5PLRjoBkhm_gVM)
        {hline 73} begin gs_load {hline}
        - syntax, key(str)
        - preserve
        - clear
          {hline 73} begin clear {hline}
          - if _caller() < 10 {c -(}
            _clear_9 `0'
            exit
            {c )-}
          - version 10
          - syntax [anything]
          - tokenize `anything'
          = tokenize 
          - if `"`2'"' != "" {c -(}
          = if `""' != "" {c -(}
            display as err "`2' not allowed"
            exit 198
            {c )-}
          - if "`1'"=="" {c -(}
          = if ""=="" {c -(}
          - drop _all
          - label drop _all
            {hline 71} begin label {hline}
            - version 10.0
            - gettoken val : 0
            - if (strpos("`val'", "val") > 0 ) {c -(}
            = if (strpos("drop", "val") > 0 ) {c -(}
              gettoken val 0 : 0
              syntax anything [, nofix]
              if "`fix'" != "" {c -(}
              local fix ", nofix"
              {c )-}
              gettoken var rest : anything
              while `"`rest'"' != "" {c -(}
              gettoken lab rest : rest
              local label "`lab'"
              {c )-}
              local vlist : list anything - lab
              if "`lab'" == "." {c -(}
              local lab ""
              {c )-}
              foreach var of varlist `vlist' {c -(}
              _label `val' `var' `lab' `fix'
              {c )-}
              {c )-}
            - else {c -(}
            - _label `macval(0)'
            = _label drop _all
            - {c )-}
            {hline 73} end label {hline}
          - {c )-}
          - else if "`1'"=="mata" {c -(}
          = else if ""=="mata" {c -(}
            mata: mata clear
            {c )-}
          - else if inlist("`1'", "results", "matrix") {c -(}
          = else if inlist("", "results", "matrix") {c -(}
            return clear
            clearreturn
            ereturn clear
            sreturn clear
            _return drop _all
            if ("`1'" == "matrix") {c -(}
            matrix drop _all
            _est drop _all
            {c )-}
            {c )-}
          - else if "`1'"=="programs" {c -(}
          = else if ""=="programs" {c -(}
            program drop _all
            {c )-}
          - else if "`1'"=="ado" {c -(}
          = else if ""=="ado" {c -(}
            program drop _allado
            {c )-}
          - else if "`1'"=="*" | "`1'"=="all" {c -(}
          = else if ""=="*" | ""=="all" {c -(}
            capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
            capture
            if (0`semmods') {c -(}
            display as err "-clear all- not allowed while an SEM Builder is open"
            exit 1
            {c )-}
            drop _all
            label drop _all
            matrix drop _all
            scalar drop _all
            constraint drop _all
            eq drop _all
            file close _all
            postutil clear
            _return drop _all
            discard
            program drop _all
            timer clear
            mata: mata clear
            {c )-}
          - else {c -(}
            display as err "`1' not allowed"
            exit 198
            {c )-}
          {hline 75} end clear {hline}
        - set obs 1
        - gen blah = 1
        - tempfile temp
        - save `temp', replace
        = save /tmp/St48035.000002, replace
        - restore
        - local link "https://docs.google.com/spreadsheets/d/`key'/export?format=csv"
        = local link "https://docs.google.com/spreadsheets/d/1uq_mrH3gYnEdcYkYA_c4NhwZ7wavX5PLRjoBkhm_gVM/export?format=csv"
        - copy "`link'" `temp'
        = copy "https://docs.google.com/spreadsheets/d/1uq_mrH3gYnEdcYkYA_c4NhwZ7wavX5PLRjoBkhm_gVM/export?format=csv" /tmp/St48035.000002
        - import delimited using `temp', clear varnames(1) stringcols(_all) charset("utf-8")
        = import delimited using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
          {hline 72} begin import {hline}
          - version 12
          - gettoken subcmd 0 : 0, parse(" ,")
          - if `"`subcmd'"' == "delim" {c -(}
          = if `"delimited"' == "delim" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimi" {c -(}
          = else if `"delimited"' == "delimi" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimit" {c -(}
          = else if `"delimited"' == "delimit" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimite" {c -(}
          = else if `"delimited"' == "delimite" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimited" {c -(}
          = else if `"delimited"' == "delimited" {c -(}
          - ImpDelim `0'
          = ImpDelim  using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
            {hline 61} begin import.ImpDelim {hline}
            - version 13
            - import_delimited `0'
            = import_delimited using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
              {hline 58} begin import_delimited {hline}
              - version 13
              - gettoken filename rest : 0, parse(" ,")
              - gettoken comma : rest, parse(" ,")
              - if (`"`filename'"' != "" & (trim(`"`comma'"') == "," | trim(`"`comma'"') == "")) {c -(}
              = if (`"using"' != "" & (trim(`"/tmp/St48035.000002"') == "," | trim(`"/tmp/St48035.000002"') == "")) {c -(}
                local 0 `"using `0'"'
                {c )-}
              - capture syntax using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
              - if _rc {c -(}
                syntax [anything(name=vlist id="vlist")] using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
                {c )-}
              - mata:import_delim_import_file()
                {hline 67} begin clear {hline}
                - if _caller() < 10 {c -(}
                  _clear_9 `0'
                  exit
                  {c )-}
                - version 10
                - syntax [anything]
                - tokenize `anything'
                = tokenize 
                - if `"`2'"' != "" {c -(}
                = if `""' != "" {c -(}
                  display as err "`2' not allowed"
                  exit 198
                  {c )-}
                - if "`1'"=="" {c -(}
                = if ""=="" {c -(}
                - drop _all
                - label drop _all
                  {hline 65} begin label {hline}
                  - version 10.0
                  - gettoken val : 0
                  - if (strpos("`val'", "val") > 0 ) {c -(}
                  = if (strpos("drop", "val") > 0 ) {c -(}
                    gettoken val 0 : 0
                    syntax anything [, nofix]
                    if "`fix'" != "" {c -(}
                    local fix ", nofix"
                    {c )-}
                    gettoken var rest : anything
                    while `"`rest'"' != "" {c -(}
                    gettoken lab rest : rest
                    local label "`lab'"
                    {c )-}
                    local vlist : list anything - lab
                    if "`lab'" == "." {c -(}
                    local lab ""
                    {c )-}
                    foreach var of varlist `vlist' {c -(}
                    _label `val' `var' `lab' `fix'
                    {c )-}
                    {c )-}
                  - else {c -(}
                  - _label `macval(0)'
                  = _label drop _all
                  - {c )-}
                  {hline 67} end label {hline}
                - {c )-}
                - else if "`1'"=="mata" {c -(}
                = else if ""=="mata" {c -(}
                  mata: mata clear
                  {c )-}
                - else if inlist("`1'", "results", "matrix") {c -(}
                = else if inlist("", "results", "matrix") {c -(}
                  return clear
                  clearreturn
                  ereturn clear
                  sreturn clear
                  _return drop _all
                  if ("`1'" == "matrix") {c -(}
                  matrix drop _all
                  _est drop _all
                  {c )-}
                  {c )-}
                - else if "`1'"=="programs" {c -(}
                = else if ""=="programs" {c -(}
                  program drop _all
                  {c )-}
                - else if "`1'"=="ado" {c -(}
                = else if ""=="ado" {c -(}
                  program drop _allado
                  {c )-}
                - else if "`1'"=="*" | "`1'"=="all" {c -(}
                = else if ""=="*" | ""=="all" {c -(}
                  capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
                  capture
                  if (0`semmods') {c -(}
                  display as err "-clear all- not allowed while an SEM Builder is open"
                  exit 1
                  {c )-}
                  drop _all
                  label drop _all
                  matrix drop _all
                  scalar drop _all
                  constraint drop _all
                  eq drop _all
                  file close _all
                  postutil clear
                  _return drop _all
                  discard
                  program drop _all
                  timer clear
                  mata: mata clear
                  {c )-}
                - else {c -(}
                  display as err "`1' not allowed"
                  exit 198
                  {c )-}
                {hline 69} end clear {hline}
              {hline 60} end import_delimited {hline}
            {hline 63} end import.ImpDelim {hline}
          - {c )-}
          - else if `"`subcmd'"' == "exc" {c -(}
          = else if `"delimited"' == "exc" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "exce" {c -(}
          = else if `"delimited"' == "exce" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "excel" {c -(}
          = else if `"delimited"' == "excel" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "hav" {c -(}
          = else if `"delimited"' == "hav" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "have" {c -(}
          = else if `"delimited"' == "have" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "haver" {c -(}
          = else if `"delimited"' == "haver" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "sasxport" {c -(}
          = else if `"delimited"' == "sasxport" {c -(}
            ImpSasxport `0'
            {c )-}
          - else {c -(}
            display as error `"import: unknown subcommand "`subcmd'""'
            exit 198
            {c )-}
          {hline 74} end import {hline}
        {hline 75} end gs_load {hline}
      - {c )-}
      {hline 79} end gs_db {hline}
    - ds
      {hline 80} begin ds {hline}
      - version 9
      - local version : di "version " string(_caller()) ":"
      - if (_caller() <= 4) {c -(}
        `version' describe, simple
        exit
        {c )-}
      - else {c -(}
      - ds_util `0'
      = ds_util 
        {hline 73} begin ds_util {hline}
        - version 8
        - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detail Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
        - if "`varlist'" == "" {c -(}
        = if "v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year month_adjust year_adjust age_categorical age_categorical_type age_categorical_parse urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude v60 v61" == "" {c -(}
          exit
          {c )-}
        - if !inrange(`indent',0,244) {c -(}
        = if !inrange(0,0,244) {c -(}
          di as err "indent() should be in the range 0..244"
          exit 198
          {c )-}
        - if !inrange(`varwidth',5,32) {c -(}
        = if !inrange(12,5,32) {c -(}
          di as err "varwidth() should be in the range 5..32"
          exit 198
          {c )-}
        - if !inrange(`skip',1,10) {c -(}
        = if !inrange(2,1,10) {c -(}
          di as err "skip() should be in the range 1..10"
          exit 198
          {c )-}
        - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
        = local nopts = (`""' != "") + (`""' != "") + ("" != "")
        - if `nopts' == 3 {c -(}
        = if 0 == 3 {c -(}
          di as err "may not combine options has(), not(), and not"
          exit 198
          {c )-}
        - else if `nopts' == 2 {c -(}
        = else if 0 == 2 {c -(}
          if (`"`has'"' == "") {c -(}
          di as err "may not combine options not() and not"
          exit 198
          {c )-}
          else if (`"`not'"' == "") {c -(}
          di as err "may not combine options has() and not"
          exit 198
          {c )-}
          else if (`"`not2'"' == "") {c -(}
          di as err "may not combine options has() and not()"
          exit 198
          {c )-}
          {c )-}
        - if `"`not'"' != "" {c -(}
        = if `""' != "" {c -(}
          local has `"`not'"'
          local opt "not"
          {c )-}
        - else if `"`has'"' != "" {c -(}
        = else if `""' != "" {c -(}
          local opt "has"
          {c )-}
        - local inse = "`insensitive'" != ""
        = local inse = "" != ""
        - if `"`has'"' != "" {c -(}
        = if `""' != "" {c -(}
          CheckHas `"`has'"' "`opt'" "`inse'"
          if "`what'" == "varl" | "`what'" == "vall" {c -(}
          VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
          {c )-}
          else if "`what'" == "f" {c -(}
          Format `"`which'"' "`varlist'" "`inse'"
          {c )-}
          else if "`what'" == "c" {c -(}
          Char `"`which'"' "`varlist'" "`inse'"
          {c )-}
          else if "`what'" == "t" {c -(}
          Type `"`which'"' "`varlist'"
          {c )-}
          if `"`not'"' != "" {c -(}
          local varlist : list varlist - vlist
          {c )-}
          else if `"`has'"' != "" {c -(}
          local varlist "`vlist'"
          {c )-}
          {c )-}
        - if `"`not2'"' != "" {c -(}
        = if `""' != "" {c -(}
          unab all : *
          local varlist : list all - varlist
          {c )-}
        - if "`varlist'" == "" {c -(}
        = if "v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year month_adjust year_adjust age_categorical age_categorical_type age_categorical_parse urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude v60 v61" == "" {c -(}
          exit
          {c )-}
        - if "`alpha'" != "" {c -(}
        = if "" != "" {c -(}
          local varlist : list sort varlist
          {c )-}
        - if "`detail'" != "" {c -(}
        = if "" != "" {c -(}
          describe `varlist'
          {c )-}
        - else {c -(}
        - local nvar : word count `varlist'
        = local nvar : word count v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year month_adjust year_adjust age_categorical age_categorical_type age_categorical_parse urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude v60 v61
        - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
        = local ncol = int((99 + 2) / (12 + 2))
        - local i 0
        - local vlist
        - foreach v of local varlist {c -(}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61"'
        - {c )-}
        - DisplayInCols txt `indent' `skip' 0 `vlist'
        = DisplayInCols txt 0 2 0  v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          {hline 57} begin ds_util.DisplayInCols {hline}
          - gettoken sty 0 : 0
          - gettoken indent 0 : 0
          - gettoken pad 0 : 0
          - gettoken wid 0 : 0
          - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
          = local indent = cond(0==. | 0<0, 0, 0)
          - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
          = local pad = cond(2==. | 2<1, 2, 2)
          - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
          = local wid = cond(0==. | 0<0, 0, 0)
          - local n : list sizeof 0
          - if `n'==0 {c -(}
          = if 61==0 {c -(}
            exit
            {c )-}
          - foreach x of local 0 {c -(}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(0, length(`"v1"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(2, length(`"notes"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(5, length(`"validated"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(9, length(`"ubcov_id"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(9, length(`"survey_name"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(11, length(`"nid"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(11, length(`"ihme_loc_id"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(11, length(`"year_start"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(11, length(`"year_end"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(11, length(`"survey_mod~e"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"file_path"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"smaller_si~t"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"reshape"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"reshape_stem"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"reshape_ke~d"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"subset"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"delimiter"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"strata"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"psu"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"pweight"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"hhweight"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"geospatial~d"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"hh_id"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"line_id"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"sex"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"sex_male"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"sex_female"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"age_year"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"age_year_m~g"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"age_month"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"age_month_~g"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"birth_date"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"birth_date~t"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"birth_day"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"birth_month"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"birth_year"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"int_date"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"int_date_f~t"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"int_day"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"int_month"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"int_year"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"month_adjust"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"year_adjust"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"age_catego~l"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"age_categ~pe"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"age_categ~se"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"urban"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"urban_true"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"urban_false"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"admin_1"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"pweight_ad~1"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"admin_2"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"pweight_ad~2"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"admin_3"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"pweight_ad~3"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"admin_4"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"admin_5"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"latitude"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"longitude"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"v60"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"v61"'))
          - {c )-}
          - local wid = `wid' + `pad'
          = local wid = 12 + 2
          - local cols = int((`c(linesize)'+1-`indent')/`wid')
          = local cols = int((99+1-0)/14)
          - if `cols' < 2 {c -(}
          = if 7 < 2 {c -(}
            if `indent' {c -(}
            local col "_column(`=`indent'+1')"
            {c )-}
            foreach x of local 0 {c -(}
            di as `sty' `col' `"`x'"'
            {c )-}
            exit
            {c )-}
          - local lines = `n'/`cols'
          = local lines = 61/7
          - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
          = local lines = int(cond(8.714285714285714>int(8.714285714285714), 8.714285714285714+1, 8.714285714285714))
          - forvalues i=1(1)`lines' {c -(}
          = forvalues i=1(1)9 {c -(}
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((7)*9+1, 61)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {c -(}
          = forvalues j=1(9)61 {c -(}
          - local x : word `j' of `0'
          = local x : word 1 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "v1" _c
          - local col = `col' + `wid'
          = local col = 1 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 10 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "survey_mod~e" _c
          - local col = `col' + `wid'
          = local col = 15 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 19 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(29) "psu" _c
          - local col = `col' + `wid'
          = local col = 29 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 28 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(43) "age_year" _c
          - local col = `col' + `wid'
          = local col = 43 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 37 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(57) "int_date" _c
          - local col = `col' + `wid'
          = local col = 57 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 46 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(71) "age_categ~se" _c
          - local col = `col' + `wid'
          = local col = 71 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 55 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(85) "pweight_ad~3" _c
          - local col = `col' + `wid'
          = local col = 85 + 14
          - {c )-}
          - di as `sty'
          = di as txt
          - {c )-}
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((7)*9+2, 61)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {c -(}
          = forvalues j=2(9)61 {c -(}
          - local x : word `j' of `0'
          = local x : word 2 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "notes" _c
          - local col = `col' + `wid'
          = local col = 1 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 11 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "file_path" _c
          - local col = `col' + `wid'
          = local col = 15 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 20 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(29) "pweight" _c
          - local col = `col' + `wid'
          = local col = 29 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 29 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(43) "age_year_m~g" _c
          - local col = `col' + `wid'
          = local col = 43 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 38 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(57) "int_date_f~t" _c
          - local col = `col' + `wid'
          = local col = 57 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 47 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(71) "urban" _c
          - local col = `col' + `wid'
          = local col = 71 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 56 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(85) "admin_4" _c
          - local col = `col' + `wid'
          = local col = 85 + 14
          - {c )-}
          - di as `sty'
          = di as txt
          - {c )-}
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((7)*9+3, 61)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {c -(}
          = forvalues j=3(9)61 {c -(}
          - local x : word `j' of `0'
          = local x : word 3 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "validated" _c
          - local col = `col' + `wid'
          = local col = 1 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 12 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "smaller_si~t" _c
          - local col = `col' + `wid'
          = local col = 15 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 21 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(29) "hhweight" _c
          - local col = `col' + `wid'
          = local col = 29 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 30 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(43) "age_month" _c
          - local col = `col' + `wid'
          = local col = 43 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 39 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(57) "int_day" _c
          - local col = `col' + `wid'
          = local col = 57 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 48 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(71) "urban_true" _c
          - local col = `col' + `wid'
          = local col = 71 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 57 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(85) "admin_5" _c
          - local col = `col' + `wid'
          = local col = 85 + 14
          - {c )-}
          - di as `sty'
          = di as txt
          - {c )-}
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((7)*9+4, 61)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {c -(}
          = forvalues j=4(9)61 {c -(}
          - local x : word `j' of `0'
          = local x : word 4 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "ubcov_id" _c
          - local col = `col' + `wid'
          = local col = 1 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 13 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "reshape" _c
          - local col = `col' + `wid'
          = local col = 15 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 22 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(29) "geospatial~d" _c
          - local col = `col' + `wid'
          = local col = 29 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 31 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(43) "age_month_~g" _c
          - local col = `col' + `wid'
          = local col = 43 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 40 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(57) "int_month" _c
          - local col = `col' + `wid'
          = local col = 57 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 49 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(71) "urban_false" _c
          - local col = `col' + `wid'
          = local col = 71 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 58 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(85) "latitude" _c
          - local col = `col' + `wid'
          = local col = 85 + 14
          - {c )-}
          - di as `sty'
          = di as txt
          - {c )-}
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((7)*9+5, 61)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {c -(}
          = forvalues j=5(9)61 {c -(}
          - local x : word `j' of `0'
          = local x : word 5 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "survey_name" _c
          - local col = `col' + `wid'
          = local col = 1 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 14 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "reshape_stem" _c
          - local col = `col' + `wid'
          = local col = 15 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 23 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(29) "hh_id" _c
          - local col = `col' + `wid'
          = local col = 29 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 32 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(43) "birth_date" _c
          - local col = `col' + `wid'
          = local col = 43 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 41 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(57) "int_year" _c
          - local col = `col' + `wid'
          = local col = 57 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 50 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(71) "admin_1" _c
          - local col = `col' + `wid'
          = local col = 71 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 59 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(85) "longitude" _c
          - local col = `col' + `wid'
          = local col = 85 + 14
          - {c )-}
          - di as `sty'
          = di as txt
          - {c )-}
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((7)*9+6, 61)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {c -(}
          = forvalues j=6(9)61 {c -(}
          - local x : word `j' of `0'
          = local x : word 6 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "nid" _c
          - local col = `col' + `wid'
          = local col = 1 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 15 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "reshape_ke~d" _c
          - local col = `col' + `wid'
          = local col = 15 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 24 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(29) "line_id" _c
          - local col = `col' + `wid'
          = local col = 29 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 33 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(43) "birth_date~t" _c
          - local col = `col' + `wid'
          = local col = 43 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 42 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(57) "month_adjust" _c
          - local col = `col' + `wid'
          = local col = 57 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 51 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(71) "pweight_ad~1" _c
          - local col = `col' + `wid'
          = local col = 71 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 60 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(85) "v60" _c
          - local col = `col' + `wid'
          = local col = 85 + 14
          - {c )-}
          - di as `sty'
          = di as txt
          - {c )-}
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((7)*9+7, 61)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {c -(}
          = forvalues j=7(9)61 {c -(}
          - local x : word `j' of `0'
          = local x : word 7 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "ihme_loc_id" _c
          - local col = `col' + `wid'
          = local col = 1 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 16 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "subset" _c
          - local col = `col' + `wid'
          = local col = 15 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 25 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(29) "sex" _c
          - local col = `col' + `wid'
          = local col = 29 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 34 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(43) "birth_day" _c
          - local col = `col' + `wid'
          = local col = 43 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 43 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(57) "year_adjust" _c
          - local col = `col' + `wid'
          = local col = 57 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 52 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(71) "admin_2" _c
          - local col = `col' + `wid'
          = local col = 71 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 61 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(85) "v61" _c
          - local col = `col' + `wid'
          = local col = 85 + 14
          - {c )-}
          - di as `sty'
          = di as txt
          - {c )-}
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((7)*9+8, 61)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {c -(}
          = forvalues j=8(9)61 {c -(}
          - local x : word `j' of `0'
          = local x : word 8 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "year_start" _c
          - local col = `col' + `wid'
          = local col = 1 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 17 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "delimiter" _c
          - local col = `col' + `wid'
          = local col = 15 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 26 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(29) "sex_male" _c
          - local col = `col' + `wid'
          = local col = 29 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 35 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(43) "birth_month" _c
          - local col = `col' + `wid'
          = local col = 43 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 44 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(57) "age_catego~l" _c
          - local col = `col' + `wid'
          = local col = 57 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 53 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(71) "pweight_ad~2" _c
          - local col = `col' + `wid'
          = local col = 71 + 14
          - {c )-}
          - di as `sty'
          = di as txt
          - {c )-}
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((7)*9+9, 61)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {c -(}
          = forvalues j=9(9)61 {c -(}
          - local x : word `j' of `0'
          = local x : word 9 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "year_end" _c
          - local col = `col' + `wid'
          = local col = 1 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 18 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "strata" _c
          - local col = `col' + `wid'
          = local col = 15 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 27 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(29) "sex_female" _c
          - local col = `col' + `wid'
          = local col = 29 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 36 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(43) "birth_year" _c
          - local col = `col' + `wid'
          = local col = 43 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 45 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(57) "age_categ~pe" _c
          - local col = `col' + `wid'
          = local col = 57 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 54 of   v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year month_adjust year_adjust age_catego~l age_categ~pe age_categ~se urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude v60 v61
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(71) "admin_3" _c
          - local col = `col' + `wid'
          = local col = 71 + 14
          - {c )-}
          - di as `sty'
          = di as txt
          - {c )-}
          {hline 59} end ds_util.DisplayInCols {hline}
        - {c )-}
        - return local varlist `varlist'
        = return local varlist v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year month_adjust year_adjust age_categorical age_categorical_type age_categorical_parse urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude v60 v61
        {hline 75} end ds_util {hline}
      - exit
      {hline 82} end ds {hline}
    - local cb_vars `r(varlist)'
    = local cb_vars v1 notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year month_adjust year_adjust age_categorical age_categorical_type age_categorical_parse urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude v60 v61
    - local vars ubcov_id $vars
    = local vars ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num
    - local drop_vars : list cb_vars - vars
    - drop `drop_vars'
    = drop v1 notes validated v60 v61
    - destring ubcov_id, replace force
      {hline 74} begin destring {hline}
      - version 7.0
      - syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(string)] [percent] [dpcomma]
      - if "`percent'" == "percent" {c -(}
      = if "" == "percent" {c -(}
        if !index(`"`ignore'"', "%") {c -(}
        local ignore `"`ignore'%"'
        {c )-}
        {c )-}
      - if "`generate'" != "" & "`replace'" != "" {c -(}
      = if "" != "" & "replace" != "" {c -(}
        di as err "options generate and replace are mutually exclusive"
        exit 198
        {c )-}
      - if "`generate'" == "" & "`replace'" == "" {c -(}
      = if "" == "" & "replace" == "" {c -(}
        di as err "must specify either generate or replace option"
        exit 198
        {c )-}
      - if "`generate'" != "" {c -(}
      = if "" != "" {c -(}
        local ct1: word count `varlist'
        local save "`varlist'"
        local 0 "`generate'"
        capture syntax newvarlist
        if _rc {c -(}
        di as err "generate(newvarlist) invalid"
        exit _rc
        {c )-}
        local generate "`varlist'"
        local varlist "`save'"
        local ct2: word count `generate'
        if `ct1' != `ct2' {c -(}
        di as err "number of variables in varlist must equal"
        di as err "number of variables in generate(newvarlist)"
        exit 198
        {c )-}
        {c )-}
      - local m 1
      - if `"`ignore'"' == "" {c -(}
      = if `""' == "" {c -(}
      - local ignore ""
      - {c )-}
      - local l = length(`"`ignore'"')
      = local l = length(`""')
      - while `m' <= `l' {c -(}
      = while 1 <= 0 {c -(}
        local char`m' = substr(`"`ignore'"', `m', 1)
        if substr(`"`ignore'"', `m', 1) == " " {c -(}
        local char`m' " "
        {c )-}
        local m = `m' + 1
        {c )-}
      - if "`generate'" != "" {c -(}
      = if "" != "" {c -(}
        tokenize `varlist'
        local flag 0
        local jj 1
        local yy 1
        local varno 0
        while "`1'" != "" {c -(}
        local varno = `varno' + 1
        capture confirm string variable `1'
        if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "generate"
        local newvar : word `varno' of `generate'
        mac shift
        {c )-}
        else {c -(}
        tempvar temp
        qui gen str1 `temp' = ""
        qui replace `temp' = `1'
        qui compress `temp'
        while `"`char`jj''"' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
        qui replace `temp' = trim(`temp')
        qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        local r = r(N)
        qui count if real(`temp') >= .
        local s = r(N)
        if `r' != `s' {c -(}
        local flag 1
        {c )-}
        if `flag' == 1 & "`force'" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "generate"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "generate"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
        else {c -(}
        tempvar OLDVAR ind con
        qui gen str1 `OLDVAR' = ""
        qui replace `OLDVAR' = `1'
        qui gen byte `ind' = .
        qui gen byte `con' = 0
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`OLDVAR', `"`t'"') != 0
        qui count if `ind' == 1
        if r(N) > 0 {c -(}
        if `"`t'"' == " " {c -(}
        local b `"`b' space"'
        {c )-}
        else {c -(}
        local b `"`b' `t'"'
        {c )-}
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`OLDVAR', `"`t'"') != 0
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `OLDVAR' = subinstr(`OLDVAR', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        local newvar : word `varno' of `generate'
        local vl: variable label `1'
        if "`float'" == "" {c -(}
        qui gen double `newvar' = real(`OLDVAR')
        {c )-}
        else {c -(}
        qui gen float `newvar' = real(`OLDVAR')
        {c )-}
        move `newvar' `1'
        move `1' `newvar'
        Charcopy `1' `newvar'
        label variable `newvar' `"`vl'"'
        char `newvar'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) > 0 {c -(}
        qui replace `newvar' = `newvar'/100
        {c )-}
        qui compress `newvar'
        local type : type `newvar'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; `newvar' " as res "generated " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1': characters" as res `"`b'"' as txt " removed; `newvar' " as res "generated " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; `newvar' " as res "generated " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        drop `ind' `con' `OLDVAR'
        local jj 1
        local yy 1
        mac shift
        {c )-}
        drop `temp'
        {c )-}
        {c )-}
        {c )-}
      - else if "`replace'" != "" {c -(}
      = else if "replace" != "" {c -(}
      - tokenize `varlist'
      = tokenize ubcov_id
      - tempvar ind con
      - qui gen byte `con' = 0
      = qui gen byte __000001 = 0
      - qui gen byte `ind' = .
      = qui gen byte __000000 = .
      - local flag 0
      - local yy 1
      - local jj 1
      - while "`1'" != "" {c -(}
      = while "ubcov_id" != "" {c -(}
      - capture confirm string variable `1'
      = capture confirm string variable ubcov_id
      - if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
      - else {c -(}
      - tempvar temp
      - qui gen str1 `temp' = ""
      = qui gen str1 __000002 = ""
      - qui replace `temp' = `1'
      = qui replace __000002 = ubcov_id
      - qui compress `temp'
      = qui compress __000002
      - while `"`char`jj''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
      - qui replace `temp' = trim(`temp')
      = qui replace __000002 = trim(__000002)
      - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
      = qui count if __000002=="" | __000002=="." | (length(__000002)==2 & inrange(__000002,".a",".z"))
      - local r = r(N)
      - qui count if real(`temp') >= .
      = qui count if real(__000002) >= .
      - local s = r(N)
      - if `r' != `s' {c -(}
      = if 1415 != 1417 {c -(}
      - local flag 1
      - {c )-}
      - if `flag' == 1 & "`force'" == "" {c -(}
      = if 1 == 1 & "force" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
      - else {c -(}
      - while `"`char`yy''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
      - local c Characters removed were: `b'
      = local c Characters removed were: 
      - tempvar switch
      - local type = cond("`float'" == "float", "float", "double")
      = local type = cond("" == "float", "float", "double")
      - qui gen `type' `switch' = real(`1')
      = qui gen double __000003 = real(ubcov_id)
      - char rename `1' `switch'
      = char rename ubcov_id __000003
      - move `switch' `1'
      = move __000003 ubcov_id
      - local vl: variable label `1'
      = local vl: variable label ubcov_id
      - drop `1'
      = drop ubcov_id
      - if "`float'" == "" {c -(}
      = if "" == "" {c -(}
      - qui gen double `1' = `switch'
      = qui gen double ubcov_id = __000003
      - {c )-}
      - else {c -(}
        qui gen float `1' = `switch'
        {c )-}
      - move `1' `switch'
      = move ubcov_id __000003
      - label variable `1' `"`vl'"'
      = label variable ubcov_id `""'
        {hline 75} begin label {hline}
        - version 10.0
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {c -(}
        = if (strpos("variable", "val") > 0 ) {c -(}
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {c -(}
          local fix ", nofix"
          {c )-}
          gettoken var rest : anything
          while `"`rest'"' != "" {c -(}
          gettoken lab rest : rest
          local label "`lab'"
          {c )-}
          local vlist : list anything - lab
          if "`lab'" == "." {c -(}
          local lab ""
          {c )-}
          foreach var of varlist `vlist' {c -(}
          _label `val' `var' `lab' `fix'
          {c )-}
          {c )-}
        - else {c -(}
        - _label `macval(0)'
        = _label variable ubcov_id `""'
        - {c )-}
        {hline 77} end label {hline}
      - char rename `switch' `1'
      = char rename __000003 ubcov_id
      - char `1'[destring] `c'
      = char ubcov_id[destring] Characters removed were:
      - qui count if `con' == 1
      = qui count if __000001 == 1
      - if "`percent'" != "" & r(N) != 0 {c -(}
      = if "" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
      - qui replace `con' = 0
      = qui replace __000001 = 0
      - qui compress `1'
      = qui compress ubcov_id
      - local type : type `1'
      = local type : type ubcov_id
      - if "`force'" != "" {c -(}
      = if "force" != "" {c -(}
      - di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
      = di as txt "ubcov_id contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "int"
      - {c )-}
      - if `"`b'"' != "" {c -(}
      = if `""' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
      - else if `"`b'"' == "" & "`force'" == "" {c -(}
      = else if `""' == "" & "force" == "" {c -(}
        di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
      - if `s' != 0 {c -(}
      = if 1417 != 0 {c -(}
      - local valmsg = cond(`s' > 1, "values", "value")
      = local valmsg = cond(1417 > 1, "values", "value")
      - di as txt "(`s' missing `valmsg' generated)"
      = di as txt "(1417 missing values generated)"
      - {c )-}
      - local b ""
      - local c ""
      - local jj 1
      - local yy 1
      - drop `switch'
      = drop __000003
      - mac shift
      - {c )-}
      - drop `temp'
      = drop __000002
      - {c )-}
      - {c )-}
      - while "`1'" != "" {c -(}
      = while "" != "" {c -(}
        capture confirm string variable `1'
        if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
        else {c -(}
        tempvar temp
        qui gen str1 `temp' = ""
        qui replace `temp' = `1'
        qui compress `temp'
        while `"`char`jj''"' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
        qui replace `temp' = trim(`temp')
        qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        local r = r(N)
        qui count if real(`temp') >= .
        local s = r(N)
        if `r' != `s' {c -(}
        local flag 1
        {c )-}
        if `flag' == 1 & "`force'" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
        else {c -(}
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        tempvar switch
        local type = cond("`float'" == "float", "float", "double")
        qui gen `type' `switch' = real(`1')
        char rename `1' `switch'
        move `switch' `1'
        local vl: variable label `1'
        drop `1'
        if "`float'" == "" {c -(}
        qui gen double `1' = `switch'
        {c )-}
        else {c -(}
        qui gen float `1' = `switch'
        {c )-}
        move `1' `switch'
        label variable `1' `"`vl'"'
        char rename `switch' `1'
        char `1'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
        qui replace `con' = 0
        qui compress `1'
        local type : type `1'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        local jj 1
        local yy 1
        drop `switch'
        mac shift
        {c )-}
        drop `temp'
        {c )-}
        {c )-}
      - {c )-}
      {hline 76} end destring {hline}
    - drop if ubcov_id == .
    - duplicates tag $key, gen(kittendupe)
    = duplicates tag nid ihme_loc_id year_start year_end survey_module file_path, gen(kittendupe)
      {hline 72} begin duplicates {hline}
      - version 8
      - gettoken cmd 0 : 0, parse(" ,")
      - local l = length("`cmd'")
      = local l = length("tag")
      - if `l' == 0 {c -(}
      = if 3 == 0 {c -(}
        di "{c -(}err{c )-}subcommand needed; see help on {c -(}help duplicates##|_new:duplicates{c )-}"
        exit 198
        {c )-}
      - if substr("report",1,max(1,`l')) == "`cmd'" {c -(}
      = if substr("report",1,max(1,3)) == "tag" {c -(}
        local cmd "report"
        {c )-}
      - else if substr("examples",1,max(1,`l')) == "`cmd'" {c -(}
      = else if substr("examples",1,max(1,3)) == "tag" {c -(}
        local cmd "examples"
        {c )-}
      - else if substr("list",1,max(1,`l')) == "`cmd'" {c -(}
      = else if substr("list",1,max(1,3)) == "tag" {c -(}
        local cmd "list"
        {c )-}
      - else if substr("browse",1,max(1,`l')) == "`cmd'" {c -(}
      = else if substr("browse",1,max(1,3)) == "tag" {c -(}
        local cmd "browse"
        di "{c -(}p 0 0 2{c )-}As of Stata 11.0, browse is " "no longer a valid subcommand.  {c -(}result{c )-}See " "{c -(}help duplicates##remarks:Remarks{c )-} " "under help {c -(}helpb duplicates{c )-} " "for an explanation.{c -(}p_end{c )-}"
        exit 198
        {c )-}
      - else if substr("tag",1,max(1,`l')) == "`cmd'" {c -(}
      = else if substr("tag",1,max(1,3)) == "tag" {c -(}
      - local cmd "tag"
      - {c )-}
      - else if "drop" == "`cmd'" {c -(}
      = else if "drop" == "tag" {c -(}
        {c )-}
      - else {c -(}
        di "{c -(}err{c )-}illegal {c -(}cmd{c )-}duplicates {c -(}err{c )-}subcommand"
        exit 198
        {c )-}
      - if "`cmd'" == "drop" {c -(}
      = if "tag" == "drop" {c -(}
        capture syntax varlist [if] [in]
        if _rc == 0 {c -(}
        di "{c -(}err{c )-}force option required with " "{c -(}cmd{c )-}duplicates drop {c -(}it{c )-}varlist{c -(}rm{c )-}"
        exit 198
        {c )-}
        capture syntax varlist [if] [in], force
        if _rc {c -(}
        syntax [if] [in]
        unab varlist : _all
        local varlist : subinstr local varlist "`_sortindex'" ""
        local vartext "{c -(}txt{c )-} all variables"
        {c )-}
        else local vartext "{c -(}res{c )-} `varlist'"
        {c )-}
      - else if "`cmd'" == "tag" {c -(}
      = else if "tag" == "tag" {c -(}
      - syntax [varlist(default=none)] [if] [in], Generate(str)
      - capture confirm new variable `generate'
      = capture confirm new variable kittendupe
      - if _rc {c -(}
        di as err "generate() must specify new variable"
        exit _rc
        {c )-}
      - if "`varlist'" == "" {c -(}
      = if "nid ihme_loc_id year_start year_end survey_module file_path" == "" {c -(}
        unab varlist : _all
        local varlist : subinstr local varlist "`_sortindex'" ""
        local vartext "{c -(}txt{c )-} all variables"
        {c )-}
      - else local vartext "{c -(}res{c )-} `varlist'"
      = else local vartext "{c -(}res{c )-} nid ihme_loc_id year_start year_end survey_module file_path"
      - {c )-}
      - else {c -(}
        syntax [varlist(default=none)] [if] [in] [ , * ]
        if "`varlist'" == "" {c -(}
        unab varlist : _all
        local varlist : subinstr local varlist "`_sortindex'" ""
        local vartext "{c -(}txt{c )-} all variables"
        {c )-}
        else local vartext "{c -(}res{c )-} `varlist'"
        {c )-}
      - marksample touse, novarlist
      - qui count if `touse'
      = qui count if __000001
      - return scalar N = r(N)
      - if r(N) == 0 {c -(}
        error 2000
        {c )-}
      - tempvar order dgroup Ngroup example freq surplus uniq
      - di _n "{c -(}p 0 4{c )-}{c -(}txt{c )-}Duplicates in terms of `vartext'{c -(}p_end{c )-}"
      = di _n "{c -(}p 0 4{c )-}{c -(}txt{c )-}Duplicates in terms of {c -(}res{c )-} nid ihme_loc_id year_start year_end survey_module file_path{c -(}p_end{c )-}"
      - gen long `order' = _n
      = gen long __000002 = _n
      - bysort `touse' `varlist' : gen long `Ngroup' = _N
      = bysort __000001 nid ihme_loc_id year_start year_end survey_module file_path : gen long __000004 = _N
      - qui if "`cmd'" == "tag" {c -(}
      = qui if "tag" == "tag" {c -(}
      - gen long `generate' = `Ngroup' - 1 if `touse'
      = gen long kittendupe = __000004 - 1 if __000001
      - compress `generate'
      = compress kittendupe
      - exit 0
      {hline 74} end duplicates {hline}
    - tab kittendupe if kittendupe > 0
    - if `r(N)' > 0 {c -(}
    = if 0 > 0 {c -(}
      di as error "Duplicates in codebook (`topic'). Please address."
      br if kittendupe > 0
      STOP
      {c )-}
    - drop kittendupe
    - if "`topic'" == "basic" {c -(}
    = if "basic" == "basic" {c -(}
    - keep if !mi(ubcov_id)
    - tempfile temp
    - save `temp', replace
    = save /tmp/St48035.000001, replace
    - {c )-}
    - else {c -(}
      drop nid survey_name ihme_loc_id year_start year_end survey_module file_path
      merge 1:1 ubcov_id using `temp', gen(kittenmerge_`topic') keep(2 3)
      replace kittenmerge_`topic' = 0 if kittenmerge_`topic' != 3
      save `temp', replace
      {c )-}
    - {c )-}
    - gs_db, topic(`topic') obj("codebook")
    = gs_db, topic(hap) obj("codebook")
      {hline 77} begin gs_db {hline}
      - syntax, obj(str) [topic(str)]
      - local links = "1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY"
      - gs_load, key(`links')
      = gs_load, key(1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY)
        {hline 73} begin gs_load {hline}
        - syntax, key(str)
        - preserve
        - clear
          {hline 73} begin clear {hline}
          - if _caller() < 10 {c -(}
            _clear_9 `0'
            exit
            {c )-}
          - version 10
          - syntax [anything]
          - tokenize `anything'
          = tokenize 
          - if `"`2'"' != "" {c -(}
          = if `""' != "" {c -(}
            display as err "`2' not allowed"
            exit 198
            {c )-}
          - if "`1'"=="" {c -(}
          = if ""=="" {c -(}
          - drop _all
          - label drop _all
            {hline 71} begin label {hline}
            - version 10.0
            - gettoken val : 0
            - if (strpos("`val'", "val") > 0 ) {c -(}
            = if (strpos("drop", "val") > 0 ) {c -(}
              gettoken val 0 : 0
              syntax anything [, nofix]
              if "`fix'" != "" {c -(}
              local fix ", nofix"
              {c )-}
              gettoken var rest : anything
              while `"`rest'"' != "" {c -(}
              gettoken lab rest : rest
              local label "`lab'"
              {c )-}
              local vlist : list anything - lab
              if "`lab'" == "." {c -(}
              local lab ""
              {c )-}
              foreach var of varlist `vlist' {c -(}
              _label `val' `var' `lab' `fix'
              {c )-}
              {c )-}
            - else {c -(}
            - _label `macval(0)'
            = _label drop _all
            - {c )-}
            {hline 73} end label {hline}
          - {c )-}
          - else if "`1'"=="mata" {c -(}
          = else if ""=="mata" {c -(}
            mata: mata clear
            {c )-}
          - else if inlist("`1'", "results", "matrix") {c -(}
          = else if inlist("", "results", "matrix") {c -(}
            return clear
            clearreturn
            ereturn clear
            sreturn clear
            _return drop _all
            if ("`1'" == "matrix") {c -(}
            matrix drop _all
            _est drop _all
            {c )-}
            {c )-}
          - else if "`1'"=="programs" {c -(}
          = else if ""=="programs" {c -(}
            program drop _all
            {c )-}
          - else if "`1'"=="ado" {c -(}
          = else if ""=="ado" {c -(}
            program drop _allado
            {c )-}
          - else if "`1'"=="*" | "`1'"=="all" {c -(}
          = else if ""=="*" | ""=="all" {c -(}
            capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
            capture
            if (0`semmods') {c -(}
            display as err "-clear all- not allowed while an SEM Builder is open"
            exit 1
            {c )-}
            drop _all
            label drop _all
            matrix drop _all
            scalar drop _all
            constraint drop _all
            eq drop _all
            file close _all
            postutil clear
            _return drop _all
            discard
            program drop _all
            timer clear
            mata: mata clear
            {c )-}
          - else {c -(}
            display as err "`1' not allowed"
            exit 198
            {c )-}
          {hline 75} end clear {hline}
        - set obs 1
        - gen blah = 1
        - tempfile temp
        - save `temp', replace
        = save /tmp/St48035.000003, replace
        - restore
        - local link "https://docs.google.com/spreadsheets/d/`key'/export?format=csv"
        = local link "https://docs.google.com/spreadsheets/d/1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY/export?format=csv"
        - copy "`link'" `temp'
        = copy "https://docs.google.com/spreadsheets/d/1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY/export?format=csv" /tmp/St48035.000003
        - import delimited using `temp', clear varnames(1) stringcols(_all) charset("utf-8")
        = import delimited using /tmp/St48035.000003, clear varnames(1) stringcols(_all) charset("utf-8")
          {hline 72} begin import {hline}
          - version 12
          - gettoken subcmd 0 : 0, parse(" ,")
          - if `"`subcmd'"' == "delim" {c -(}
          = if `"delimited"' == "delim" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimi" {c -(}
          = else if `"delimited"' == "delimi" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimit" {c -(}
          = else if `"delimited"' == "delimit" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimite" {c -(}
          = else if `"delimited"' == "delimite" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimited" {c -(}
          = else if `"delimited"' == "delimited" {c -(}
          - ImpDelim `0'
          = ImpDelim  using /tmp/St48035.000003, clear varnames(1) stringcols(_all) charset("utf-8")
            {hline 61} begin import.ImpDelim {hline}
            - version 13
            - import_delimited `0'
            = import_delimited using /tmp/St48035.000003, clear varnames(1) stringcols(_all) charset("utf-8")
              {hline 58} begin import_delimited {hline}
              - version 13
              - gettoken filename rest : 0, parse(" ,")
              - gettoken comma : rest, parse(" ,")
              - if (`"`filename'"' != "" & (trim(`"`comma'"') == "," | trim(`"`comma'"') == "")) {c -(}
              = if (`"using"' != "" & (trim(`"/tmp/St48035.000003"') == "," | trim(`"/tmp/St48035.000003"') == "")) {c -(}
                local 0 `"using `0'"'
                {c )-}
              - capture syntax using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
              - if _rc {c -(}
                syntax [anything(name=vlist id="vlist")] using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
                {c )-}
              - mata:import_delim_import_file()
                {hline 67} begin clear {hline}
                - if _caller() < 10 {c -(}
                  _clear_9 `0'
                  exit
                  {c )-}
                - version 10
                - syntax [anything]
                - tokenize `anything'
                = tokenize 
                - if `"`2'"' != "" {c -(}
                = if `""' != "" {c -(}
                  display as err "`2' not allowed"
                  exit 198
                  {c )-}
                - if "`1'"=="" {c -(}
                = if ""=="" {c -(}
                - drop _all
                - label drop _all
                  {hline 65} begin label {hline}
                  - version 10.0
                  - gettoken val : 0
                  - if (strpos("`val'", "val") > 0 ) {c -(}
                  = if (strpos("drop", "val") > 0 ) {c -(}
                    gettoken val 0 : 0
                    syntax anything [, nofix]
                    if "`fix'" != "" {c -(}
                    local fix ", nofix"
                    {c )-}
                    gettoken var rest : anything
                    while `"`rest'"' != "" {c -(}
                    gettoken lab rest : rest
                    local label "`lab'"
                    {c )-}
                    local vlist : list anything - lab
                    if "`lab'" == "." {c -(}
                    local lab ""
                    {c )-}
                    foreach var of varlist `vlist' {c -(}
                    _label `val' `var' `lab' `fix'
                    {c )-}
                    {c )-}
                  - else {c -(}
                  - _label `macval(0)'
                  = _label drop _all
                  - {c )-}
                  {hline 67} end label {hline}
                - {c )-}
                - else if "`1'"=="mata" {c -(}
                = else if ""=="mata" {c -(}
                  mata: mata clear
                  {c )-}
                - else if inlist("`1'", "results", "matrix") {c -(}
                = else if inlist("", "results", "matrix") {c -(}
                  return clear
                  clearreturn
                  ereturn clear
                  sreturn clear
                  _return drop _all
                  if ("`1'" == "matrix") {c -(}
                  matrix drop _all
                  _est drop _all
                  {c )-}
                  {c )-}
                - else if "`1'"=="programs" {c -(}
                = else if ""=="programs" {c -(}
                  program drop _all
                  {c )-}
                - else if "`1'"=="ado" {c -(}
                = else if ""=="ado" {c -(}
                  program drop _allado
                  {c )-}
                - else if "`1'"=="*" | "`1'"=="all" {c -(}
                = else if ""=="*" | ""=="all" {c -(}
                  capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
                  capture
                  if (0`semmods') {c -(}
                  display as err "-clear all- not allowed while an SEM Builder is open"
                  exit 1
                  {c )-}
                  drop _all
                  label drop _all
                  matrix drop _all
                  scalar drop _all
                  constraint drop _all
                  eq drop _all
                  file close _all
                  postutil clear
                  _return drop _all
                  discard
                  program drop _all
                  timer clear
                  mata: mata clear
                  {c )-}
                - else {c -(}
                  display as err "`1' not allowed"
                  exit 198
                  {c )-}
                {hline 69} end clear {hline}
              {hline 60} end import_delimited {hline}
            {hline 63} end import.ImpDelim {hline}
          - {c )-}
          - else if `"`subcmd'"' == "exc" {c -(}
          = else if `"delimited"' == "exc" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "exce" {c -(}
          = else if `"delimited"' == "exce" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "excel" {c -(}
          = else if `"delimited"' == "excel" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "hav" {c -(}
          = else if `"delimited"' == "hav" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "have" {c -(}
          = else if `"delimited"' == "have" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "haver" {c -(}
          = else if `"delimited"' == "haver" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "sasxport" {c -(}
          = else if `"delimited"' == "sasxport" {c -(}
            ImpSasxport `0'
            {c )-}
          - else {c -(}
            display as error `"import: unknown subcommand "`subcmd'""'
            exit 198
            {c )-}
          {hline 74} end import {hline}
        {hline 75} end gs_load {hline}
      - keep if obj =="`obj'"
      = keep if obj =="codebook"
      - if !mi("`topic'") keep if topic == "`topic'"
      = if !mi("hap") keep if topic == "hap"
      - if _N == 0 {c -(}
        di as error "Codebook not listed in links (https://docs.google.com/spreadsheets/d/`links'/edit#gid=0)"
        STOP
        {c )-}
      - if _N > 1 {c -(}
        if !mi("`topic'") di as error "Duplicates in topic (`topic') and obj (`obj')"
        else di as error "Duplicates in obj (`obj')"
        STOP
        {c )-}
      - else {c -(}
      - local key `=key[1]'
      = local key 1Nd3m0ezwWxzi6TmEh-XU4xfoMjZLyvzJ7vZF1m8rv0o
      - gs_load, key(`key')
      = gs_load, key(1Nd3m0ezwWxzi6TmEh-XU4xfoMjZLyvzJ7vZF1m8rv0o)
        {hline 73} begin gs_load {hline}
        - syntax, key(str)
        - preserve
        - clear
          {hline 73} begin clear {hline}
          - if _caller() < 10 {c -(}
            _clear_9 `0'
            exit
            {c )-}
          - version 10
          - syntax [anything]
          - tokenize `anything'
          = tokenize 
          - if `"`2'"' != "" {c -(}
          = if `""' != "" {c -(}
            display as err "`2' not allowed"
            exit 198
            {c )-}
          - if "`1'"=="" {c -(}
          = if ""=="" {c -(}
          - drop _all
          - label drop _all
            {hline 71} begin label {hline}
            - version 10.0
            - gettoken val : 0
            - if (strpos("`val'", "val") > 0 ) {c -(}
            = if (strpos("drop", "val") > 0 ) {c -(}
              gettoken val 0 : 0
              syntax anything [, nofix]
              if "`fix'" != "" {c -(}
              local fix ", nofix"
              {c )-}
              gettoken var rest : anything
              while `"`rest'"' != "" {c -(}
              gettoken lab rest : rest
              local label "`lab'"
              {c )-}
              local vlist : list anything - lab
              if "`lab'" == "." {c -(}
              local lab ""
              {c )-}
              foreach var of varlist `vlist' {c -(}
              _label `val' `var' `lab' `fix'
              {c )-}
              {c )-}
            - else {c -(}
            - _label `macval(0)'
            = _label drop _all
            - {c )-}
            {hline 73} end label {hline}
          - {c )-}
          - else if "`1'"=="mata" {c -(}
          = else if ""=="mata" {c -(}
            mata: mata clear
            {c )-}
          - else if inlist("`1'", "results", "matrix") {c -(}
          = else if inlist("", "results", "matrix") {c -(}
            return clear
            clearreturn
            ereturn clear
            sreturn clear
            _return drop _all
            if ("`1'" == "matrix") {c -(}
            matrix drop _all
            _est drop _all
            {c )-}
            {c )-}
          - else if "`1'"=="programs" {c -(}
          = else if ""=="programs" {c -(}
            program drop _all
            {c )-}
          - else if "`1'"=="ado" {c -(}
          = else if ""=="ado" {c -(}
            program drop _allado
            {c )-}
          - else if "`1'"=="*" | "`1'"=="all" {c -(}
          = else if ""=="*" | ""=="all" {c -(}
            capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
            capture
            if (0`semmods') {c -(}
            display as err "-clear all- not allowed while an SEM Builder is open"
            exit 1
            {c )-}
            drop _all
            label drop _all
            matrix drop _all
            scalar drop _all
            constraint drop _all
            eq drop _all
            file close _all
            postutil clear
            _return drop _all
            discard
            program drop _all
            timer clear
            mata: mata clear
            {c )-}
          - else {c -(}
            display as err "`1' not allowed"
            exit 198
            {c )-}
          {hline 75} end clear {hline}
        - set obs 1
        - gen blah = 1
        - tempfile temp
        - save `temp', replace
        = save /tmp/St48035.000003, replace
        - restore
        - local link "https://docs.google.com/spreadsheets/d/`key'/export?format=csv"
        = local link "https://docs.google.com/spreadsheets/d/1Nd3m0ezwWxzi6TmEh-XU4xfoMjZLyvzJ7vZF1m8rv0o/export?format=csv"
        - copy "`link'" `temp'
        = copy "https://docs.google.com/spreadsheets/d/1Nd3m0ezwWxzi6TmEh-XU4xfoMjZLyvzJ7vZF1m8rv0o/export?format=csv" /tmp/St48035.000003
        - import delimited using `temp', clear varnames(1) stringcols(_all) charset("utf-8")
        = import delimited using /tmp/St48035.000003, clear varnames(1) stringcols(_all) charset("utf-8")
          {hline 72} begin import {hline}
          - version 12
          - gettoken subcmd 0 : 0, parse(" ,")
          - if `"`subcmd'"' == "delim" {c -(}
          = if `"delimited"' == "delim" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimi" {c -(}
          = else if `"delimited"' == "delimi" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimit" {c -(}
          = else if `"delimited"' == "delimit" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimite" {c -(}
          = else if `"delimited"' == "delimite" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimited" {c -(}
          = else if `"delimited"' == "delimited" {c -(}
          - ImpDelim `0'
          = ImpDelim  using /tmp/St48035.000003, clear varnames(1) stringcols(_all) charset("utf-8")
            {hline 61} begin import.ImpDelim {hline}
            - version 13
            - import_delimited `0'
            = import_delimited using /tmp/St48035.000003, clear varnames(1) stringcols(_all) charset("utf-8")
              {hline 58} begin import_delimited {hline}
              - version 13
              - gettoken filename rest : 0, parse(" ,")
              - gettoken comma : rest, parse(" ,")
              - if (`"`filename'"' != "" & (trim(`"`comma'"') == "," | trim(`"`comma'"') == "")) {c -(}
              = if (`"using"' != "" & (trim(`"/tmp/St48035.000003"') == "," | trim(`"/tmp/St48035.000003"') == "")) {c -(}
                local 0 `"using `0'"'
                {c )-}
              - capture syntax using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
              - if _rc {c -(}
                syntax [anything(name=vlist id="vlist")] using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
                {c )-}
              - mata:import_delim_import_file()
                {hline 67} begin clear {hline}
                - if _caller() < 10 {c -(}
                  _clear_9 `0'
                  exit
                  {c )-}
                - version 10
                - syntax [anything]
                - tokenize `anything'
                = tokenize 
                - if `"`2'"' != "" {c -(}
                = if `""' != "" {c -(}
                  display as err "`2' not allowed"
                  exit 198
                  {c )-}
                - if "`1'"=="" {c -(}
                = if ""=="" {c -(}
                - drop _all
                - label drop _all
                  {hline 65} begin label {hline}
                  - version 10.0
                  - gettoken val : 0
                  - if (strpos("`val'", "val") > 0 ) {c -(}
                  = if (strpos("drop", "val") > 0 ) {c -(}
                    gettoken val 0 : 0
                    syntax anything [, nofix]
                    if "`fix'" != "" {c -(}
                    local fix ", nofix"
                    {c )-}
                    gettoken var rest : anything
                    while `"`rest'"' != "" {c -(}
                    gettoken lab rest : rest
                    local label "`lab'"
                    {c )-}
                    local vlist : list anything - lab
                    if "`lab'" == "." {c -(}
                    local lab ""
                    {c )-}
                    foreach var of varlist `vlist' {c -(}
                    _label `val' `var' `lab' `fix'
                    {c )-}
                    {c )-}
                  - else {c -(}
                  - _label `macval(0)'
                  = _label drop _all
                  - {c )-}
                  {hline 67} end label {hline}
                - {c )-}
                - else if "`1'"=="mata" {c -(}
                = else if ""=="mata" {c -(}
                  mata: mata clear
                  {c )-}
                - else if inlist("`1'", "results", "matrix") {c -(}
                = else if inlist("", "results", "matrix") {c -(}
                  return clear
                  clearreturn
                  ereturn clear
                  sreturn clear
                  _return drop _all
                  if ("`1'" == "matrix") {c -(}
                  matrix drop _all
                  _est drop _all
                  {c )-}
                  {c )-}
                - else if "`1'"=="programs" {c -(}
                = else if ""=="programs" {c -(}
                  program drop _all
                  {c )-}
                - else if "`1'"=="ado" {c -(}
                = else if ""=="ado" {c -(}
                  program drop _allado
                  {c )-}
                - else if "`1'"=="*" | "`1'"=="all" {c -(}
                = else if ""=="*" | ""=="all" {c -(}
                  capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
                  capture
                  if (0`semmods') {c -(}
                  display as err "-clear all- not allowed while an SEM Builder is open"
                  exit 1
                  {c )-}
                  drop _all
                  label drop _all
                  matrix drop _all
                  scalar drop _all
                  constraint drop _all
                  eq drop _all
                  file close _all
                  postutil clear
                  _return drop _all
                  discard
                  program drop _all
                  timer clear
                  mata: mata clear
                  {c )-}
                - else {c -(}
                  display as err "`1' not allowed"
                  exit 198
                  {c )-}
                {hline 69} end clear {hline}
              {hline 60} end import_delimited {hline}
            {hline 63} end import.ImpDelim {hline}
          - {c )-}
          - else if `"`subcmd'"' == "exc" {c -(}
          = else if `"delimited"' == "exc" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "exce" {c -(}
          = else if `"delimited"' == "exce" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "excel" {c -(}
          = else if `"delimited"' == "excel" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "hav" {c -(}
          = else if `"delimited"' == "hav" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "have" {c -(}
          = else if `"delimited"' == "have" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "haver" {c -(}
          = else if `"delimited"' == "haver" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "sasxport" {c -(}
          = else if `"delimited"' == "sasxport" {c -(}
            ImpSasxport `0'
            {c )-}
          - else {c -(}
            display as error `"import: unknown subcommand "`subcmd'""'
            exit 198
            {c )-}
          {hline 74} end import {hline}
        {hline 75} end gs_load {hline}
      - {c )-}
      {hline 79} end gs_db {hline}
    - ds
      {hline 80} begin ds {hline}
      - version 9
      - local version : di "version " string(_caller()) ":"
      - if (_caller() <= 4) {c -(}
        `version' describe, simple
        exit
        {c )-}
      - else {c -(}
      - ds_util `0'
      = ds_util 
        {hline 73} begin ds_util {hline}
        - version 8
        - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detail Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
        - if "`varlist'" == "" {c -(}
        = if "gbd_assigned gbd_notes exclude_reason date_modified date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false" == "" {c -(}
          exit
          {c )-}
        - if !inrange(`indent',0,244) {c -(}
        = if !inrange(0,0,244) {c -(}
          di as err "indent() should be in the range 0..244"
          exit 198
          {c )-}
        - if !inrange(`varwidth',5,32) {c -(}
        = if !inrange(12,5,32) {c -(}
          di as err "varwidth() should be in the range 5..32"
          exit 198
          {c )-}
        - if !inrange(`skip',1,10) {c -(}
        = if !inrange(2,1,10) {c -(}
          di as err "skip() should be in the range 1..10"
          exit 198
          {c )-}
        - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
        = local nopts = (`""' != "") + (`""' != "") + ("" != "")
        - if `nopts' == 3 {c -(}
        = if 0 == 3 {c -(}
          di as err "may not combine options has(), not(), and not"
          exit 198
          {c )-}
        - else if `nopts' == 2 {c -(}
        = else if 0 == 2 {c -(}
          if (`"`has'"' == "") {c -(}
          di as err "may not combine options not() and not"
          exit 198
          {c )-}
          else if (`"`not'"' == "") {c -(}
          di as err "may not combine options has() and not"
          exit 198
          {c )-}
          else if (`"`not2'"' == "") {c -(}
          di as err "may not combine options has() and not()"
          exit 198
          {c )-}
          {c )-}
        - if `"`not'"' != "" {c -(}
        = if `""' != "" {c -(}
          local has `"`not'"'
          local opt "not"
          {c )-}
        - else if `"`has'"' != "" {c -(}
        = else if `""' != "" {c -(}
          local opt "has"
          {c )-}
        - local inse = "`insensitive'" != ""
        = local inse = "" != ""
        - if `"`has'"' != "" {c -(}
        = if `""' != "" {c -(}
          CheckHas `"`has'"' "`opt'" "`inse'"
          if "`what'" == "varl" | "`what'" == "vall" {c -(}
          VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
          {c )-}
          else if "`what'" == "f" {c -(}
          Format `"`which'"' "`varlist'" "`inse'"
          {c )-}
          else if "`what'" == "c" {c -(}
          Char `"`which'"' "`varlist'" "`inse'"
          {c )-}
          else if "`what'" == "t" {c -(}
          Type `"`which'"' "`varlist'"
          {c )-}
          if `"`not'"' != "" {c -(}
          local varlist : list varlist - vlist
          {c )-}
          else if `"`has'"' != "" {c -(}
          local varlist "`vlist'"
          {c )-}
          {c )-}
        - if `"`not2'"' != "" {c -(}
        = if `""' != "" {c -(}
          unab all : *
          local varlist : list all - varlist
          {c )-}
        - if "`varlist'" == "" {c -(}
        = if "gbd_assigned gbd_notes exclude_reason date_modified date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false" == "" {c -(}
          exit
          {c )-}
        - if "`alpha'" != "" {c -(}
        = if "" != "" {c -(}
          local varlist : list sort varlist
          {c )-}
        - if "`detail'" != "" {c -(}
        = if "" != "" {c -(}
          describe `varlist'
          {c )-}
        - else {c -(}
        - local nvar : word count `varlist'
        = local nvar : word count gbd_assigned gbd_notes exclude_reason date_modified date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false
        - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
        = local ncol = int((99 + 2) / (12 + 2))
        - local i 0
        - local vlist
        - foreach v of local varlist {c -(}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue"'
        - {c )-}
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se"'
        - {c )-}
        - DisplayInCols txt `indent' `skip' 0 `vlist'
        = DisplayInCols txt 0 2 0  gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          {hline 57} begin ds_util.DisplayInCols {hline}
          - gettoken sty 0 : 0
          - gettoken indent 0 : 0
          - gettoken pad 0 : 0
          - gettoken wid 0 : 0
          - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
          = local indent = cond(0==. | 0<0, 0, 0)
          - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
          = local pad = cond(2==. | 2<1, 2, 2)
          - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
          = local wid = cond(0==. | 0<0, 0, 0)
          - local n : list sizeof 0
          - if `n'==0 {c -(}
          = if 37==0 {c -(}
            exit
            {c )-}
          - foreach x of local 0 {c -(}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(0, length(`"gbd_assigned"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"gbd_notes"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"exclude_re~n"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"date_modif~d"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"date_added"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"assigned"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"notes"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"validated"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"ubcov_id"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"survey_name"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"nid"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"ihme_loc_id"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"year_start"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"year_end"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"survey_mod~e"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"file_path"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"hh_size"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"cooking_fuel"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"cooking_type"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"cooking_ty~y"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"cooking_lo~n"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"heating_fuel"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"heating_type"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"heating_ty~y"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"lighting_f~l"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"electricity"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"electrici~ue"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"electrici~se"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"housing_roof"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"housing_wall"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"housing_fl~r"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"housing_ro~m"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"housing_wa~m"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"housing_fl~m"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"cooking_fu~i"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"cooking_f~ue"'))
          - {c )-}
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"cooking_f~se"'))
          - {c )-}
          - local wid = `wid' + `pad'
          = local wid = 12 + 2
          - local cols = int((`c(linesize)'+1-`indent')/`wid')
          = local cols = int((99+1-0)/14)
          - if `cols' < 2 {c -(}
          = if 7 < 2 {c -(}
            if `indent' {c -(}
            local col "_column(`=`indent'+1')"
            {c )-}
            foreach x of local 0 {c -(}
            di as `sty' `col' `"`x'"'
            {c )-}
            exit
            {c )-}
          - local lines = `n'/`cols'
          = local lines = 37/7
          - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
          = local lines = int(cond(5.285714285714286>int(5.285714285714286), 5.285714285714286+1, 5.285714285714286))
          - forvalues i=1(1)`lines' {c -(}
          = forvalues i=1(1)6 {c -(}
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((7)*6+1, 37)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {c -(}
          = forvalues j=1(6)37 {c -(}
          - local x : word `j' of `0'
          = local x : word 1 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "gbd_assigned" _c
          - local col = `col' + `wid'
          = local col = 1 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 7 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "notes" _c
          - local col = `col' + `wid'
          = local col = 15 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 13 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(29) "year_start" _c
          - local col = `col' + `wid'
          = local col = 29 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 19 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(43) "cooking_type" _c
          - local col = `col' + `wid'
          = local col = 43 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 25 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(57) "lighting_f~l" _c
          - local col = `col' + `wid'
          = local col = 57 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 31 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(71) "housing_fl~r" _c
          - local col = `col' + `wid'
          = local col = 71 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 37 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(85) "cooking_f~se" _c
          - local col = `col' + `wid'
          = local col = 85 + 14
          - {c )-}
          - di as `sty'
          = di as txt
          - {c )-}
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((7)*6+2, 37)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {c -(}
          = forvalues j=2(6)37 {c -(}
          - local x : word `j' of `0'
          = local x : word 2 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "gbd_notes" _c
          - local col = `col' + `wid'
          = local col = 1 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 8 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "validated" _c
          - local col = `col' + `wid'
          = local col = 15 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 14 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(29) "year_end" _c
          - local col = `col' + `wid'
          = local col = 29 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 20 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(43) "cooking_ty~y" _c
          - local col = `col' + `wid'
          = local col = 43 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 26 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(57) "electricity" _c
          - local col = `col' + `wid'
          = local col = 57 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 32 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(71) "housing_ro~m" _c
          - local col = `col' + `wid'
          = local col = 71 + 14
          - {c )-}
          - di as `sty'
          = di as txt
          - {c )-}
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((7)*6+3, 37)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {c -(}
          = forvalues j=3(6)37 {c -(}
          - local x : word `j' of `0'
          = local x : word 3 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "exclude_re~n" _c
          - local col = `col' + `wid'
          = local col = 1 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 9 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "ubcov_id" _c
          - local col = `col' + `wid'
          = local col = 15 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 15 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(29) "survey_mod~e" _c
          - local col = `col' + `wid'
          = local col = 29 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 21 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(43) "cooking_lo~n" _c
          - local col = `col' + `wid'
          = local col = 43 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 27 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(57) "electrici~ue" _c
          - local col = `col' + `wid'
          = local col = 57 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 33 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(71) "housing_wa~m" _c
          - local col = `col' + `wid'
          = local col = 71 + 14
          - {c )-}
          - di as `sty'
          = di as txt
          - {c )-}
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((7)*6+4, 37)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {c -(}
          = forvalues j=4(6)37 {c -(}
          - local x : word `j' of `0'
          = local x : word 4 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "date_modif~d" _c
          - local col = `col' + `wid'
          = local col = 1 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 10 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "survey_name" _c
          - local col = `col' + `wid'
          = local col = 15 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 16 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(29) "file_path" _c
          - local col = `col' + `wid'
          = local col = 29 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 22 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(43) "heating_fuel" _c
          - local col = `col' + `wid'
          = local col = 43 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 28 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(57) "electrici~se" _c
          - local col = `col' + `wid'
          = local col = 57 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 34 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(71) "housing_fl~m" _c
          - local col = `col' + `wid'
          = local col = 71 + 14
          - {c )-}
          - di as `sty'
          = di as txt
          - {c )-}
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((7)*6+5, 37)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {c -(}
          = forvalues j=5(6)37 {c -(}
          - local x : word `j' of `0'
          = local x : word 5 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "date_added" _c
          - local col = `col' + `wid'
          = local col = 1 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 11 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "nid" _c
          - local col = `col' + `wid'
          = local col = 15 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 17 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(29) "hh_size" _c
          - local col = `col' + `wid'
          = local col = 29 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 23 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(43) "heating_type" _c
          - local col = `col' + `wid'
          = local col = 43 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 29 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(57) "housing_roof" _c
          - local col = `col' + `wid'
          = local col = 57 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 35 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(71) "cooking_fu~i" _c
          - local col = `col' + `wid'
          = local col = 71 + 14
          - {c )-}
          - di as `sty'
          = di as txt
          - {c )-}
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((7)*6+6, 37)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {c -(}
          = forvalues j=6(6)37 {c -(}
          - local x : word `j' of `0'
          = local x : word 6 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "assigned" _c
          - local col = `col' + `wid'
          = local col = 1 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 12 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "ihme_loc_id" _c
          - local col = `col' + `wid'
          = local col = 15 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 18 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(29) "cooking_fuel" _c
          - local col = `col' + `wid'
          = local col = 29 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 24 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(43) "heating_ty~y" _c
          - local col = `col' + `wid'
          = local col = 43 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 30 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(57) "housing_wall" _c
          - local col = `col' + `wid'
          = local col = 57 + 14
          - {c )-}
          - local x : word `j' of `0'
          = local x : word 36 of   gbd_assigned gbd_notes exclude_re~n date_modif~d date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m cooking_fu~i cooking_f~ue cooking_f~se
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(71) "cooking_f~ue" _c
          - local col = `col' + `wid'
          = local col = 71 + 14
          - {c )-}
          - di as `sty'
          = di as txt
          - {c )-}
          {hline 59} end ds_util.DisplayInCols {hline}
        - {c )-}
        - return local varlist `varlist'
        = return local varlist gbd_assigned gbd_notes exclude_reason date_modified date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false
        {hline 75} end ds_util {hline}
      - exit
      {hline 82} end ds {hline}
    - local cb_vars `r(varlist)'
    = local cb_vars gbd_assigned gbd_notes exclude_reason date_modified date_added assigned notes validated ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false
    - local vars ubcov_id $vars
    = local vars ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num
    - local drop_vars : list cb_vars - vars
    - drop `drop_vars'
    = drop gbd_assigned gbd_notes exclude_reason date_modified date_added assigned notes validated
    - destring ubcov_id, replace force
      {hline 74} begin destring {hline}
      - version 7.0
      - syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(string)] [percent] [dpcomma]
      - if "`percent'" == "percent" {c -(}
      = if "" == "percent" {c -(}
        if !index(`"`ignore'"', "%") {c -(}
        local ignore `"`ignore'%"'
        {c )-}
        {c )-}
      - if "`generate'" != "" & "`replace'" != "" {c -(}
      = if "" != "" & "replace" != "" {c -(}
        di as err "options generate and replace are mutually exclusive"
        exit 198
        {c )-}
      - if "`generate'" == "" & "`replace'" == "" {c -(}
      = if "" == "" & "replace" == "" {c -(}
        di as err "must specify either generate or replace option"
        exit 198
        {c )-}
      - if "`generate'" != "" {c -(}
      = if "" != "" {c -(}
        local ct1: word count `varlist'
        local save "`varlist'"
        local 0 "`generate'"
        capture syntax newvarlist
        if _rc {c -(}
        di as err "generate(newvarlist) invalid"
        exit _rc
        {c )-}
        local generate "`varlist'"
        local varlist "`save'"
        local ct2: word count `generate'
        if `ct1' != `ct2' {c -(}
        di as err "number of variables in varlist must equal"
        di as err "number of variables in generate(newvarlist)"
        exit 198
        {c )-}
        {c )-}
      - local m 1
      - if `"`ignore'"' == "" {c -(}
      = if `""' == "" {c -(}
      - local ignore ""
      - {c )-}
      - local l = length(`"`ignore'"')
      = local l = length(`""')
      - while `m' <= `l' {c -(}
      = while 1 <= 0 {c -(}
        local char`m' = substr(`"`ignore'"', `m', 1)
        if substr(`"`ignore'"', `m', 1) == " " {c -(}
        local char`m' " "
        {c )-}
        local m = `m' + 1
        {c )-}
      - if "`generate'" != "" {c -(}
      = if "" != "" {c -(}
        tokenize `varlist'
        local flag 0
        local jj 1
        local yy 1
        local varno 0
        while "`1'" != "" {c -(}
        local varno = `varno' + 1
        capture confirm string variable `1'
        if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "generate"
        local newvar : word `varno' of `generate'
        mac shift
        {c )-}
        else {c -(}
        tempvar temp
        qui gen str1 `temp' = ""
        qui replace `temp' = `1'
        qui compress `temp'
        while `"`char`jj''"' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
        qui replace `temp' = trim(`temp')
        qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        local r = r(N)
        qui count if real(`temp') >= .
        local s = r(N)
        if `r' != `s' {c -(}
        local flag 1
        {c )-}
        if `flag' == 1 & "`force'" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "generate"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "generate"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
        else {c -(}
        tempvar OLDVAR ind con
        qui gen str1 `OLDVAR' = ""
        qui replace `OLDVAR' = `1'
        qui gen byte `ind' = .
        qui gen byte `con' = 0
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`OLDVAR', `"`t'"') != 0
        qui count if `ind' == 1
        if r(N) > 0 {c -(}
        if `"`t'"' == " " {c -(}
        local b `"`b' space"'
        {c )-}
        else {c -(}
        local b `"`b' `t'"'
        {c )-}
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`OLDVAR', `"`t'"') != 0
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `OLDVAR' = subinstr(`OLDVAR', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        local newvar : word `varno' of `generate'
        local vl: variable label `1'
        if "`float'" == "" {c -(}
        qui gen double `newvar' = real(`OLDVAR')
        {c )-}
        else {c -(}
        qui gen float `newvar' = real(`OLDVAR')
        {c )-}
        move `newvar' `1'
        move `1' `newvar'
        Charcopy `1' `newvar'
        label variable `newvar' `"`vl'"'
        char `newvar'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) > 0 {c -(}
        qui replace `newvar' = `newvar'/100
        {c )-}
        qui compress `newvar'
        local type : type `newvar'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; `newvar' " as res "generated " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1': characters" as res `"`b'"' as txt " removed; `newvar' " as res "generated " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; `newvar' " as res "generated " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        drop `ind' `con' `OLDVAR'
        local jj 1
        local yy 1
        mac shift
        {c )-}
        drop `temp'
        {c )-}
        {c )-}
        {c )-}
      - else if "`replace'" != "" {c -(}
      = else if "replace" != "" {c -(}
      - tokenize `varlist'
      = tokenize ubcov_id
      - tempvar ind con
      - qui gen byte `con' = 0
      = qui gen byte __000001 = 0
      - qui gen byte `ind' = .
      = qui gen byte __000000 = .
      - local flag 0
      - local yy 1
      - local jj 1
      - while "`1'" != "" {c -(}
      = while "ubcov_id" != "" {c -(}
      - capture confirm string variable `1'
      = capture confirm string variable ubcov_id
      - if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
      - else {c -(}
      - tempvar temp
      - qui gen str1 `temp' = ""
      = qui gen str1 __000002 = ""
      - qui replace `temp' = `1'
      = qui replace __000002 = ubcov_id
      - qui compress `temp'
      = qui compress __000002
      - while `"`char`jj''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
      - qui replace `temp' = trim(`temp')
      = qui replace __000002 = trim(__000002)
      - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
      = qui count if __000002=="" | __000002=="." | (length(__000002)==2 & inrange(__000002,".a",".z"))
      - local r = r(N)
      - qui count if real(`temp') >= .
      = qui count if real(__000002) >= .
      - local s = r(N)
      - if `r' != `s' {c -(}
      = if 1 != 42 {c -(}
      - local flag 1
      - {c )-}
      - if `flag' == 1 & "`force'" == "" {c -(}
      = if 1 == 1 & "force" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
      - else {c -(}
      - while `"`char`yy''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
      - local c Characters removed were: `b'
      = local c Characters removed were: 
      - tempvar switch
      - local type = cond("`float'" == "float", "float", "double")
      = local type = cond("" == "float", "float", "double")
      - qui gen `type' `switch' = real(`1')
      = qui gen double __000003 = real(ubcov_id)
      - char rename `1' `switch'
      = char rename ubcov_id __000003
      - move `switch' `1'
      = move __000003 ubcov_id
      - local vl: variable label `1'
      = local vl: variable label ubcov_id
      - drop `1'
      = drop ubcov_id
      - if "`float'" == "" {c -(}
      = if "" == "" {c -(}
      - qui gen double `1' = `switch'
      = qui gen double ubcov_id = __000003
      - {c )-}
      - else {c -(}
        qui gen float `1' = `switch'
        {c )-}
      - move `1' `switch'
      = move ubcov_id __000003
      - label variable `1' `"`vl'"'
      = label variable ubcov_id `""'
        {hline 75} begin label {hline}
        - version 10.0
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {c -(}
        = if (strpos("variable", "val") > 0 ) {c -(}
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {c -(}
          local fix ", nofix"
          {c )-}
          gettoken var rest : anything
          while `"`rest'"' != "" {c -(}
          gettoken lab rest : rest
          local label "`lab'"
          {c )-}
          local vlist : list anything - lab
          if "`lab'" == "." {c -(}
          local lab ""
          {c )-}
          foreach var of varlist `vlist' {c -(}
          _label `val' `var' `lab' `fix'
          {c )-}
          {c )-}
        - else {c -(}
        - _label `macval(0)'
        = _label variable ubcov_id `""'
        - {c )-}
        {hline 77} end label {hline}
      - char rename `switch' `1'
      = char rename __000003 ubcov_id
      - char `1'[destring] `c'
      = char ubcov_id[destring] Characters removed were:
      - qui count if `con' == 1
      = qui count if __000001 == 1
      - if "`percent'" != "" & r(N) != 0 {c -(}
      = if "" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
      - qui replace `con' = 0
      = qui replace __000001 = 0
      - qui compress `1'
      = qui compress ubcov_id
      - local type : type `1'
      = local type : type ubcov_id
      - if "`force'" != "" {c -(}
      = if "force" != "" {c -(}
      - di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
      = di as txt "ubcov_id contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "int"
      - {c )-}
      - if `"`b'"' != "" {c -(}
      = if `""' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
      - else if `"`b'"' == "" & "`force'" == "" {c -(}
      = else if `""' == "" & "force" == "" {c -(}
        di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
      - if `s' != 0 {c -(}
      = if 42 != 0 {c -(}
      - local valmsg = cond(`s' > 1, "values", "value")
      = local valmsg = cond(42 > 1, "values", "value")
      - di as txt "(`s' missing `valmsg' generated)"
      = di as txt "(42 missing values generated)"
      - {c )-}
      - local b ""
      - local c ""
      - local jj 1
      - local yy 1
      - drop `switch'
      = drop __000003
      - mac shift
      - {c )-}
      - drop `temp'
      = drop __000002
      - {c )-}
      - {c )-}
      - while "`1'" != "" {c -(}
      = while "" != "" {c -(}
        capture confirm string variable `1'
        if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
        else {c -(}
        tempvar temp
        qui gen str1 `temp' = ""
        qui replace `temp' = `1'
        qui compress `temp'
        while `"`char`jj''"' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
        qui replace `temp' = trim(`temp')
        qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        local r = r(N)
        qui count if real(`temp') >= .
        local s = r(N)
        if `r' != `s' {c -(}
        local flag 1
        {c )-}
        if `flag' == 1 & "`force'" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
        else {c -(}
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        tempvar switch
        local type = cond("`float'" == "float", "float", "double")
        qui gen `type' `switch' = real(`1')
        char rename `1' `switch'
        move `switch' `1'
        local vl: variable label `1'
        drop `1'
        if "`float'" == "" {c -(}
        qui gen double `1' = `switch'
        {c )-}
        else {c -(}
        qui gen float `1' = `switch'
        {c )-}
        move `1' `switch'
        label variable `1' `"`vl'"'
        char rename `switch' `1'
        char `1'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
        qui replace `con' = 0
        qui compress `1'
        local type : type `1'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        local jj 1
        local yy 1
        drop `switch'
        mac shift
        {c )-}
        drop `temp'
        {c )-}
        {c )-}
      - {c )-}
      {hline 76} end destring {hline}
    - drop if ubcov_id == .
    - duplicates tag $key, gen(kittendupe)
    = duplicates tag nid ihme_loc_id year_start year_end survey_module file_path, gen(kittendupe)
      {hline 72} begin duplicates {hline}
      - version 8
      - gettoken cmd 0 : 0, parse(" ,")
      - local l = length("`cmd'")
      = local l = length("tag")
      - if `l' == 0 {c -(}
      = if 3 == 0 {c -(}
        di "{c -(}err{c )-}subcommand needed; see help on {c -(}help duplicates##|_new:duplicates{c )-}"
        exit 198
        {c )-}
      - if substr("report",1,max(1,`l')) == "`cmd'" {c -(}
      = if substr("report",1,max(1,3)) == "tag" {c -(}
        local cmd "report"
        {c )-}
      - else if substr("examples",1,max(1,`l')) == "`cmd'" {c -(}
      = else if substr("examples",1,max(1,3)) == "tag" {c -(}
        local cmd "examples"
        {c )-}
      - else if substr("list",1,max(1,`l')) == "`cmd'" {c -(}
      = else if substr("list",1,max(1,3)) == "tag" {c -(}
        local cmd "list"
        {c )-}
      - else if substr("browse",1,max(1,`l')) == "`cmd'" {c -(}
      = else if substr("browse",1,max(1,3)) == "tag" {c -(}
        local cmd "browse"
        di "{c -(}p 0 0 2{c )-}As of Stata 11.0, browse is " "no longer a valid subcommand.  {c -(}result{c )-}See " "{c -(}help duplicates##remarks:Remarks{c )-} " "under help {c -(}helpb duplicates{c )-} " "for an explanation.{c -(}p_end{c )-}"
        exit 198
        {c )-}
      - else if substr("tag",1,max(1,`l')) == "`cmd'" {c -(}
      = else if substr("tag",1,max(1,3)) == "tag" {c -(}
      - local cmd "tag"
      - {c )-}
      - else if "drop" == "`cmd'" {c -(}
      = else if "drop" == "tag" {c -(}
        {c )-}
      - else {c -(}
        di "{c -(}err{c )-}illegal {c -(}cmd{c )-}duplicates {c -(}err{c )-}subcommand"
        exit 198
        {c )-}
      - if "`cmd'" == "drop" {c -(}
      = if "tag" == "drop" {c -(}
        capture syntax varlist [if] [in]
        if _rc == 0 {c -(}
        di "{c -(}err{c )-}force option required with " "{c -(}cmd{c )-}duplicates drop {c -(}it{c )-}varlist{c -(}rm{c )-}"
        exit 198
        {c )-}
        capture syntax varlist [if] [in], force
        if _rc {c -(}
        syntax [if] [in]
        unab varlist : _all
        local varlist : subinstr local varlist "`_sortindex'" ""
        local vartext "{c -(}txt{c )-} all variables"
        {c )-}
        else local vartext "{c -(}res{c )-} `varlist'"
        {c )-}
      - else if "`cmd'" == "tag" {c -(}
      = else if "tag" == "tag" {c -(}
      - syntax [varlist(default=none)] [if] [in], Generate(str)
      - capture confirm new variable `generate'
      = capture confirm new variable kittendupe
      - if _rc {c -(}
        di as err "generate() must specify new variable"
        exit _rc
        {c )-}
      - if "`varlist'" == "" {c -(}
      = if "nid ihme_loc_id year_start year_end survey_module file_path" == "" {c -(}
        unab varlist : _all
        local varlist : subinstr local varlist "`_sortindex'" ""
        local vartext "{c -(}txt{c )-} all variables"
        {c )-}
      - else local vartext "{c -(}res{c )-} `varlist'"
      = else local vartext "{c -(}res{c )-} nid ihme_loc_id year_start year_end survey_module file_path"
      - {c )-}
      - else {c -(}
        syntax [varlist(default=none)] [if] [in] [ , * ]
        if "`varlist'" == "" {c -(}
        unab varlist : _all
        local varlist : subinstr local varlist "`_sortindex'" ""
        local vartext "{c -(}txt{c )-} all variables"
        {c )-}
        else local vartext "{c -(}res{c )-} `varlist'"
        {c )-}
      - marksample touse, novarlist
      - qui count if `touse'
      = qui count if __000001
      - return scalar N = r(N)
      - if r(N) == 0 {c -(}
        error 2000
        {c )-}
      - tempvar order dgroup Ngroup example freq surplus uniq
      - di _n "{c -(}p 0 4{c )-}{c -(}txt{c )-}Duplicates in terms of `vartext'{c -(}p_end{c )-}"
      = di _n "{c -(}p 0 4{c )-}{c -(}txt{c )-}Duplicates in terms of {c -(}res{c )-} nid ihme_loc_id year_start year_end survey_module file_path{c -(}p_end{c )-}"
      - gen long `order' = _n
      = gen long __000002 = _n
      - bysort `touse' `varlist' : gen long `Ngroup' = _N
      = bysort __000001 nid ihme_loc_id year_start year_end survey_module file_path : gen long __000004 = _N
      - qui if "`cmd'" == "tag" {c -(}
      = qui if "tag" == "tag" {c -(}
      - gen long `generate' = `Ngroup' - 1 if `touse'
      = gen long kittendupe = __000004 - 1 if __000001
      - compress `generate'
      = compress kittendupe
      - exit 0
      {hline 74} end duplicates {hline}
    - tab kittendupe if kittendupe > 0
    - if `r(N)' > 0 {c -(}
    = if 0 > 0 {c -(}
      di as error "Duplicates in codebook (`topic'). Please address."
      br if kittendupe > 0
      STOP
      {c )-}
    - drop kittendupe
    - if "`topic'" == "basic" {c -(}
    = if "hap" == "basic" {c -(}
      keep if !mi(ubcov_id)
      tempfile temp
      save `temp', replace
      {c )-}
    - else {c -(}
    - drop nid survey_name ihme_loc_id year_start year_end survey_module file_path
    - merge 1:1 ubcov_id using `temp', gen(kittenmerge_`topic') keep(2 3)
    = merge 1:1 ubcov_id using /tmp/St48035.000001, gen(kittenmerge_hap) keep(2 3)
      =void resultlist(string scalar macname)
      =        string rowvector    src
      =        string colvector    res
      =        real scalar    i
      =string scalar result(string scalar result)
      =        real scalar    l
      =void resulttext(string scalar macroname, real scalar i)
      =        string scalar    toret
      =void map_mtype(string scalar macname)
      =        string scalar    input, toret
      =void fullfilename(string scalar forstatamac, string scalar fullnamemac, string scalar macname)
      =        string scalar    fullname, path, filename
      =        real scalar    l
      {hline 77} begin merge {hline}
      - version 11
      - gettoken mtype 0 : 0, parse(" ,")
      - if (!strpos("`mtype'", ":") & "`mtype'"!="") {c -(}
      = if (!strpos("1:1", ":") & "1:1"!="") {c -(}
        if (_caller()>=11) {c -(}
        di as smcl as txt "{c -(}p{c )-}"
        di as smcl "(note: you are using old"
        di as smcl "{c -(}bf:merge{c )-} syntax; see"
        di as smcl "{c -(}bf:{c -(}help merge:[D] merge{c )-}{c )-} for new syntax)"
        di as smcl "{c -(}p_end{c )-}"
        {c )-}
        merge_10 `mtype' `0'
        exit
        {c )-}
      - local origmtype `"`mtype'"'
      = local origmtype `"1:1"'
      - mata: map_mtype(`"mtype"')
      - gettoken token : 0, parse(" ,")
      - if ("`token'"=="_n") {c -(}
      = if ("ubcov_id"=="_n") {c -(}
        if ("`mtype'"!="1:1") {c -(}
        error_seq_not11 "`mtype'" "`origmtype'"
        {c )-}
        gettoken token 0 : 0, parse(" ,")
        local mtype "_n"
        {c )-}
      - syntax [varlist(default=none)] using/ [, ASSERT(string) DEBUG GENerate(name) FORCE KEEP(string) KEEPUSing(string) noLabel NOGENerate noNOTEs REPLACE noREPort SORTED UPDATE ]
      - if ("`mtype'"!="_n") {c -(}
      = if ("1:1"!="_n") {c -(}
      - local origmtype `"`mtype'"'
      = local origmtype `"1:1"'
      - mata: map_mtype(`"mtype"')
      - if ("`varlist'"=="") {c -(}
      = if ("ubcov_id"=="") {c -(}
        error_mat_varlist "`mtype'" "`origmtype'"
        {c )-}
      - {c )-}
      - else {c -(}
        if ("`mtype'"=="_n") {c -(}
        if ("`varlist'"!="") {c -(}
        error_seq_varlist
        {c )-}
        {c )-}
        {c )-}
      - mata: fullfilename("using", "usingfull", "using")
      - mata: resultlist("assert")
      - mata: resultlist("keep")
      - if ("`generate'"!="") {c -(}
      = if ("kittenmerge_hap"!="") {c -(}
      - if ("`nogenerate'"!="") {c -(}
      = if (""!="") {c -(}
        di as smcl err "{c -(}p{c )-}"
        di as smcl "options -generate()- and -nogenerate-"
        di as smcl "may not be specified together."
        di as smcl err "{c -(}p_end{c )-}"
        {c )-}
      - confirm new var `generate'
      = confirm new var kittenmerge_hap
      - {c )-}
      - if ("`replace'"!="") {c -(}
      = if (""!="") {c -(}
        if ("`update'"=="") {c -(}
        error_replace
        {c )-}
        {c )-}
      - if ("`sorted'"=="" & "`mtype'"!="_n") {c -(}
      = if (""=="" & "1:1"!="_n") {c -(}
      - local sortedby : sortedby
      - checksort "`sortedby'" "`varlist'"
      = checksort "" "ubcov_id"
        {hline 65} begin merge.checksort {hline}
        - args is should
        - local i 0
        - return scalar sorted = 1
        - foreach v1 of local should {c -(}
        - local ++i
        - local v2 : word `i' of `is'
        = local v2 : word 1 of 
        - if ("`v1'"!="`v2'") {c -(}
        = if ("ubcov_id"!="") {c -(}
        - return scalar sorted = 0
        - continue, break
          {c )-}
          {c )-}
        {hline 67} end merge.checksort {hline}
      - if (!r(sorted)) {c -(}
      - sort `varlist'
      = sort ubcov_id
      - {c )-}
      - quietly describe using "`using'", varlist short
      = quietly describe using "/tmp/St48035.000001", varlist short
        {hline 72} begin describe {hline}
        - version 9
        - local version : di "version " string(_caller()) ":"
        - syntax [anything] [using] [, SImple REPLACE *]
        - if ("`replace'"!="") {c -(}
        = if (""!="") {c -(}
          describe_mk `0'
          return add
          exit
          {c )-}
        - local varlist `"`anything'"'
        = local varlist `""'
        - if ("`simple'" == "") {c -(}
        = if ("" == "") {c -(}
        - `version' _describe `0'
        = version 11: _describe using "/tmp/St48035.000001", varlist short
        - return add
        - {c )-}
        - else {c -(}
          if (`"`options'"' != "") {c -(}
          di as err "simple may not be combined with other options"
          exit 198
          {c )-}
          if (`"`using'"' != "") {c -(}
          qui `version' describe `varlist' `using', varlist
          if "`varlist'" == "" {c -(}
          local vars "`r(varlist)'"
          {c )-}
          else {c -(}
          local vars "`varlist'"
          {c )-}
          local wid = 2
          local n : list sizeof vars
          if `n'==0 {c -(}
          exit
          {c )-}
          foreach x of local vars {c -(}
          local wid = max(`wid', length(`"`x'"'))
          {c )-}
          local wid = `wid' + 2
          local cols = int((`c(linesize)'+1)/`wid')
          if `cols' < 2 {c -(}
          foreach x of local `vars' {c -(}
          di as txt `col' `"`x'"'
          {c )-}
          exit
          {c )-}
          local lines = `n'/`cols'
          local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
          forvalues i=1(1)`lines' {c -(}
          local top = min((`cols')*`lines'+`i', `n')
          local col = 1
          forvalues j=`i'(`lines')`top' {c -(}
          local x : word `j' of `vars'
          di as txt _column(`col') "`x'" _c
          local col = `col' + `wid'
          {c )-}
          di as txt
          {c )-}
          qui `version' describe `varlist' `using', short
          return add
          {c )-}
          else {c -(}
          ds `varlist'
          qui `version' _describe `varlist', short
          return add
          {c )-}
          {c )-}
        {hline 74} end describe {hline}
      - local sortedby "`r(sortlist)'"
      = local sortedby ""
      - checksort "`sortedby'" "`varlist'"
      = checksort "" "ubcov_id"
        {hline 65} begin merge.checksort {hline}
        - args is should
        - local i 0
        - return scalar sorted = 1
        - foreach v1 of local should {c -(}
        - local ++i
        - local v2 : word `i' of `is'
        = local v2 : word 1 of 
        - if ("`v1'"!="`v2'") {c -(}
        = if ("ubcov_id"!="") {c -(}
        - return scalar sorted = 0
        - continue, break
          {c )-}
          {c )-}
        {hline 67} end merge.checksort {hline}
      - if (!r(sorted)) {c -(}
      - preserve
      - qui use "`using'", clear
      = qui use "/tmp/St48035.000001", clear
      - sort `varlist'
      = sort ubcov_id
      - tempfile using
      - qui save "`using'", replace
      = qui save "/tmp/St48035.000003", replace
      - restore
      - {c )-}
      - {c )-}
      - if ("`nogenerate'"!="") {c -(}
      = if (""!="") {c -(}
        tempvar mergevar
        local mergevaristemp 1
        {c )-}
      - else {c -(}
      - local mergevar = cond("`generate'"!="", "`generate'", "_merge")
      = local mergevar = cond("kittenmerge_hap"!="", "kittenmerge_hap", "_merge")
      - local mergevaristemp 0
      - {c )-}
      - local options `update' `replace' `notes' `label' _merge(`mergevar') `force'
      = local options     _merge(kittenmerge_hap) 
      - if (substr("`mtype'", 1, 1)=="1") {c -(}
      = if (substr("1:1", 1, 1)=="1") {c -(}
      - local options `options' uniqmaster
      = local options _merge(kittenmerge_hap) uniqmaster
      - {c )-}
      - if (substr("`mtype'", 3, 1)=="1") {c -(}
      = if (substr("1:1", 3, 1)=="1") {c -(}
      - local options `options' uniqusing
      = local options _merge(kittenmerge_hap) uniqmaster uniqusing
      - {c )-}
      - if ("`keepusing'"!="") {c -(}
      = if (""!="") {c -(}
        local options `options' keep(`keepusing')
        {c )-}
      - if ("`keep'" !="" & !strpos("`keep'" , "2")) {c -(}
      = if ("2 3" !="" & !strpos("2 3" , "2")) {c -(}
        local options `options' nokeep
        {c )-}
      - local _merge `"_merge `varlist' using "`using'", nowarn `options'"'
      = local _merge `"_merge ubcov_id using "/tmp/St48035.000003", nowarn _merge(kittenmerge_hap) uniqmaster uniqusing"'
      - local _merge `"`_merge' tabulate(mresults)"'
      = local _merge `"_merge ubcov_id using "/tmp/St48035.000003", nowarn _merge(kittenmerge_hap) uniqmaster uniqusing tabulate(mresults)"'
      - if ("`debug'"!="") {c -(}
      = if (""!="") {c -(}
        di as txt _n "command is"
        di `"`_merge'"' _n
        {c )-}
      - `_merge'
      = _merge ubcov_id using "/tmp/St48035.000003", nowarn _merge(kittenmerge_hap) uniqmaster uniqusing tabulate(mresults)
      - if (!`mergevaristemp') {c -(}
      = if (!0) {c -(}
      - capture label list _merge
        {hline 75} begin label {hline}
        - version 10.0
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {c -(}
        = if (strpos("list", "val") > 0 ) {c -(}
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {c -(}
          local fix ", nofix"
          {c )-}
          gettoken var rest : anything
          while `"`rest'"' != "" {c -(}
          gettoken lab rest : rest
          local label "`lab'"
          {c )-}
          local vlist : list anything - lab
          if "`lab'" == "." {c -(}
          local lab ""
          {c )-}
          foreach var of varlist `vlist' {c -(}
          _label `val' `var' `lab' `fix'
          {c )-}
          {c )-}
        - else {c -(}
        - _label `macval(0)'
        = _label list _merge
          {c )-}
        {hline 77} end label {hline}
      - if (_rc) {c -(}
      - label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)" 4 "missing updated (4)" 5 "nonmissing conflict (5)"
        {hline 75} begin label {hline}
        - version 10.0
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {c -(}
        = if (strpos("define", "val") > 0 ) {c -(}
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {c -(}
          local fix ", nofix"
          {c )-}
          gettoken var rest : anything
          while `"`rest'"' != "" {c -(}
          gettoken lab rest : rest
          local label "`lab'"
          {c )-}
          local vlist : list anything - lab
          if "`lab'" == "." {c -(}
          local lab ""
          {c )-}
          foreach var of varlist `vlist' {c -(}
          _label `val' `var' `lab' `fix'
          {c )-}
          {c )-}
        - else {c -(}
        - _label `macval(0)'
        = _label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)" 4 "missing updated (4)" 5 "nonmissing conflict (5)"
        - {c )-}
        {hline 77} end label {hline}
      - {c )-}
      - label values `mergevar' _merge
      = label values kittenmerge_hap _merge
        {hline 75} begin label {hline}
        - version 10.0
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {c -(}
        = if (strpos("values", "val") > 0 ) {c -(}
        - gettoken val 0 : 0
        - syntax anything [, nofix]
        - if "`fix'" != "" {c -(}
        = if "" != "" {c -(}
          local fix ", nofix"
          {c )-}
        - gettoken var rest : anything
        - while `"`rest'"' != "" {c -(}
        = while `" _merge"' != "" {c -(}
        - gettoken lab rest : rest
        - local label "`lab'"
        = local label "_merge"
        - {c )-}
        - while `"`rest'"' != "" {c -(}
        = while `""' != "" {c -(}
          gettoken lab rest : rest
          local label "`lab'"
          {c )-}
        - local vlist : list anything - lab
        - if "`lab'" == "." {c -(}
        = if "_merge" == "." {c -(}
          local lab ""
          {c )-}
        - foreach var of varlist `vlist' {c -(}
        = foreach var of varlist kittenmerge_hap {c -(}
        - _label `val' `var' `lab' `fix'
        = _label values kittenmerge_hap _merge 
        - {c )-}
        - {c )-}
        - else {c -(}
          _label `macval(0)'
          {c )-}
        {hline 77} end label {hline}
      - {c )-}
      - if ("`assert'"!="") {c -(}
      = if (""!="") {c -(}
        if (_caller() < 13) {c -(}
        buildexpr expr : `mergevar' "`assert'"
        capture assert `expr'
        if (_rc) {c -(}
        error_assert `mergevar' "`assert'"
        {c )-}
        {c )-}
        else {c -(}
        capture checkmresults "`mresults'" "`assert'"
        if (_rc) {c -(}
        error_assert `mergevar' "`assert'"
        {c )-}
        {c )-}
        {c )-}
      - if ("`keep'"!="") {c -(}
      = if ("2 3"!="") {c -(}
      - buildexpr expr : `mergevar' "`keep'"
      = buildexpr expr : kittenmerge_hap "2 3"
        {hline 65} begin merge.buildexpr {hline}
        - args userexpr colon varname numbers
        - gettoken first numbers : numbers
        - local list `varname'==`first'
        = local list kittenmerge_hap==2
        - foreach el of local numbers {c -(}
        - local list `list' | `varname'==`el'
        = local list kittenmerge_hap==2 | kittenmerge_hap==3
        - {c )-}
        - c_local `userexpr' "(`list')"
        = c_local expr "(kittenmerge_hap==2 | kittenmerge_hap==3)"
        {hline 67} end merge.buildexpr {hline}
      - quietly keep if `expr'
      = quietly keep if (kittenmerge_hap==2 | kittenmerge_hap==3)
      - {c )-}
      - if ("`mtype'"=="1:1") {c -(}
      = if ("1:1"=="1:1") {c -(}
      - qui count if `mergevar'==2
      = qui count if kittenmerge_hap==2
      - if (r(N)==0) {c -(}
        sort `varlist'
        {c )-}
      - {c )-}
      - if (c(noisily) & "`report'"=="") {c -(}
      = if (c(noisily) & ""=="") {c -(}
        local isupdate = ("`replace'"!="" | "`update'"!="")
        present_table `isupdate' `mergevar' `mergevaristemp'
        {c )-}
      {hline 79} end merge {hline}
    - replace kittenmerge_`topic' = 0 if kittenmerge_`topic' != 3
    = replace kittenmerge_hap = 0 if kittenmerge_hap != 3
    - save `temp', replace
    = save /tmp/St48035.000001, replace
    - {c )-}
    - {c )-}
    - if "$sel_topics" != "basic" {c -(}
    = if "hap" != "basic" {c -(}
    - egen kittenkeep = rowtotal(kittenmerge_*)
      {hline 78} begin egen {hline}
      - version 6, missing
      - local cvers = _caller()
      - gettoken type 0 : 0, parse(" =(")
      - gettoken name 0 : 0, parse(" =(")
      - if `"`name'"'=="=" {c -(}
      = if `"="'=="=" {c -(}
      - local name `"`type'"'
      = local name `"kittenkeep"'
      - local type : set type
      - {c )-}
      - else {c -(}
        gettoken eqsign 0 : 0, parse(" =(")
        if `"`eqsign'"' != "=" {c -(}
        error 198
        {c )-}
        {c )-}
      - confirm new variable `name'
      = confirm new variable kittenkeep
      - gettoken fcn 0 : 0, parse(" =(")
      - gettoken args 0 : 0, parse(" ,") match(par)
      - if "`c(adoarchive)'"=="1" {c -(}
      = if ""=="1" {c -(}
        capture qui _stfilearchive find _g`fcn'.ado
        if _rc {c -(}
        di as error "unknown egen function `fcn'()"
        exit 133
        {c )-}
        {c )-}
      - else {c -(}
      - capture qui findfile _g`fcn'.ado
      = capture qui findfile _growtotal.ado
        {hline 72} begin findfile {hline}
        - version 8
        - gettoken fn 0 : 0, parse(" ,")
        - syntax [, ALL noDEScend PATH(string)]
        - if `"`path'"'=="" {c -(}
        = if `""'=="" {c -(}
        - local path `"`c(adopath)'"'
        = local path `"`"BASE"';`"SITE"';`"."';`"PERSONAL"';`"PLUS"';`"OLDPLACE"';`"modules/extract/core/addons/"'"'
        - {c )-}
        - local n 0
        - local subdir : adosubdir `"`fn'"'
        = local subdir : adosubdir `"_growtotal.ado"'
        - if `"`subdir'"' != "" {c -(}
        = if `"_"' != "" {c -(}
        - gettoken d path : path, parse(";")
        - while `"`d'"'!="" {c -(}
        = while `"BASE"'!="" {c -(}
        - if `"`d'"' != ";" {c -(}
        = if `"BASE"' != ";" {c -(}
        - local d : sysdir `"`d'"'
        = local d : sysdir `"BASE"'
        - local ffn `"`d'`fn'"'
        = local ffn `"/opt/stata13/ado/base/_growtotal.ado"'
        - capture confirm file `"`ffn'"'
        = capture confirm file `"/opt/stata13/ado/base/_growtotal.ado"'
        - if _rc==0 {c -(}
          di as txt `"`ffn'"'
          if "`all'"=="" {c -(}
          ret local fn `"`ffn'"'
          exit
          {c )-}
          if `n' {c -(}
          ret local fn `"`return(fn)' "`ffn'""'
          {c )-}
          else ret local fn `""`ffn'""'
          local n 1
          {c )-}
        - if "`descend'"=="" {c -(}
        = if ""=="" {c -(}
        - local ffn `"`d'`subdir'`c(dirsep)'`fn'"'
        = local ffn `"/opt/stata13/ado/base/_/_growtotal.ado"'
        - capture confirm file `"`ffn'"'
        = capture confirm file `"/opt/stata13/ado/base/_/_growtotal.ado"'
        - if _rc==0 {c -(}
        - di as txt `"`ffn'"'
        = di as txt `"/opt/stata13/ado/base/_/_growtotal.ado"'
        - if "`all'"=="" {c -(}
        = if ""=="" {c -(}
        - ret local fn `"`ffn'"'
        = ret local fn `"/opt/stata13/ado/base/_/_growtotal.ado"'
        - exit
        {hline 74} end findfile {hline}
      - if (`"`r(fn)'"' == "") {c -(}
      = if (`"/opt/stata13/ado/base/_/_growtotal.ado"' == "") {c -(}
        di as error "unknown egen function `fcn'()"
        exit 133
        {c )-}
      - {c )-}
      - if `"`par'"' != "(" {c -(}
      = if `"("' != "(" {c -(}
        exit 198
        {c )-}
      - if `"`args'"' == "_all" | `"`args'"' == "*" {c -(}
      = if `"kittenmerge_*"' == "_all" | `"kittenmerge_*"' == "*" {c -(}
        version 7.0, missing
        unab args : _all
        local args : subinstr local args "`_sortindex'" "", all word
        version 6.0, missing
        {c )-}
      - syntax [if] [in] [, *]
      - if _by() {c -(}
        local byopt "by(`_byvars')"
        local cma ","
        {c )-}
      - else if `"`options'"' != "" {c -(}
      = else if `""' != "" {c -(}
        local cma ","
        {c )-}
      - tempvar dummy
      - global EGEN_Varname `name'
      = global EGEN_Varname kittenkeep
      - version 7.0, missing
      - global EGEN_SVarname `_sortindex'
      = global EGEN_SVarname __000000
      - version 6.0, missing
      - if ("`fcn'" == "mode" | "`fcn'" == "concat") {c -(}
      = if ("rowtotal" == "mode" | "rowtotal" == "concat") {c -(}
        local vv : display "version " string(`cvers') ", missing:"
        {c )-}
      - capture noisily `vv' _g`fcn' `type' `dummy' = (`args') `if' `in' `cma' `byopt' `options'
      = capture noisily  _growtotal float __000001 = (kittenmerge_*)     
        {hline 70} begin _growtotal {hline}
        - version 6, missing
        - gettoken type 0 : 0
        - gettoken g 0 : 0
        - gettoken eqs 0 : 0
        - syntax varlist [if] [in] [, BY(string) Missing]
        - version 7.0, missing
        - local si $EGEN_SVarname
        = local si __000000
        - version 6.0, missing
        - local varlist : list varlist - si
        - if `"`by'"' != "" {c -(}
        = if `""' != "" {c -(}
          _egennoby rowtotal() `"`by'"'
          {c )-}
        - quietly {c -(}
        - tokenize `varlist'
        = tokenize kittenmerge_hap
        - if "`missing'" == "" {c -(}
        = if "" == "" {c -(}
        - gen `type' `g' = cond(`1'>=.,0,`1') `if' `in'
        = gen float __000001 = cond(kittenmerge_hap>=.,0,kittenmerge_hap)  
        - mac shift
        - while "`1'"!="" {c -(}
        = while ""!="" {c -(}
          replace `g'=`g'+cond(`1'>=.,0,`1') `if' `in'
          mac shift
          {c )-}
        - {c )-}
        - else {c -(}
          gen `type' `g' = cond(`1'>=.,.,`1') `if' `in'
          mac shift
          while "`1'"!="" {c -(}
          replace `g' = cond(`g'==., cond(`1'>=.,.,`1'), cond(`1'>=., `g', `g' + `1')) `if' `in'
          mac shift
          {c )-}
          {c )-}
        - {c )-}
        {hline 72} end _growtotal {hline}
      - global EGEN_SVarname
      - global EGEN_Varname
      - if _rc {c -(} exit _rc {c )-}
      - quietly count if missing(`dummy')
      = quietly count if missing(__000001)
      - if r(N) {c -(}
        local s = cond(r(N)>1,"s","")
        di in bl "(" r(N) " missing value`s' generated)"
        {c )-}
      - rename `dummy' `name'
      = rename __000001 kittenkeep
      {hline 80} end egen {hline}
    - keep if kittenkeep > 0
    - {c )-}
    - keep ubcov_id $vars
    = keep ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num
    - order ubcov_id $vars
    = order ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num
      {hline 77} begin order {hline}
      - version 11
      - if (_caller()<11) {c -(}
        _order `macval(0)'
        exit
        {c )-}
      - syntax varlist[, Before(varname) After(varname) first last SEQuential ALPHAbetic]
      - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'" == "" & "`alphabetic'" == "" & "`sequential'" == "") {c -(}
      = if (`""' == "" & `""' == "" & "" == "" & "" == "" & "" == "" & "" == "") {c -(}
      - _order `macval(0)'
      = _order ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num
      - exit
      {hline 79} end order {hline}
    - sort ubcov_id
    - {c )-}
    - else {c -(}
      gs_db, obj(`db')
      {c )-}
    {hline 79} end db_load {hline}
  - if !mi("`load'") import delimited using "`load'/`db'.csv", clear varnames(1) stringcols(_all) charset("utf-8")
  = if !mi("") import delimited using "/codebook.csv", clear varnames(1) stringcols(_all) charset("utf-8")
  - if !mi("`save'") export delimited using "`save'/`db'.csv", replace
  = if !mi("") export delimited using "/codebook.csv", replace
  - tostring *, replace
    {hline 76} begin tostring {hline}
    - version 8.0
    - syntax varlist, [Generate(string) replace] [force] [format(str) Usedisplayformat]
    - if "`generate'" != "" & "`replace'" != "" {c -(}
    = if "" != "" & "replace" != "" {c -(}
      di as err "{c -(}p{c )-}options generate and replace are mutually exclusive{c -(}p_end{c )-}"
      exit 198
      {c )-}
    - if "`generate'" == "" & "`replace'" == "" {c -(}
    = if "" == "" & "replace" == "" {c -(}
      di as err "{c -(}p{c )-}must specify either generate or replace option{c -(}p_end{c )-}"
      exit 198
      {c )-}
    - if "`generate'" != "" {c -(}
    = if "" != "" {c -(}
      local ct1: word count `varlist'
      local save "`varlist'"
      local 0 "`generate'"
      capture syntax newvarlist
      if _rc {c -(}
      di as err "generate(newvarlist) invalid"
      exit _rc
      {c )-}
      local generate "`varlist'"
      local varlist "`save'"
      local ct2: word count `generate'
      if `ct1' != `ct2' {c -(}
      di as err "{c -(}p{c )-}number of variables in varlist " "must equal number of variables in generate(newvarlist){c -(}p_end{c )-}"
      exit 198
      {c )-}
      {c )-}
    - if "`usedisplayformat'" != "" & "`format'" != "" {c -(}
    = if "" != "" & "" != "" {c -(}
      di as err "{c -(}p{c )-}must choose between usedisplayformat and format() options{c -(}p_end{c )-}"
      exit 198
      {c )-}
    - if "`format'" != "" {c -(}
    = if "" != "" {c -(}
      if index("`format'", "s") {c -(}
      di as err "use numeric format in format() option"
      exit 198
      {c )-}
      capture di `format' 12345.67890
      if _rc {c -(}
      di as err "format() option invalid"
      exit 198
      {c )-}
      local fmt "`format'"
      local format `", "`format'""'
      {c )-}
    - else {c -(}
    - local fmt "%12.0g"
    - local format `", "%12.0g""'
    - {c )-}
    - local u = "`usedisplayformat'" != ""
    = local u = "" != ""
    - if "`generate'" != "" {c -(}
    = if "" != "" {c -(}
      tokenize `generate'
      local i = 0
      foreach v of local varlist {c -(}
      local ++i
      capture confirm string variable `v'
      if _rc == 0 {c -(}
      di as txt "`v' already string; no " as res "generate"
      {c )-}
      else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "generate"
      {c )-}
      else {c -(}
      gen ``i'' = `temp'
      di as txt "``i'' generated as {c -(}res:`: type ``i'''{c )-}"
      _crcslbl ``i'' `v'
      move ``i'' `v'
      move `v' ``i''
      Charcopy `v' ``i''
      if `flag' & "`force'" != "" {c -(}
      di as txt "``i'' was forced to string; some loss of information"
      char ``i''[tostring] "forced to string; `fmt'"
      {c )-}
      else char ``i''[tostring] "converted to string"
      {c )-}
      drop `temp'
      {c )-}
      {c )-}
      {c )-}
    - else if "`replace'" != "" {c -(}
    = else if "replace" != "" {c -(}
    - foreach v of local varlist {c -(}
    - capture confirm string variable `v'
    = capture confirm string variable ubcov_id
    - if _rc == 0 {c -(}
      di as txt "`v' already string; no " as res "replace"
      {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
    - if `u' {c -(}
    = if 0 {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
    - tempvar temp
    - qui gen str `temp' = string(`v'`format')
    = qui gen str __000000 = string(ubcov_id, "%12.0g")
    - qui count if `v' != real(`temp')
    = qui count if ubcov_id != real(__000000)
    - local flag = r(N)
    - if `flag' & "`force'" == "" {c -(}
    = if 0 & "" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
    - else {c -(}
    - local oldtype : type `v'
    = local oldtype : type ubcov_id
    - char rename `v' `temp'
    = char rename ubcov_id __000000
    - move `temp' `v'
    = move __000000 ubcov_id
    - local vl: variable label `v'
    = local vl: variable label ubcov_id
    - drop `v'
    = drop ubcov_id
    - rename `temp' `v'
    = rename __000000 ubcov_id
    - label variable `v' `"`vl'"'
    = label variable ubcov_id `""'
      {hline 77} begin label {hline}
      - version 10.0
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("variable", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - _label `macval(0)'
      = _label variable ubcov_id `""'
      - {c )-}
      {hline 79} end label {hline}
    - di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
    = di as txt "ubcov_id was {c -(}res:int{c )-} now {c -(}res:str5{c )-}"
    - if `flag' & "`force'" != "" {c -(}
    = if 0 & "" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
    - else char `v'[tostring] "converted to string"
    = else char ubcov_id[tostring] "converted to string"
    - {c )-}
    - {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable survey_name
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "survey_name already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable nid
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "nid already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable ihme_loc_id
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "ihme_loc_id already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable year_start
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "year_start already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable year_end
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "year_end already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable survey_module
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "survey_module already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable file_path
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "file_path already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable smaller_site_unit
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "smaller_site_unit already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable reshape
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "reshape already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable reshape_stem
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "reshape_stem already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable reshape_keepid
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "reshape_keepid already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable subset
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "subset already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable delimiter
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "delimiter already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable strata
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "strata already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable psu
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "psu already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable pweight
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "pweight already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable hhweight
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "hhweight already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable geospatial_id
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "geospatial_id already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable hh_id
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "hh_id already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable line_id
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "line_id already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable sex
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "sex already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable sex_male
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "sex_male already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable sex_female
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "sex_female already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable age_categorical
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "age_categorical already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable age_categorical_type
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "age_categorical_type already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable age_categorical_parse
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "age_categorical_parse already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable age_year
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "age_year already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable age_year_missing
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "age_year_missing already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable age_month
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "age_month already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable age_month_missing
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "age_month_missing already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable birth_date
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "birth_date already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable birth_date_format
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "birth_date_format already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable birth_day
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "birth_day already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable birth_month
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "birth_month already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable birth_year
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "birth_year already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable int_date
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "int_date already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable int_date_format
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "int_date_format already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable int_day
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "int_day already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable int_month
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "int_month already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable int_year
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "int_year already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable year_adjust
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "year_adjust already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable month_adjust
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "month_adjust already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable urban
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "urban already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable urban_true
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "urban_true already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable urban_false
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "urban_false already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable admin_1
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "admin_1 already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable pweight_admin_1
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "pweight_admin_1 already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable admin_2
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "admin_2 already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable pweight_admin_2
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "pweight_admin_2 already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable admin_3
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "admin_3 already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable pweight_admin_3
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "pweight_admin_3 already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable admin_4
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "admin_4 already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable admin_5
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "admin_5 already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable latitude
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "latitude already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable longitude
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "longitude already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable hh_size
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "hh_size already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable cooking_fuel
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "cooking_fuel already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable cooking_type
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "cooking_type already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable cooking_type_chimney
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "cooking_type_chimney already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable cooking_location
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "cooking_location already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable heating_fuel
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "heating_fuel already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable heating_type
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "heating_type already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable heating_type_chimney
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "heating_type_chimney already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable lighting_fuel
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "lighting_fuel already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable cooking_fuel_multi
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "cooking_fuel_multi already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable cooking_fuel_multi_true
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "cooking_fuel_multi_true already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable cooking_fuel_multi_false
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "cooking_fuel_multi_false already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable electricity
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "electricity already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable electricity_true
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "electricity_true already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable electricity_false
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "electricity_false already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable housing_roof
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "housing_roof already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable housing_wall
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "housing_wall already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable housing_floor
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "housing_floor already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable housing_roof_num
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "housing_roof_num already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable housing_wall_num
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "housing_wall_num already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable housing_floor_num
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "housing_floor_num already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - {c )-}
    {hline 78} end tostring {hline}
  - inlist2, obj(topic_name) vals(`topics') str(vals)
  = inlist2, obj(topic_name) vals(basic design demographics geography hap) str(vals)
    {hline 77} begin inlist2 {hline}
    - syntax, obj(str) vals(str) [cond(str) str(str) string]
    - if !mi("`cond'") {c -(}
    = if !mi("") {c -(}
      if !inlist("`cond'", "&", "|") {c -(}
      STOP
      {c )-}
      local cond `cond'
      {c )-}
    - else {c -(}
    - local cond |
    - {c )-}
    - local i 1
    - local cmd 1==0
    - foreach val in `vals' {c -(}
    = foreach val in basic design demographics geography hap {c -(}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | "topic_name" == basic
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | "topic_name" == "basic"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | "topic_name" == design
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | "topic_name" == "design"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | "topic_name" == demographics
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | "topic_name" == "demographics"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | "topic_name" == geography
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | "topic_name" == "geography"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | "topic_name" == hap
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap" | "topic_name" == "hap"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - return local cmd "`cmd'"
    = return local cmd "1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap""
    {hline 79} end inlist2 {hline}
  - local ifcmd `r(cmd)'
  = local ifcmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap"
  - if "`db'" == "vars" {c -(}
  = if "codebook" == "vars" {c -(}
    keep if `ifcmd'
    global vars
    forvalues i = 1/`=_N' {c -(}
    global vars $vars `=var_name[`i']'
    {c )-}
    {c )-}
  - if "`db'" == "indicators" {c -(}
  = if "codebook" == "indicators" {c -(}
    keep if `ifcmd'
    global indicators
    forvalues i = 1/`=_N' {c -(}
    global indicators $indicators `=indicator_name[`i']'
    {c )-}
    {c )-}
  - ds
    {hline 82} begin ds {hline}
    - version 9
    - local version : di "version " string(_caller()) ":"
    - if (_caller() <= 4) {c -(}
      `version' describe, simple
      exit
      {c )-}
    - else {c -(}
    - ds_util `0'
    = ds_util 
      {hline 75} begin ds_util {hline}
      - version 8
      - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detail Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
      - if "`varlist'" == "" {c -(}
      = if "ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num" == "" {c -(}
        exit
        {c )-}
      - if !inrange(`indent',0,244) {c -(}
      = if !inrange(0,0,244) {c -(}
        di as err "indent() should be in the range 0..244"
        exit 198
        {c )-}
      - if !inrange(`varwidth',5,32) {c -(}
      = if !inrange(12,5,32) {c -(}
        di as err "varwidth() should be in the range 5..32"
        exit 198
        {c )-}
      - if !inrange(`skip',1,10) {c -(}
      = if !inrange(2,1,10) {c -(}
        di as err "skip() should be in the range 1..10"
        exit 198
        {c )-}
      - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
      = local nopts = (`""' != "") + (`""' != "") + ("" != "")
      - if `nopts' == 3 {c -(}
      = if 0 == 3 {c -(}
        di as err "may not combine options has(), not(), and not"
        exit 198
        {c )-}
      - else if `nopts' == 2 {c -(}
      = else if 0 == 2 {c -(}
        if (`"`has'"' == "") {c -(}
        di as err "may not combine options not() and not"
        exit 198
        {c )-}
        else if (`"`not'"' == "") {c -(}
        di as err "may not combine options has() and not"
        exit 198
        {c )-}
        else if (`"`not2'"' == "") {c -(}
        di as err "may not combine options has() and not()"
        exit 198
        {c )-}
        {c )-}
      - if `"`not'"' != "" {c -(}
      = if `""' != "" {c -(}
        local has `"`not'"'
        local opt "not"
        {c )-}
      - else if `"`has'"' != "" {c -(}
      = else if `""' != "" {c -(}
        local opt "has"
        {c )-}
      - local inse = "`insensitive'" != ""
      = local inse = "" != ""
      - if `"`has'"' != "" {c -(}
      = if `""' != "" {c -(}
        CheckHas `"`has'"' "`opt'" "`inse'"
        if "`what'" == "varl" | "`what'" == "vall" {c -(}
        VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
        {c )-}
        else if "`what'" == "f" {c -(}
        Format `"`which'"' "`varlist'" "`inse'"
        {c )-}
        else if "`what'" == "c" {c -(}
        Char `"`which'"' "`varlist'" "`inse'"
        {c )-}
        else if "`what'" == "t" {c -(}
        Type `"`which'"' "`varlist'"
        {c )-}
        if `"`not'"' != "" {c -(}
        local varlist : list varlist - vlist
        {c )-}
        else if `"`has'"' != "" {c -(}
        local varlist "`vlist'"
        {c )-}
        {c )-}
      - if `"`not2'"' != "" {c -(}
      = if `""' != "" {c -(}
        unab all : *
        local varlist : list all - varlist
        {c )-}
      - if "`varlist'" == "" {c -(}
      = if "ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num" == "" {c -(}
        exit
        {c )-}
      - if "`alpha'" != "" {c -(}
      = if "" != "" {c -(}
        local varlist : list sort varlist
        {c )-}
      - if "`detail'" != "" {c -(}
      = if "" != "" {c -(}
        describe `varlist'
        {c )-}
      - else {c -(}
      - local nvar : word count `varlist'
      = local nvar : word count ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num
      - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
      = local ncol = int((99 + 2) / (12 + 2))
      - local i 0
      - local vlist
      - foreach v of local varlist {c -(}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m"'
      - {c )-}
      - DisplayInCols txt `indent' `skip' 0 `vlist'
      = DisplayInCols txt 0 2 0  ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        {hline 59} begin ds_util.DisplayInCols {hline}
        - gettoken sty 0 : 0
        - gettoken indent 0 : 0
        - gettoken pad 0 : 0
        - gettoken wid 0 : 0
        - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
        = local indent = cond(0==. | 0<0, 0, 0)
        - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
        = local pad = cond(2==. | 2<1, 2, 2)
        - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
        = local wid = cond(0==. | 0<0, 0, 0)
        - local n : list sizeof 0
        - if `n'==0 {c -(}
        = if 77==0 {c -(}
          exit
          {c )-}
        - foreach x of local 0 {c -(}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(0, length(`"ubcov_id"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(8, length(`"survey_name"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(11, length(`"nid"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(11, length(`"ihme_loc_id"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(11, length(`"year_start"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(11, length(`"year_end"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(11, length(`"survey_mod~e"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"file_path"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"smaller_si~t"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"reshape"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"reshape_stem"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"reshape_ke~d"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"subset"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"delimiter"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"strata"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"psu"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"pweight"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"hhweight"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"geospatial~d"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"hh_id"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"line_id"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"sex"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"sex_male"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"sex_female"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"age_catego~l"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"age_categ~pe"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"age_categ~se"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"age_year"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"age_year_m~g"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"age_month"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"age_month_~g"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"birth_date"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"birth_date~t"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"birth_day"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"birth_month"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"birth_year"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"int_date"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"int_date_f~t"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"int_day"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"int_month"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"int_year"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"year_adjust"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"month_adjust"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"urban"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"urban_true"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"urban_false"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"admin_1"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"pweight_ad~1"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"admin_2"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"pweight_ad~2"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"admin_3"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"pweight_ad~3"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"admin_4"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"admin_5"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"latitude"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"longitude"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"hh_size"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"cooking_fuel"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"cooking_type"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"cooking_ty~y"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"cooking_lo~n"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"heating_fuel"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"heating_type"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"heating_ty~y"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"lighting_f~l"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"cooking_fu~i"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"cooking_f~ue"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"cooking_f~se"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"electricity"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"electrici~ue"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"electrici~se"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"housing_roof"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"housing_wall"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"housing_fl~r"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"housing_ro~m"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"housing_wa~m"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"housing_fl~m"'))
        - {c )-}
        - local wid = `wid' + `pad'
        = local wid = 12 + 2
        - local cols = int((`c(linesize)'+1-`indent')/`wid')
        = local cols = int((99+1-0)/14)
        - if `cols' < 2 {c -(}
        = if 7 < 2 {c -(}
          if `indent' {c -(}
          local col "_column(`=`indent'+1')"
          {c )-}
          foreach x of local 0 {c -(}
          di as `sty' `col' `"`x'"'
          {c )-}
          exit
          {c )-}
        - local lines = `n'/`cols'
        = local lines = 77/7
        - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        = local lines = int(cond(11>int(11), 11+1, 11))
        - forvalues i=1(1)`lines' {c -(}
        = forvalues i=1(1)11 {c -(}
        - local top = min((`cols')*`lines'+`i', `n')
        = local top = min((7)*11+1, 77)
        - local col = `indent' + 1
        = local col = 0 + 1
        - forvalues j=`i'(`lines')`top' {c -(}
        = forvalues j=1(11)77 {c -(}
        - local x : word `j' of `0'
        = local x : word 1 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(1) "ubcov_id" _c
        - local col = `col' + `wid'
        = local col = 1 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 12 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(15) "reshape_ke~d" _c
        - local col = `col' + `wid'
        = local col = 15 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 23 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(29) "sex_male" _c
        - local col = `col' + `wid'
        = local col = 29 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 34 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(43) "birth_day" _c
        - local col = `col' + `wid'
        = local col = 43 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 45 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(57) "urban_true" _c
        - local col = `col' + `wid'
        = local col = 57 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 56 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(71) "longitude" _c
        - local col = `col' + `wid'
        = local col = 71 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 67 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(85) "cooking_f~ue" _c
        - local col = `col' + `wid'
        = local col = 85 + 14
        - {c )-}
        - di as `sty'
        = di as txt
        - {c )-}
        - local top = min((`cols')*`lines'+`i', `n')
        = local top = min((7)*11+2, 77)
        - local col = `indent' + 1
        = local col = 0 + 1
        - forvalues j=`i'(`lines')`top' {c -(}
        = forvalues j=2(11)77 {c -(}
        - local x : word `j' of `0'
        = local x : word 2 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(1) "survey_name" _c
        - local col = `col' + `wid'
        = local col = 1 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 13 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(15) "subset" _c
        - local col = `col' + `wid'
        = local col = 15 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 24 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(29) "sex_female" _c
        - local col = `col' + `wid'
        = local col = 29 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 35 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(43) "birth_month" _c
        - local col = `col' + `wid'
        = local col = 43 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 46 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(57) "urban_false" _c
        - local col = `col' + `wid'
        = local col = 57 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 57 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(71) "hh_size" _c
        - local col = `col' + `wid'
        = local col = 71 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 68 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(85) "cooking_f~se" _c
        - local col = `col' + `wid'
        = local col = 85 + 14
        - {c )-}
        - di as `sty'
        = di as txt
        - {c )-}
        - local top = min((`cols')*`lines'+`i', `n')
        = local top = min((7)*11+3, 77)
        - local col = `indent' + 1
        = local col = 0 + 1
        - forvalues j=`i'(`lines')`top' {c -(}
        = forvalues j=3(11)77 {c -(}
        - local x : word `j' of `0'
        = local x : word 3 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(1) "nid" _c
        - local col = `col' + `wid'
        = local col = 1 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 14 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(15) "delimiter" _c
        - local col = `col' + `wid'
        = local col = 15 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 25 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(29) "age_catego~l" _c
        - local col = `col' + `wid'
        = local col = 29 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 36 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(43) "birth_year" _c
        - local col = `col' + `wid'
        = local col = 43 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 47 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(57) "admin_1" _c
        - local col = `col' + `wid'
        = local col = 57 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 58 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(71) "cooking_fuel" _c
        - local col = `col' + `wid'
        = local col = 71 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 69 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(85) "electricity" _c
        - local col = `col' + `wid'
        = local col = 85 + 14
        - {c )-}
        - di as `sty'
        = di as txt
        - {c )-}
        - local top = min((`cols')*`lines'+`i', `n')
        = local top = min((7)*11+4, 77)
        - local col = `indent' + 1
        = local col = 0 + 1
        - forvalues j=`i'(`lines')`top' {c -(}
        = forvalues j=4(11)77 {c -(}
        - local x : word `j' of `0'
        = local x : word 4 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(1) "ihme_loc_id" _c
        - local col = `col' + `wid'
        = local col = 1 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 15 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(15) "strata" _c
        - local col = `col' + `wid'
        = local col = 15 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 26 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(29) "age_categ~pe" _c
        - local col = `col' + `wid'
        = local col = 29 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 37 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(43) "int_date" _c
        - local col = `col' + `wid'
        = local col = 43 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 48 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(57) "pweight_ad~1" _c
        - local col = `col' + `wid'
        = local col = 57 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 59 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(71) "cooking_type" _c
        - local col = `col' + `wid'
        = local col = 71 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 70 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(85) "electrici~ue" _c
        - local col = `col' + `wid'
        = local col = 85 + 14
        - {c )-}
        - di as `sty'
        = di as txt
        - {c )-}
        - local top = min((`cols')*`lines'+`i', `n')
        = local top = min((7)*11+5, 77)
        - local col = `indent' + 1
        = local col = 0 + 1
        - forvalues j=`i'(`lines')`top' {c -(}
        = forvalues j=5(11)77 {c -(}
        - local x : word `j' of `0'
        = local x : word 5 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(1) "year_start" _c
        - local col = `col' + `wid'
        = local col = 1 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 16 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(15) "psu" _c
        - local col = `col' + `wid'
        = local col = 15 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 27 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(29) "age_categ~se" _c
        - local col = `col' + `wid'
        = local col = 29 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 38 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(43) "int_date_f~t" _c
        - local col = `col' + `wid'
        = local col = 43 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 49 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(57) "admin_2" _c
        - local col = `col' + `wid'
        = local col = 57 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 60 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(71) "cooking_ty~y" _c
        - local col = `col' + `wid'
        = local col = 71 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 71 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(85) "electrici~se" _c
        - local col = `col' + `wid'
        = local col = 85 + 14
        - {c )-}
        - di as `sty'
        = di as txt
        - {c )-}
        - local top = min((`cols')*`lines'+`i', `n')
        = local top = min((7)*11+6, 77)
        - local col = `indent' + 1
        = local col = 0 + 1
        - forvalues j=`i'(`lines')`top' {c -(}
        = forvalues j=6(11)77 {c -(}
        - local x : word `j' of `0'
        = local x : word 6 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(1) "year_end" _c
        - local col = `col' + `wid'
        = local col = 1 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 17 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(15) "pweight" _c
        - local col = `col' + `wid'
        = local col = 15 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 28 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(29) "age_year" _c
        - local col = `col' + `wid'
        = local col = 29 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 39 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(43) "int_day" _c
        - local col = `col' + `wid'
        = local col = 43 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 50 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(57) "pweight_ad~2" _c
        - local col = `col' + `wid'
        = local col = 57 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 61 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(71) "cooking_lo~n" _c
        - local col = `col' + `wid'
        = local col = 71 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 72 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(85) "housing_roof" _c
        - local col = `col' + `wid'
        = local col = 85 + 14
        - {c )-}
        - di as `sty'
        = di as txt
        - {c )-}
        - local top = min((`cols')*`lines'+`i', `n')
        = local top = min((7)*11+7, 77)
        - local col = `indent' + 1
        = local col = 0 + 1
        - forvalues j=`i'(`lines')`top' {c -(}
        = forvalues j=7(11)77 {c -(}
        - local x : word `j' of `0'
        = local x : word 7 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(1) "survey_mod~e" _c
        - local col = `col' + `wid'
        = local col = 1 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 18 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(15) "hhweight" _c
        - local col = `col' + `wid'
        = local col = 15 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 29 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(29) "age_year_m~g" _c
        - local col = `col' + `wid'
        = local col = 29 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 40 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(43) "int_month" _c
        - local col = `col' + `wid'
        = local col = 43 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 51 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(57) "admin_3" _c
        - local col = `col' + `wid'
        = local col = 57 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 62 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(71) "heating_fuel" _c
        - local col = `col' + `wid'
        = local col = 71 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 73 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(85) "housing_wall" _c
        - local col = `col' + `wid'
        = local col = 85 + 14
        - {c )-}
        - di as `sty'
        = di as txt
        - {c )-}
        - local top = min((`cols')*`lines'+`i', `n')
        = local top = min((7)*11+8, 77)
        - local col = `indent' + 1
        = local col = 0 + 1
        - forvalues j=`i'(`lines')`top' {c -(}
        = forvalues j=8(11)77 {c -(}
        - local x : word `j' of `0'
        = local x : word 8 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(1) "file_path" _c
        - local col = `col' + `wid'
        = local col = 1 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 19 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(15) "geospatial~d" _c
        - local col = `col' + `wid'
        = local col = 15 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 30 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(29) "age_month" _c
        - local col = `col' + `wid'
        = local col = 29 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 41 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(43) "int_year" _c
        - local col = `col' + `wid'
        = local col = 43 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 52 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(57) "pweight_ad~3" _c
        - local col = `col' + `wid'
        = local col = 57 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 63 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(71) "heating_type" _c
        - local col = `col' + `wid'
        = local col = 71 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 74 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(85) "housing_fl~r" _c
        - local col = `col' + `wid'
        = local col = 85 + 14
        - {c )-}
        - di as `sty'
        = di as txt
        - {c )-}
        - local top = min((`cols')*`lines'+`i', `n')
        = local top = min((7)*11+9, 77)
        - local col = `indent' + 1
        = local col = 0 + 1
        - forvalues j=`i'(`lines')`top' {c -(}
        = forvalues j=9(11)77 {c -(}
        - local x : word `j' of `0'
        = local x : word 9 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(1) "smaller_si~t" _c
        - local col = `col' + `wid'
        = local col = 1 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 20 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(15) "hh_id" _c
        - local col = `col' + `wid'
        = local col = 15 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 31 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(29) "age_month_~g" _c
        - local col = `col' + `wid'
        = local col = 29 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 42 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(43) "year_adjust" _c
        - local col = `col' + `wid'
        = local col = 43 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 53 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(57) "admin_4" _c
        - local col = `col' + `wid'
        = local col = 57 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 64 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(71) "heating_ty~y" _c
        - local col = `col' + `wid'
        = local col = 71 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 75 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(85) "housing_ro~m" _c
        - local col = `col' + `wid'
        = local col = 85 + 14
        - {c )-}
        - di as `sty'
        = di as txt
        - {c )-}
        - local top = min((`cols')*`lines'+`i', `n')
        = local top = min((7)*11+10, 77)
        - local col = `indent' + 1
        = local col = 0 + 1
        - forvalues j=`i'(`lines')`top' {c -(}
        = forvalues j=10(11)77 {c -(}
        - local x : word `j' of `0'
        = local x : word 10 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(1) "reshape" _c
        - local col = `col' + `wid'
        = local col = 1 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 21 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(15) "line_id" _c
        - local col = `col' + `wid'
        = local col = 15 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 32 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(29) "birth_date" _c
        - local col = `col' + `wid'
        = local col = 29 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 43 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(43) "month_adjust" _c
        - local col = `col' + `wid'
        = local col = 43 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 54 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(57) "admin_5" _c
        - local col = `col' + `wid'
        = local col = 57 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 65 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(71) "lighting_f~l" _c
        - local col = `col' + `wid'
        = local col = 71 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 76 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(85) "housing_wa~m" _c
        - local col = `col' + `wid'
        = local col = 85 + 14
        - {c )-}
        - di as `sty'
        = di as txt
        - {c )-}
        - local top = min((`cols')*`lines'+`i', `n')
        = local top = min((7)*11+11, 77)
        - local col = `indent' + 1
        = local col = 0 + 1
        - forvalues j=`i'(`lines')`top' {c -(}
        = forvalues j=11(11)77 {c -(}
        - local x : word `j' of `0'
        = local x : word 11 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(1) "reshape_stem" _c
        - local col = `col' + `wid'
        = local col = 1 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 22 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(15) "sex" _c
        - local col = `col' + `wid'
        = local col = 15 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 33 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(29) "birth_date~t" _c
        - local col = `col' + `wid'
        = local col = 29 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 44 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(43) "urban" _c
        - local col = `col' + `wid'
        = local col = 43 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 55 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(57) "latitude" _c
        - local col = `col' + `wid'
        = local col = 57 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 66 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(71) "cooking_fu~i" _c
        - local col = `col' + `wid'
        = local col = 71 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 77 of   ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path smaller_si~t reshape reshape_stem reshape_ke~d subset delimiter strata psu pweight hhweight geospatial~d hh_id line_id sex sex_male sex_female age_catego~l age_categ~pe age_categ~se age_year age_year_m~g age_month age_month_~g birth_date birth_date~t birth_day birth_month birth_year int_date int_date_f~t int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_ad~1 admin_2 pweight_ad~2 admin_3 pweight_ad~3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_ty~y cooking_lo~n heating_fuel heating_type heating_ty~y lighting_f~l cooking_fu~i cooking_f~ue cooking_f~se electricity electrici~ue electrici~se housing_roof housing_wall housing_fl~r housing_ro~m housing_wa~m housing_fl~m
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(85) "housing_fl~m" _c
        - local col = `col' + `wid'
        = local col = 85 + 14
        - {c )-}
        - di as `sty'
        = di as txt
        - {c )-}
        {hline 61} end ds_util.DisplayInCols {hline}
      - {c )-}
      - return local varlist `varlist'
      = return local varlist ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num
      {hline 77} end ds_util {hline}
    - exit
    {hline 84} end ds {hline}
  - global `db'_cols `r(varlist)'
  = global codebook_cols ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num
  - putmata `db' = (${c -(}`db'_cols{c )-}), replace
  = putmata codebook = (ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num), replace
    {hline 77} begin putmata {hline}
    - version 11
    - syntax [anything(name=putlist id="putlist" equalok)] [if] [in] [, OMITmissing REPLACE VIEW]
    - marksample touse, novarlist
    - if ("`in'"!="") {c -(}
    = if (""!="") {c -(}
      local in = substr("`in'", 3, .)
      {c )-}
    - mata: put("`touse'", "`in'")
    = mata: put("__000000", "")
      {hline 78} begin unab {hline}
      - version 6
      - gettoken user 0: 0, parse(" :")
      - gettoken colon 0: 0, parse(" :")
      - if `"`colon'"' != ":" {c -(} error 198 {c )-}
      = if `":"' != ":" {c -(} error 198 {c )-}
      - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 32767) NAME(string)]
      - c_local `user' `varlist'
      = c_local _parse_varlist ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num
      - local n : word count `varlist'
      = local n : word count ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num
      - if `n'>=`min' & `n'<=`max' {c -(} exit {c )-}
      = if 77>=1 & 77<=32767 {c -(} exit {c )-}
      {hline 80} end unab {hline}
    {hline 79} end putmata {hline}
  - {c )-}
  - if mi("`load'") db_load, db(`db')
  = if mi("") db_load, db(labels)
    {hline 77} begin db_load {hline}
    - syntax, db(str)
    - if "`db'" == "codebook" {c -(}
    = if "labels" == "codebook" {c -(}
      foreach topic in basic $sel_topics {c -(}
      gs_db, topic(`topic') obj("codebook")
      ds
      local cb_vars `r(varlist)'
      local vars ubcov_id $vars
      local drop_vars : list cb_vars - vars
      drop `drop_vars'
      destring ubcov_id, replace force
      drop if ubcov_id == .
      duplicates tag $key, gen(kittendupe)
      tab kittendupe if kittendupe > 0
      if `r(N)' > 0 {c -(}
      di as error "Duplicates in codebook (`topic'). Please address."
      br if kittendupe > 0
      STOP
      {c )-}
      drop kittendupe
      if "`topic'" == "basic" {c -(}
      keep if !mi(ubcov_id)
      tempfile temp
      save `temp', replace
      {c )-}
      else {c -(}
      drop nid survey_name ihme_loc_id year_start year_end survey_module file_path
      merge 1:1 ubcov_id using `temp', gen(kittenmerge_`topic') keep(2 3)
      replace kittenmerge_`topic' = 0 if kittenmerge_`topic' != 3
      save `temp', replace
      {c )-}
      {c )-}
      if "$sel_topics" != "basic" {c -(}
      egen kittenkeep = rowtotal(kittenmerge_*)
      keep if kittenkeep > 0
      {c )-}
      keep ubcov_id $vars
      order ubcov_id $vars
      sort ubcov_id
      {c )-}
    - else {c -(}
    - gs_db, obj(`db')
    = gs_db, obj(labels)
      {hline 77} begin gs_db {hline}
      - syntax, obj(str) [topic(str)]
      - local links = "1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY"
      - gs_load, key(`links')
      = gs_load, key(1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY)
        {hline 73} begin gs_load {hline}
        - syntax, key(str)
        - preserve
        - clear
          {hline 73} begin clear {hline}
          - if _caller() < 10 {c -(}
            _clear_9 `0'
            exit
            {c )-}
          - version 10
          - syntax [anything]
          - tokenize `anything'
          = tokenize 
          - if `"`2'"' != "" {c -(}
          = if `""' != "" {c -(}
            display as err "`2' not allowed"
            exit 198
            {c )-}
          - if "`1'"=="" {c -(}
          = if ""=="" {c -(}
          - drop _all
          - label drop _all
            {hline 71} begin label {hline}
            - version 10.0
            - gettoken val : 0
            - if (strpos("`val'", "val") > 0 ) {c -(}
            = if (strpos("drop", "val") > 0 ) {c -(}
              gettoken val 0 : 0
              syntax anything [, nofix]
              if "`fix'" != "" {c -(}
              local fix ", nofix"
              {c )-}
              gettoken var rest : anything
              while `"`rest'"' != "" {c -(}
              gettoken lab rest : rest
              local label "`lab'"
              {c )-}
              local vlist : list anything - lab
              if "`lab'" == "." {c -(}
              local lab ""
              {c )-}
              foreach var of varlist `vlist' {c -(}
              _label `val' `var' `lab' `fix'
              {c )-}
              {c )-}
            - else {c -(}
            - _label `macval(0)'
            = _label drop _all
            - {c )-}
            {hline 73} end label {hline}
          - {c )-}
          - else if "`1'"=="mata" {c -(}
          = else if ""=="mata" {c -(}
            mata: mata clear
            {c )-}
          - else if inlist("`1'", "results", "matrix") {c -(}
          = else if inlist("", "results", "matrix") {c -(}
            return clear
            clearreturn
            ereturn clear
            sreturn clear
            _return drop _all
            if ("`1'" == "matrix") {c -(}
            matrix drop _all
            _est drop _all
            {c )-}
            {c )-}
          - else if "`1'"=="programs" {c -(}
          = else if ""=="programs" {c -(}
            program drop _all
            {c )-}
          - else if "`1'"=="ado" {c -(}
          = else if ""=="ado" {c -(}
            program drop _allado
            {c )-}
          - else if "`1'"=="*" | "`1'"=="all" {c -(}
          = else if ""=="*" | ""=="all" {c -(}
            capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
            capture
            if (0`semmods') {c -(}
            display as err "-clear all- not allowed while an SEM Builder is open"
            exit 1
            {c )-}
            drop _all
            label drop _all
            matrix drop _all
            scalar drop _all
            constraint drop _all
            eq drop _all
            file close _all
            postutil clear
            _return drop _all
            discard
            program drop _all
            timer clear
            mata: mata clear
            {c )-}
          - else {c -(}
            display as err "`1' not allowed"
            exit 198
            {c )-}
          {hline 75} end clear {hline}
        - set obs 1
        - gen blah = 1
        - tempfile temp
        - save `temp', replace
        = save /tmp/St48035.000002, replace
        - restore
        - local link "https://docs.google.com/spreadsheets/d/`key'/export?format=csv"
        = local link "https://docs.google.com/spreadsheets/d/1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY/export?format=csv"
        - copy "`link'" `temp'
        = copy "https://docs.google.com/spreadsheets/d/1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY/export?format=csv" /tmp/St48035.000002
        - import delimited using `temp', clear varnames(1) stringcols(_all) charset("utf-8")
        = import delimited using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
          {hline 72} begin import {hline}
          - version 12
          - gettoken subcmd 0 : 0, parse(" ,")
          - if `"`subcmd'"' == "delim" {c -(}
          = if `"delimited"' == "delim" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimi" {c -(}
          = else if `"delimited"' == "delimi" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimit" {c -(}
          = else if `"delimited"' == "delimit" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimite" {c -(}
          = else if `"delimited"' == "delimite" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimited" {c -(}
          = else if `"delimited"' == "delimited" {c -(}
          - ImpDelim `0'
          = ImpDelim  using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
            {hline 61} begin import.ImpDelim {hline}
            - version 13
            - import_delimited `0'
            = import_delimited using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
              {hline 58} begin import_delimited {hline}
              - version 13
              - gettoken filename rest : 0, parse(" ,")
              - gettoken comma : rest, parse(" ,")
              - if (`"`filename'"' != "" & (trim(`"`comma'"') == "," | trim(`"`comma'"') == "")) {c -(}
              = if (`"using"' != "" & (trim(`"/tmp/St48035.000002"') == "," | trim(`"/tmp/St48035.000002"') == "")) {c -(}
                local 0 `"using `0'"'
                {c )-}
              - capture syntax using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
              - if _rc {c -(}
                syntax [anything(name=vlist id="vlist")] using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
                {c )-}
              - mata:import_delim_import_file()
                {hline 67} begin clear {hline}
                - if _caller() < 10 {c -(}
                  _clear_9 `0'
                  exit
                  {c )-}
                - version 10
                - syntax [anything]
                - tokenize `anything'
                = tokenize 
                - if `"`2'"' != "" {c -(}
                = if `""' != "" {c -(}
                  display as err "`2' not allowed"
                  exit 198
                  {c )-}
                - if "`1'"=="" {c -(}
                = if ""=="" {c -(}
                - drop _all
                - label drop _all
                  {hline 65} begin label {hline}
                  - version 10.0
                  - gettoken val : 0
                  - if (strpos("`val'", "val") > 0 ) {c -(}
                  = if (strpos("drop", "val") > 0 ) {c -(}
                    gettoken val 0 : 0
                    syntax anything [, nofix]
                    if "`fix'" != "" {c -(}
                    local fix ", nofix"
                    {c )-}
                    gettoken var rest : anything
                    while `"`rest'"' != "" {c -(}
                    gettoken lab rest : rest
                    local label "`lab'"
                    {c )-}
                    local vlist : list anything - lab
                    if "`lab'" == "." {c -(}
                    local lab ""
                    {c )-}
                    foreach var of varlist `vlist' {c -(}
                    _label `val' `var' `lab' `fix'
                    {c )-}
                    {c )-}
                  - else {c -(}
                  - _label `macval(0)'
                  = _label drop _all
                  - {c )-}
                  {hline 67} end label {hline}
                - {c )-}
                - else if "`1'"=="mata" {c -(}
                = else if ""=="mata" {c -(}
                  mata: mata clear
                  {c )-}
                - else if inlist("`1'", "results", "matrix") {c -(}
                = else if inlist("", "results", "matrix") {c -(}
                  return clear
                  clearreturn
                  ereturn clear
                  sreturn clear
                  _return drop _all
                  if ("`1'" == "matrix") {c -(}
                  matrix drop _all
                  _est drop _all
                  {c )-}
                  {c )-}
                - else if "`1'"=="programs" {c -(}
                = else if ""=="programs" {c -(}
                  program drop _all
                  {c )-}
                - else if "`1'"=="ado" {c -(}
                = else if ""=="ado" {c -(}
                  program drop _allado
                  {c )-}
                - else if "`1'"=="*" | "`1'"=="all" {c -(}
                = else if ""=="*" | ""=="all" {c -(}
                  capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
                  capture
                  if (0`semmods') {c -(}
                  display as err "-clear all- not allowed while an SEM Builder is open"
                  exit 1
                  {c )-}
                  drop _all
                  label drop _all
                  matrix drop _all
                  scalar drop _all
                  constraint drop _all
                  eq drop _all
                  file close _all
                  postutil clear
                  _return drop _all
                  discard
                  program drop _all
                  timer clear
                  mata: mata clear
                  {c )-}
                - else {c -(}
                  display as err "`1' not allowed"
                  exit 198
                  {c )-}
                {hline 69} end clear {hline}
              {hline 60} end import_delimited {hline}
            {hline 63} end import.ImpDelim {hline}
          - {c )-}
          - else if `"`subcmd'"' == "exc" {c -(}
          = else if `"delimited"' == "exc" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "exce" {c -(}
          = else if `"delimited"' == "exce" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "excel" {c -(}
          = else if `"delimited"' == "excel" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "hav" {c -(}
          = else if `"delimited"' == "hav" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "have" {c -(}
          = else if `"delimited"' == "have" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "haver" {c -(}
          = else if `"delimited"' == "haver" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "sasxport" {c -(}
          = else if `"delimited"' == "sasxport" {c -(}
            ImpSasxport `0'
            {c )-}
          - else {c -(}
            display as error `"import: unknown subcommand "`subcmd'""'
            exit 198
            {c )-}
          {hline 74} end import {hline}
        {hline 75} end gs_load {hline}
      - keep if obj =="`obj'"
      = keep if obj =="labels"
      - if !mi("`topic'") keep if topic == "`topic'"
      = if !mi("") keep if topic == ""
      - if _N == 0 {c -(}
        di as error "Codebook not listed in links (https://docs.google.com/spreadsheets/d/`links'/edit#gid=0)"
        STOP
        {c )-}
      - if _N > 1 {c -(}
        if !mi("`topic'") di as error "Duplicates in topic (`topic') and obj (`obj')"
        else di as error "Duplicates in obj (`obj')"
        STOP
        {c )-}
      - else {c -(}
      - local key `=key[1]'
      = local key 1bu4baOUUumjHOV3q2ya2SxzG9t6T8zVayiVAa07O3z4
      - gs_load, key(`key')
      = gs_load, key(1bu4baOUUumjHOV3q2ya2SxzG9t6T8zVayiVAa07O3z4)
        {hline 73} begin gs_load {hline}
        - syntax, key(str)
        - preserve
        - clear
          {hline 73} begin clear {hline}
          - if _caller() < 10 {c -(}
            _clear_9 `0'
            exit
            {c )-}
          - version 10
          - syntax [anything]
          - tokenize `anything'
          = tokenize 
          - if `"`2'"' != "" {c -(}
          = if `""' != "" {c -(}
            display as err "`2' not allowed"
            exit 198
            {c )-}
          - if "`1'"=="" {c -(}
          = if ""=="" {c -(}
          - drop _all
          - label drop _all
            {hline 71} begin label {hline}
            - version 10.0
            - gettoken val : 0
            - if (strpos("`val'", "val") > 0 ) {c -(}
            = if (strpos("drop", "val") > 0 ) {c -(}
              gettoken val 0 : 0
              syntax anything [, nofix]
              if "`fix'" != "" {c -(}
              local fix ", nofix"
              {c )-}
              gettoken var rest : anything
              while `"`rest'"' != "" {c -(}
              gettoken lab rest : rest
              local label "`lab'"
              {c )-}
              local vlist : list anything - lab
              if "`lab'" == "." {c -(}
              local lab ""
              {c )-}
              foreach var of varlist `vlist' {c -(}
              _label `val' `var' `lab' `fix'
              {c )-}
              {c )-}
            - else {c -(}
            - _label `macval(0)'
            = _label drop _all
            - {c )-}
            {hline 73} end label {hline}
          - {c )-}
          - else if "`1'"=="mata" {c -(}
          = else if ""=="mata" {c -(}
            mata: mata clear
            {c )-}
          - else if inlist("`1'", "results", "matrix") {c -(}
          = else if inlist("", "results", "matrix") {c -(}
            return clear
            clearreturn
            ereturn clear
            sreturn clear
            _return drop _all
            if ("`1'" == "matrix") {c -(}
            matrix drop _all
            _est drop _all
            {c )-}
            {c )-}
          - else if "`1'"=="programs" {c -(}
          = else if ""=="programs" {c -(}
            program drop _all
            {c )-}
          - else if "`1'"=="ado" {c -(}
          = else if ""=="ado" {c -(}
            program drop _allado
            {c )-}
          - else if "`1'"=="*" | "`1'"=="all" {c -(}
          = else if ""=="*" | ""=="all" {c -(}
            capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
            capture
            if (0`semmods') {c -(}
            display as err "-clear all- not allowed while an SEM Builder is open"
            exit 1
            {c )-}
            drop _all
            label drop _all
            matrix drop _all
            scalar drop _all
            constraint drop _all
            eq drop _all
            file close _all
            postutil clear
            _return drop _all
            discard
            program drop _all
            timer clear
            mata: mata clear
            {c )-}
          - else {c -(}
            display as err "`1' not allowed"
            exit 198
            {c )-}
          {hline 75} end clear {hline}
        - set obs 1
        - gen blah = 1
        - tempfile temp
        - save `temp', replace
        = save /tmp/St48035.000002, replace
        - restore
        - local link "https://docs.google.com/spreadsheets/d/`key'/export?format=csv"
        = local link "https://docs.google.com/spreadsheets/d/1bu4baOUUumjHOV3q2ya2SxzG9t6T8zVayiVAa07O3z4/export?format=csv"
        - copy "`link'" `temp'
        = copy "https://docs.google.com/spreadsheets/d/1bu4baOUUumjHOV3q2ya2SxzG9t6T8zVayiVAa07O3z4/export?format=csv" /tmp/St48035.000002
        - import delimited using `temp', clear varnames(1) stringcols(_all) charset("utf-8")
        = import delimited using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
          {hline 72} begin import {hline}
          - version 12
          - gettoken subcmd 0 : 0, parse(" ,")
          - if `"`subcmd'"' == "delim" {c -(}
          = if `"delimited"' == "delim" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimi" {c -(}
          = else if `"delimited"' == "delimi" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimit" {c -(}
          = else if `"delimited"' == "delimit" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimite" {c -(}
          = else if `"delimited"' == "delimite" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimited" {c -(}
          = else if `"delimited"' == "delimited" {c -(}
          - ImpDelim `0'
          = ImpDelim  using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
            {hline 61} begin import.ImpDelim {hline}
            - version 13
            - import_delimited `0'
            = import_delimited using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
              {hline 58} begin import_delimited {hline}
              - version 13
              - gettoken filename rest : 0, parse(" ,")
              - gettoken comma : rest, parse(" ,")
              - if (`"`filename'"' != "" & (trim(`"`comma'"') == "," | trim(`"`comma'"') == "")) {c -(}
              = if (`"using"' != "" & (trim(`"/tmp/St48035.000002"') == "," | trim(`"/tmp/St48035.000002"') == "")) {c -(}
                local 0 `"using `0'"'
                {c )-}
              - capture syntax using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
              - if _rc {c -(}
                syntax [anything(name=vlist id="vlist")] using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
                {c )-}
              - mata:import_delim_import_file()
                {hline 67} begin clear {hline}
                - if _caller() < 10 {c -(}
                  _clear_9 `0'
                  exit
                  {c )-}
                - version 10
                - syntax [anything]
                - tokenize `anything'
                = tokenize 
                - if `"`2'"' != "" {c -(}
                = if `""' != "" {c -(}
                  display as err "`2' not allowed"
                  exit 198
                  {c )-}
                - if "`1'"=="" {c -(}
                = if ""=="" {c -(}
                - drop _all
                - label drop _all
                  {hline 65} begin label {hline}
                  - version 10.0
                  - gettoken val : 0
                  - if (strpos("`val'", "val") > 0 ) {c -(}
                  = if (strpos("drop", "val") > 0 ) {c -(}
                    gettoken val 0 : 0
                    syntax anything [, nofix]
                    if "`fix'" != "" {c -(}
                    local fix ", nofix"
                    {c )-}
                    gettoken var rest : anything
                    while `"`rest'"' != "" {c -(}
                    gettoken lab rest : rest
                    local label "`lab'"
                    {c )-}
                    local vlist : list anything - lab
                    if "`lab'" == "." {c -(}
                    local lab ""
                    {c )-}
                    foreach var of varlist `vlist' {c -(}
                    _label `val' `var' `lab' `fix'
                    {c )-}
                    {c )-}
                  - else {c -(}
                  - _label `macval(0)'
                  = _label drop _all
                  - {c )-}
                  {hline 67} end label {hline}
                - {c )-}
                - else if "`1'"=="mata" {c -(}
                = else if ""=="mata" {c -(}
                  mata: mata clear
                  {c )-}
                - else if inlist("`1'", "results", "matrix") {c -(}
                = else if inlist("", "results", "matrix") {c -(}
                  return clear
                  clearreturn
                  ereturn clear
                  sreturn clear
                  _return drop _all
                  if ("`1'" == "matrix") {c -(}
                  matrix drop _all
                  _est drop _all
                  {c )-}
                  {c )-}
                - else if "`1'"=="programs" {c -(}
                = else if ""=="programs" {c -(}
                  program drop _all
                  {c )-}
                - else if "`1'"=="ado" {c -(}
                = else if ""=="ado" {c -(}
                  program drop _allado
                  {c )-}
                - else if "`1'"=="*" | "`1'"=="all" {c -(}
                = else if ""=="*" | ""=="all" {c -(}
                  capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
                  capture
                  if (0`semmods') {c -(}
                  display as err "-clear all- not allowed while an SEM Builder is open"
                  exit 1
                  {c )-}
                  drop _all
                  label drop _all
                  matrix drop _all
                  scalar drop _all
                  constraint drop _all
                  eq drop _all
                  file close _all
                  postutil clear
                  _return drop _all
                  discard
                  program drop _all
                  timer clear
                  mata: mata clear
                  {c )-}
                - else {c -(}
                  display as err "`1' not allowed"
                  exit 198
                  {c )-}
                {hline 69} end clear {hline}
              {hline 60} end import_delimited {hline}
            {hline 63} end import.ImpDelim {hline}
          - {c )-}
          - else if `"`subcmd'"' == "exc" {c -(}
          = else if `"delimited"' == "exc" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "exce" {c -(}
          = else if `"delimited"' == "exce" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "excel" {c -(}
          = else if `"delimited"' == "excel" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "hav" {c -(}
          = else if `"delimited"' == "hav" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "have" {c -(}
          = else if `"delimited"' == "have" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "haver" {c -(}
          = else if `"delimited"' == "haver" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "sasxport" {c -(}
          = else if `"delimited"' == "sasxport" {c -(}
            ImpSasxport `0'
            {c )-}
          - else {c -(}
            display as error `"import: unknown subcommand "`subcmd'""'
            exit 198
            {c )-}
          {hline 74} end import {hline}
        {hline 75} end gs_load {hline}
      - {c )-}
      {hline 79} end gs_db {hline}
    - {c )-}
    {hline 79} end db_load {hline}
  - if !mi("`load'") import delimited using "`load'/`db'.csv", clear varnames(1) stringcols(_all) charset("utf-8")
  = if !mi("") import delimited using "/labels.csv", clear varnames(1) stringcols(_all) charset("utf-8")
  - if !mi("`save'") export delimited using "`save'/`db'.csv", replace
  = if !mi("") export delimited using "/labels.csv", replace
  - tostring *, replace
    {hline 76} begin tostring {hline}
    - version 8.0
    - syntax varlist, [Generate(string) replace] [force] [format(str) Usedisplayformat]
    - if "`generate'" != "" & "`replace'" != "" {c -(}
    = if "" != "" & "replace" != "" {c -(}
      di as err "{c -(}p{c )-}options generate and replace are mutually exclusive{c -(}p_end{c )-}"
      exit 198
      {c )-}
    - if "`generate'" == "" & "`replace'" == "" {c -(}
    = if "" == "" & "replace" == "" {c -(}
      di as err "{c -(}p{c )-}must specify either generate or replace option{c -(}p_end{c )-}"
      exit 198
      {c )-}
    - if "`generate'" != "" {c -(}
    = if "" != "" {c -(}
      local ct1: word count `varlist'
      local save "`varlist'"
      local 0 "`generate'"
      capture syntax newvarlist
      if _rc {c -(}
      di as err "generate(newvarlist) invalid"
      exit _rc
      {c )-}
      local generate "`varlist'"
      local varlist "`save'"
      local ct2: word count `generate'
      if `ct1' != `ct2' {c -(}
      di as err "{c -(}p{c )-}number of variables in varlist " "must equal number of variables in generate(newvarlist){c -(}p_end{c )-}"
      exit 198
      {c )-}
      {c )-}
    - if "`usedisplayformat'" != "" & "`format'" != "" {c -(}
    = if "" != "" & "" != "" {c -(}
      di as err "{c -(}p{c )-}must choose between usedisplayformat and format() options{c -(}p_end{c )-}"
      exit 198
      {c )-}
    - if "`format'" != "" {c -(}
    = if "" != "" {c -(}
      if index("`format'", "s") {c -(}
      di as err "use numeric format in format() option"
      exit 198
      {c )-}
      capture di `format' 12345.67890
      if _rc {c -(}
      di as err "format() option invalid"
      exit 198
      {c )-}
      local fmt "`format'"
      local format `", "`format'""'
      {c )-}
    - else {c -(}
    - local fmt "%12.0g"
    - local format `", "%12.0g""'
    - {c )-}
    - local u = "`usedisplayformat'" != ""
    = local u = "" != ""
    - if "`generate'" != "" {c -(}
    = if "" != "" {c -(}
      tokenize `generate'
      local i = 0
      foreach v of local varlist {c -(}
      local ++i
      capture confirm string variable `v'
      if _rc == 0 {c -(}
      di as txt "`v' already string; no " as res "generate"
      {c )-}
      else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "generate"
      {c )-}
      else {c -(}
      gen ``i'' = `temp'
      di as txt "``i'' generated as {c -(}res:`: type ``i'''{c )-}"
      _crcslbl ``i'' `v'
      move ``i'' `v'
      move `v' ``i''
      Charcopy `v' ``i''
      if `flag' & "`force'" != "" {c -(}
      di as txt "``i'' was forced to string; some loss of information"
      char ``i''[tostring] "forced to string; `fmt'"
      {c )-}
      else char ``i''[tostring] "converted to string"
      {c )-}
      drop `temp'
      {c )-}
      {c )-}
      {c )-}
    - else if "`replace'" != "" {c -(}
    = else if "replace" != "" {c -(}
    - foreach v of local varlist {c -(}
    - capture confirm string variable `v'
    = capture confirm string variable user
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "user already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable file_path
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "file_path already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable variable
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "variable already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable variable_label
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "variable_label already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable value_num
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "value_num already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable value_str
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "value_str already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable v7
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "v7 already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable v8
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "v8 already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable v9
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "v9 already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable v10
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "v10 already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable v11
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "v11 already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable v12
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "v12 already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - {c )-}
    {hline 78} end tostring {hline}
  - inlist2, obj(topic_name) vals(`topics') str(vals)
  = inlist2, obj(topic_name) vals(basic design demographics geography hap) str(vals)
    {hline 77} begin inlist2 {hline}
    - syntax, obj(str) vals(str) [cond(str) str(str) string]
    - if !mi("`cond'") {c -(}
    = if !mi("") {c -(}
      if !inlist("`cond'", "&", "|") {c -(}
      STOP
      {c )-}
      local cond `cond'
      {c )-}
    - else {c -(}
    - local cond |
    - {c )-}
    - local i 1
    - local cmd 1==0
    - foreach val in `vals' {c -(}
    = foreach val in basic design demographics geography hap {c -(}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | "topic_name" == basic
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | "topic_name" == "basic"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | "topic_name" == design
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | "topic_name" == "design"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | "topic_name" == demographics
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | "topic_name" == "demographics"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | "topic_name" == geography
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | "topic_name" == "geography"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | "topic_name" == hap
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap" | "topic_name" == "hap"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - return local cmd "`cmd'"
    = return local cmd "1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap""
    {hline 79} end inlist2 {hline}
  - local ifcmd `r(cmd)'
  = local ifcmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap"
  - if "`db'" == "vars" {c -(}
  = if "labels" == "vars" {c -(}
    keep if `ifcmd'
    global vars
    forvalues i = 1/`=_N' {c -(}
    global vars $vars `=var_name[`i']'
    {c )-}
    {c )-}
  - if "`db'" == "indicators" {c -(}
  = if "labels" == "indicators" {c -(}
    keep if `ifcmd'
    global indicators
    forvalues i = 1/`=_N' {c -(}
    global indicators $indicators `=indicator_name[`i']'
    {c )-}
    {c )-}
  - ds
    {hline 82} begin ds {hline}
    - version 9
    - local version : di "version " string(_caller()) ":"
    - if (_caller() <= 4) {c -(}
      `version' describe, simple
      exit
      {c )-}
    - else {c -(}
    - ds_util `0'
    = ds_util 
      {hline 75} begin ds_util {hline}
      - version 8
      - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detail Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
      - if "`varlist'" == "" {c -(}
      = if "user file_path variable variable_label value_num value_str v7 v8 v9 v10 v11 v12" == "" {c -(}
        exit
        {c )-}
      - if !inrange(`indent',0,244) {c -(}
      = if !inrange(0,0,244) {c -(}
        di as err "indent() should be in the range 0..244"
        exit 198
        {c )-}
      - if !inrange(`varwidth',5,32) {c -(}
      = if !inrange(12,5,32) {c -(}
        di as err "varwidth() should be in the range 5..32"
        exit 198
        {c )-}
      - if !inrange(`skip',1,10) {c -(}
      = if !inrange(2,1,10) {c -(}
        di as err "skip() should be in the range 1..10"
        exit 198
        {c )-}
      - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
      = local nopts = (`""' != "") + (`""' != "") + ("" != "")
      - if `nopts' == 3 {c -(}
      = if 0 == 3 {c -(}
        di as err "may not combine options has(), not(), and not"
        exit 198
        {c )-}
      - else if `nopts' == 2 {c -(}
      = else if 0 == 2 {c -(}
        if (`"`has'"' == "") {c -(}
        di as err "may not combine options not() and not"
        exit 198
        {c )-}
        else if (`"`not'"' == "") {c -(}
        di as err "may not combine options has() and not"
        exit 198
        {c )-}
        else if (`"`not2'"' == "") {c -(}
        di as err "may not combine options has() and not()"
        exit 198
        {c )-}
        {c )-}
      - if `"`not'"' != "" {c -(}
      = if `""' != "" {c -(}
        local has `"`not'"'
        local opt "not"
        {c )-}
      - else if `"`has'"' != "" {c -(}
      = else if `""' != "" {c -(}
        local opt "has"
        {c )-}
      - local inse = "`insensitive'" != ""
      = local inse = "" != ""
      - if `"`has'"' != "" {c -(}
      = if `""' != "" {c -(}
        CheckHas `"`has'"' "`opt'" "`inse'"
        if "`what'" == "varl" | "`what'" == "vall" {c -(}
        VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
        {c )-}
        else if "`what'" == "f" {c -(}
        Format `"`which'"' "`varlist'" "`inse'"
        {c )-}
        else if "`what'" == "c" {c -(}
        Char `"`which'"' "`varlist'" "`inse'"
        {c )-}
        else if "`what'" == "t" {c -(}
        Type `"`which'"' "`varlist'"
        {c )-}
        if `"`not'"' != "" {c -(}
        local varlist : list varlist - vlist
        {c )-}
        else if `"`has'"' != "" {c -(}
        local varlist "`vlist'"
        {c )-}
        {c )-}
      - if `"`not2'"' != "" {c -(}
      = if `""' != "" {c -(}
        unab all : *
        local varlist : list all - varlist
        {c )-}
      - if "`varlist'" == "" {c -(}
      = if "user file_path variable variable_label value_num value_str v7 v8 v9 v10 v11 v12" == "" {c -(}
        exit
        {c )-}
      - if "`alpha'" != "" {c -(}
      = if "" != "" {c -(}
        local varlist : list sort varlist
        {c )-}
      - if "`detail'" != "" {c -(}
      = if "" != "" {c -(}
        describe `varlist'
        {c )-}
      - else {c -(}
      - local nvar : word count `varlist'
      = local nvar : word count user file_path variable variable_label value_num value_str v7 v8 v9 v10 v11 v12
      - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
      = local ncol = int((99 + 2) / (12 + 2))
      - local i 0
      - local vlist
      - foreach v of local varlist {c -(}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user file_path"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user file_path variable"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user file_path variable variable_l~l"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user file_path variable variable_l~l value_num"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user file_path variable variable_l~l value_num value_str"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user file_path variable variable_l~l value_num value_str v7"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user file_path variable variable_l~l value_num value_str v7 v8"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user file_path variable variable_l~l value_num value_str v7 v8 v9"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user file_path variable variable_l~l value_num value_str v7 v8 v9 v10"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user file_path variable variable_l~l value_num value_str v7 v8 v9 v10 v11"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user file_path variable variable_l~l value_num value_str v7 v8 v9 v10 v11 v12"'
      - {c )-}
      - DisplayInCols txt `indent' `skip' 0 `vlist'
      = DisplayInCols txt 0 2 0  user file_path variable variable_l~l value_num value_str v7 v8 v9 v10 v11 v12
        {hline 59} begin ds_util.DisplayInCols {hline}
        - gettoken sty 0 : 0
        - gettoken indent 0 : 0
        - gettoken pad 0 : 0
        - gettoken wid 0 : 0
        - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
        = local indent = cond(0==. | 0<0, 0, 0)
        - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
        = local pad = cond(2==. | 2<1, 2, 2)
        - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
        = local wid = cond(0==. | 0<0, 0, 0)
        - local n : list sizeof 0
        - if `n'==0 {c -(}
        = if 12==0 {c -(}
          exit
          {c )-}
        - foreach x of local 0 {c -(}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(0, length(`"user"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(4, length(`"file_path"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(9, length(`"variable"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(9, length(`"variable_l~l"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"value_num"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"value_str"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"v7"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"v8"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"v9"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"v10"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"v11"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"v12"'))
        - {c )-}
        - local wid = `wid' + `pad'
        = local wid = 12 + 2
        - local cols = int((`c(linesize)'+1-`indent')/`wid')
        = local cols = int((99+1-0)/14)
        - if `cols' < 2 {c -(}
        = if 7 < 2 {c -(}
          if `indent' {c -(}
          local col "_column(`=`indent'+1')"
          {c )-}
          foreach x of local 0 {c -(}
          di as `sty' `col' `"`x'"'
          {c )-}
          exit
          {c )-}
        - local lines = `n'/`cols'
        = local lines = 12/7
        - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        = local lines = int(cond(1.714285714285714>int(1.714285714285714), 1.714285714285714+1, 1.714285714285714))
        - forvalues i=1(1)`lines' {c -(}
        = forvalues i=1(1)2 {c -(}
        - local top = min((`cols')*`lines'+`i', `n')
        = local top = min((7)*2+1, 12)
        - local col = `indent' + 1
        = local col = 0 + 1
        - forvalues j=`i'(`lines')`top' {c -(}
        = forvalues j=1(2)12 {c -(}
        - local x : word `j' of `0'
        = local x : word 1 of   user file_path variable variable_l~l value_num value_str v7 v8 v9 v10 v11 v12
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(1) "user" _c
        - local col = `col' + `wid'
        = local col = 1 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 3 of   user file_path variable variable_l~l value_num value_str v7 v8 v9 v10 v11 v12
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(15) "variable" _c
        - local col = `col' + `wid'
        = local col = 15 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 5 of   user file_path variable variable_l~l value_num value_str v7 v8 v9 v10 v11 v12
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(29) "value_num" _c
        - local col = `col' + `wid'
        = local col = 29 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 7 of   user file_path variable variable_l~l value_num value_str v7 v8 v9 v10 v11 v12
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(43) "v7" _c
        - local col = `col' + `wid'
        = local col = 43 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 9 of   user file_path variable variable_l~l value_num value_str v7 v8 v9 v10 v11 v12
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(57) "v9" _c
        - local col = `col' + `wid'
        = local col = 57 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 11 of   user file_path variable variable_l~l value_num value_str v7 v8 v9 v10 v11 v12
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(71) "v11" _c
        - local col = `col' + `wid'
        = local col = 71 + 14
        - {c )-}
        - di as `sty'
        = di as txt
        - {c )-}
        - local top = min((`cols')*`lines'+`i', `n')
        = local top = min((7)*2+2, 12)
        - local col = `indent' + 1
        = local col = 0 + 1
        - forvalues j=`i'(`lines')`top' {c -(}
        = forvalues j=2(2)12 {c -(}
        - local x : word `j' of `0'
        = local x : word 2 of   user file_path variable variable_l~l value_num value_str v7 v8 v9 v10 v11 v12
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(1) "file_path" _c
        - local col = `col' + `wid'
        = local col = 1 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 4 of   user file_path variable variable_l~l value_num value_str v7 v8 v9 v10 v11 v12
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(15) "variable_l~l" _c
        - local col = `col' + `wid'
        = local col = 15 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 6 of   user file_path variable variable_l~l value_num value_str v7 v8 v9 v10 v11 v12
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(29) "value_str" _c
        - local col = `col' + `wid'
        = local col = 29 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 8 of   user file_path variable variable_l~l value_num value_str v7 v8 v9 v10 v11 v12
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(43) "v8" _c
        - local col = `col' + `wid'
        = local col = 43 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 10 of   user file_path variable variable_l~l value_num value_str v7 v8 v9 v10 v11 v12
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(57) "v10" _c
        - local col = `col' + `wid'
        = local col = 57 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 12 of   user file_path variable variable_l~l value_num value_str v7 v8 v9 v10 v11 v12
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(71) "v12" _c
        - local col = `col' + `wid'
        = local col = 71 + 14
        - {c )-}
        - di as `sty'
        = di as txt
        - {c )-}
        {hline 61} end ds_util.DisplayInCols {hline}
      - {c )-}
      - return local varlist `varlist'
      = return local varlist user file_path variable variable_label value_num value_str v7 v8 v9 v10 v11 v12
      {hline 77} end ds_util {hline}
    - exit
    {hline 84} end ds {hline}
  - global `db'_cols `r(varlist)'
  = global labels_cols user file_path variable variable_label value_num value_str v7 v8 v9 v10 v11 v12
  - putmata `db' = (${c -(}`db'_cols{c )-}), replace
  = putmata labels = (user file_path variable variable_label value_num value_str v7 v8 v9 v10 v11 v12), replace
    {hline 77} begin putmata {hline}
    - version 11
    - syntax [anything(name=putlist id="putlist" equalok)] [if] [in] [, OMITmissing REPLACE VIEW]
    - marksample touse, novarlist
    - if ("`in'"!="") {c -(}
    = if (""!="") {c -(}
      local in = substr("`in'", 3, .)
      {c )-}
    - mata: put("`touse'", "`in'")
    = mata: put("__000000", "")
      {hline 78} begin unab {hline}
      - version 6
      - gettoken user 0: 0, parse(" :")
      - gettoken colon 0: 0, parse(" :")
      - if `"`colon'"' != ":" {c -(} error 198 {c )-}
      = if `":"' != ":" {c -(} error 198 {c )-}
      - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 32767) NAME(string)]
      - c_local `user' `varlist'
      = c_local _parse_varlist user file_path variable variable_label value_num value_str v7 v8 v9 v10 v11 v12
      - local n : word count `varlist'
      = local n : word count user file_path variable variable_label value_num value_str v7 v8 v9 v10 v11 v12
      - if `n'>=`min' & `n'<=`max' {c -(} exit {c )-}
      = if 12>=1 & 12<=32767 {c -(} exit {c )-}
      {hline 80} end unab {hline}
    {hline 79} end putmata {hline}
  - {c )-}
  - if mi("`load'") db_load, db(`db')
  = if mi("") db_load, db(merges)
    {hline 77} begin db_load {hline}
    - syntax, db(str)
    - if "`db'" == "codebook" {c -(}
    = if "merges" == "codebook" {c -(}
      foreach topic in basic $sel_topics {c -(}
      gs_db, topic(`topic') obj("codebook")
      ds
      local cb_vars `r(varlist)'
      local vars ubcov_id $vars
      local drop_vars : list cb_vars - vars
      drop `drop_vars'
      destring ubcov_id, replace force
      drop if ubcov_id == .
      duplicates tag $key, gen(kittendupe)
      tab kittendupe if kittendupe > 0
      if `r(N)' > 0 {c -(}
      di as error "Duplicates in codebook (`topic'). Please address."
      br if kittendupe > 0
      STOP
      {c )-}
      drop kittendupe
      if "`topic'" == "basic" {c -(}
      keep if !mi(ubcov_id)
      tempfile temp
      save `temp', replace
      {c )-}
      else {c -(}
      drop nid survey_name ihme_loc_id year_start year_end survey_module file_path
      merge 1:1 ubcov_id using `temp', gen(kittenmerge_`topic') keep(2 3)
      replace kittenmerge_`topic' = 0 if kittenmerge_`topic' != 3
      save `temp', replace
      {c )-}
      {c )-}
      if "$sel_topics" != "basic" {c -(}
      egen kittenkeep = rowtotal(kittenmerge_*)
      keep if kittenkeep > 0
      {c )-}
      keep ubcov_id $vars
      order ubcov_id $vars
      sort ubcov_id
      {c )-}
    - else {c -(}
    - gs_db, obj(`db')
    = gs_db, obj(merges)
      {hline 77} begin gs_db {hline}
      - syntax, obj(str) [topic(str)]
      - local links = "1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY"
      - gs_load, key(`links')
      = gs_load, key(1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY)
        {hline 73} begin gs_load {hline}
        - syntax, key(str)
        - preserve
        - clear
          {hline 73} begin clear {hline}
          - if _caller() < 10 {c -(}
            _clear_9 `0'
            exit
            {c )-}
          - version 10
          - syntax [anything]
          - tokenize `anything'
          = tokenize 
          - if `"`2'"' != "" {c -(}
          = if `""' != "" {c -(}
            display as err "`2' not allowed"
            exit 198
            {c )-}
          - if "`1'"=="" {c -(}
          = if ""=="" {c -(}
          - drop _all
          - label drop _all
            {hline 71} begin label {hline}
            - version 10.0
            - gettoken val : 0
            - if (strpos("`val'", "val") > 0 ) {c -(}
            = if (strpos("drop", "val") > 0 ) {c -(}
              gettoken val 0 : 0
              syntax anything [, nofix]
              if "`fix'" != "" {c -(}
              local fix ", nofix"
              {c )-}
              gettoken var rest : anything
              while `"`rest'"' != "" {c -(}
              gettoken lab rest : rest
              local label "`lab'"
              {c )-}
              local vlist : list anything - lab
              if "`lab'" == "." {c -(}
              local lab ""
              {c )-}
              foreach var of varlist `vlist' {c -(}
              _label `val' `var' `lab' `fix'
              {c )-}
              {c )-}
            - else {c -(}
            - _label `macval(0)'
            = _label drop _all
            - {c )-}
            {hline 73} end label {hline}
          - {c )-}
          - else if "`1'"=="mata" {c -(}
          = else if ""=="mata" {c -(}
            mata: mata clear
            {c )-}
          - else if inlist("`1'", "results", "matrix") {c -(}
          = else if inlist("", "results", "matrix") {c -(}
            return clear
            clearreturn
            ereturn clear
            sreturn clear
            _return drop _all
            if ("`1'" == "matrix") {c -(}
            matrix drop _all
            _est drop _all
            {c )-}
            {c )-}
          - else if "`1'"=="programs" {c -(}
          = else if ""=="programs" {c -(}
            program drop _all
            {c )-}
          - else if "`1'"=="ado" {c -(}
          = else if ""=="ado" {c -(}
            program drop _allado
            {c )-}
          - else if "`1'"=="*" | "`1'"=="all" {c -(}
          = else if ""=="*" | ""=="all" {c -(}
            capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
            capture
            if (0`semmods') {c -(}
            display as err "-clear all- not allowed while an SEM Builder is open"
            exit 1
            {c )-}
            drop _all
            label drop _all
            matrix drop _all
            scalar drop _all
            constraint drop _all
            eq drop _all
            file close _all
            postutil clear
            _return drop _all
            discard
            program drop _all
            timer clear
            mata: mata clear
            {c )-}
          - else {c -(}
            display as err "`1' not allowed"
            exit 198
            {c )-}
          {hline 75} end clear {hline}
        - set obs 1
        - gen blah = 1
        - tempfile temp
        - save `temp', replace
        = save /tmp/St48035.000002, replace
        - restore
        - local link "https://docs.google.com/spreadsheets/d/`key'/export?format=csv"
        = local link "https://docs.google.com/spreadsheets/d/1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY/export?format=csv"
        - copy "`link'" `temp'
        = copy "https://docs.google.com/spreadsheets/d/1WMJnKTWShlV1gh9KXz-T7YY7JAD5KiTKu5oIp3fdaDY/export?format=csv" /tmp/St48035.000002
        - import delimited using `temp', clear varnames(1) stringcols(_all) charset("utf-8")
        = import delimited using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
          {hline 72} begin import {hline}
          - version 12
          - gettoken subcmd 0 : 0, parse(" ,")
          - if `"`subcmd'"' == "delim" {c -(}
          = if `"delimited"' == "delim" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimi" {c -(}
          = else if `"delimited"' == "delimi" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimit" {c -(}
          = else if `"delimited"' == "delimit" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimite" {c -(}
          = else if `"delimited"' == "delimite" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimited" {c -(}
          = else if `"delimited"' == "delimited" {c -(}
          - ImpDelim `0'
          = ImpDelim  using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
            {hline 61} begin import.ImpDelim {hline}
            - version 13
            - import_delimited `0'
            = import_delimited using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
              {hline 58} begin import_delimited {hline}
              - version 13
              - gettoken filename rest : 0, parse(" ,")
              - gettoken comma : rest, parse(" ,")
              - if (`"`filename'"' != "" & (trim(`"`comma'"') == "," | trim(`"`comma'"') == "")) {c -(}
              = if (`"using"' != "" & (trim(`"/tmp/St48035.000002"') == "," | trim(`"/tmp/St48035.000002"') == "")) {c -(}
                local 0 `"using `0'"'
                {c )-}
              - capture syntax using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
              - if _rc {c -(}
                syntax [anything(name=vlist id="vlist")] using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
                {c )-}
              - mata:import_delim_import_file()
                {hline 67} begin clear {hline}
                - if _caller() < 10 {c -(}
                  _clear_9 `0'
                  exit
                  {c )-}
                - version 10
                - syntax [anything]
                - tokenize `anything'
                = tokenize 
                - if `"`2'"' != "" {c -(}
                = if `""' != "" {c -(}
                  display as err "`2' not allowed"
                  exit 198
                  {c )-}
                - if "`1'"=="" {c -(}
                = if ""=="" {c -(}
                - drop _all
                - label drop _all
                  {hline 65} begin label {hline}
                  - version 10.0
                  - gettoken val : 0
                  - if (strpos("`val'", "val") > 0 ) {c -(}
                  = if (strpos("drop", "val") > 0 ) {c -(}
                    gettoken val 0 : 0
                    syntax anything [, nofix]
                    if "`fix'" != "" {c -(}
                    local fix ", nofix"
                    {c )-}
                    gettoken var rest : anything
                    while `"`rest'"' != "" {c -(}
                    gettoken lab rest : rest
                    local label "`lab'"
                    {c )-}
                    local vlist : list anything - lab
                    if "`lab'" == "." {c -(}
                    local lab ""
                    {c )-}
                    foreach var of varlist `vlist' {c -(}
                    _label `val' `var' `lab' `fix'
                    {c )-}
                    {c )-}
                  - else {c -(}
                  - _label `macval(0)'
                  = _label drop _all
                  - {c )-}
                  {hline 67} end label {hline}
                - {c )-}
                - else if "`1'"=="mata" {c -(}
                = else if ""=="mata" {c -(}
                  mata: mata clear
                  {c )-}
                - else if inlist("`1'", "results", "matrix") {c -(}
                = else if inlist("", "results", "matrix") {c -(}
                  return clear
                  clearreturn
                  ereturn clear
                  sreturn clear
                  _return drop _all
                  if ("`1'" == "matrix") {c -(}
                  matrix drop _all
                  _est drop _all
                  {c )-}
                  {c )-}
                - else if "`1'"=="programs" {c -(}
                = else if ""=="programs" {c -(}
                  program drop _all
                  {c )-}
                - else if "`1'"=="ado" {c -(}
                = else if ""=="ado" {c -(}
                  program drop _allado
                  {c )-}
                - else if "`1'"=="*" | "`1'"=="all" {c -(}
                = else if ""=="*" | ""=="all" {c -(}
                  capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
                  capture
                  if (0`semmods') {c -(}
                  display as err "-clear all- not allowed while an SEM Builder is open"
                  exit 1
                  {c )-}
                  drop _all
                  label drop _all
                  matrix drop _all
                  scalar drop _all
                  constraint drop _all
                  eq drop _all
                  file close _all
                  postutil clear
                  _return drop _all
                  discard
                  program drop _all
                  timer clear
                  mata: mata clear
                  {c )-}
                - else {c -(}
                  display as err "`1' not allowed"
                  exit 198
                  {c )-}
                {hline 69} end clear {hline}
              {hline 60} end import_delimited {hline}
            {hline 63} end import.ImpDelim {hline}
          - {c )-}
          - else if `"`subcmd'"' == "exc" {c -(}
          = else if `"delimited"' == "exc" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "exce" {c -(}
          = else if `"delimited"' == "exce" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "excel" {c -(}
          = else if `"delimited"' == "excel" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "hav" {c -(}
          = else if `"delimited"' == "hav" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "have" {c -(}
          = else if `"delimited"' == "have" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "haver" {c -(}
          = else if `"delimited"' == "haver" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "sasxport" {c -(}
          = else if `"delimited"' == "sasxport" {c -(}
            ImpSasxport `0'
            {c )-}
          - else {c -(}
            display as error `"import: unknown subcommand "`subcmd'""'
            exit 198
            {c )-}
          {hline 74} end import {hline}
        {hline 75} end gs_load {hline}
      - keep if obj =="`obj'"
      = keep if obj =="merges"
      - if !mi("`topic'") keep if topic == "`topic'"
      = if !mi("") keep if topic == ""
      - if _N == 0 {c -(}
        di as error "Codebook not listed in links (https://docs.google.com/spreadsheets/d/`links'/edit#gid=0)"
        STOP
        {c )-}
      - if _N > 1 {c -(}
        if !mi("`topic'") di as error "Duplicates in topic (`topic') and obj (`obj')"
        else di as error "Duplicates in obj (`obj')"
        STOP
        {c )-}
      - else {c -(}
      - local key `=key[1]'
      = local key 1skCRpUHNNgs23IGdlpQw8C16zVS7fyd45DZ6WVlakwI
      - gs_load, key(`key')
      = gs_load, key(1skCRpUHNNgs23IGdlpQw8C16zVS7fyd45DZ6WVlakwI)
        {hline 73} begin gs_load {hline}
        - syntax, key(str)
        - preserve
        - clear
          {hline 73} begin clear {hline}
          - if _caller() < 10 {c -(}
            _clear_9 `0'
            exit
            {c )-}
          - version 10
          - syntax [anything]
          - tokenize `anything'
          = tokenize 
          - if `"`2'"' != "" {c -(}
          = if `""' != "" {c -(}
            display as err "`2' not allowed"
            exit 198
            {c )-}
          - if "`1'"=="" {c -(}
          = if ""=="" {c -(}
          - drop _all
          - label drop _all
            {hline 71} begin label {hline}
            - version 10.0
            - gettoken val : 0
            - if (strpos("`val'", "val") > 0 ) {c -(}
            = if (strpos("drop", "val") > 0 ) {c -(}
              gettoken val 0 : 0
              syntax anything [, nofix]
              if "`fix'" != "" {c -(}
              local fix ", nofix"
              {c )-}
              gettoken var rest : anything
              while `"`rest'"' != "" {c -(}
              gettoken lab rest : rest
              local label "`lab'"
              {c )-}
              local vlist : list anything - lab
              if "`lab'" == "." {c -(}
              local lab ""
              {c )-}
              foreach var of varlist `vlist' {c -(}
              _label `val' `var' `lab' `fix'
              {c )-}
              {c )-}
            - else {c -(}
            - _label `macval(0)'
            = _label drop _all
            - {c )-}
            {hline 73} end label {hline}
          - {c )-}
          - else if "`1'"=="mata" {c -(}
          = else if ""=="mata" {c -(}
            mata: mata clear
            {c )-}
          - else if inlist("`1'", "results", "matrix") {c -(}
          = else if inlist("", "results", "matrix") {c -(}
            return clear
            clearreturn
            ereturn clear
            sreturn clear
            _return drop _all
            if ("`1'" == "matrix") {c -(}
            matrix drop _all
            _est drop _all
            {c )-}
            {c )-}
          - else if "`1'"=="programs" {c -(}
          = else if ""=="programs" {c -(}
            program drop _all
            {c )-}
          - else if "`1'"=="ado" {c -(}
          = else if ""=="ado" {c -(}
            program drop _allado
            {c )-}
          - else if "`1'"=="*" | "`1'"=="all" {c -(}
          = else if ""=="*" | ""=="all" {c -(}
            capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
            capture
            if (0`semmods') {c -(}
            display as err "-clear all- not allowed while an SEM Builder is open"
            exit 1
            {c )-}
            drop _all
            label drop _all
            matrix drop _all
            scalar drop _all
            constraint drop _all
            eq drop _all
            file close _all
            postutil clear
            _return drop _all
            discard
            program drop _all
            timer clear
            mata: mata clear
            {c )-}
          - else {c -(}
            display as err "`1' not allowed"
            exit 198
            {c )-}
          {hline 75} end clear {hline}
        - set obs 1
        - gen blah = 1
        - tempfile temp
        - save `temp', replace
        = save /tmp/St48035.000002, replace
        - restore
        - local link "https://docs.google.com/spreadsheets/d/`key'/export?format=csv"
        = local link "https://docs.google.com/spreadsheets/d/1skCRpUHNNgs23IGdlpQw8C16zVS7fyd45DZ6WVlakwI/export?format=csv"
        - copy "`link'" `temp'
        = copy "https://docs.google.com/spreadsheets/d/1skCRpUHNNgs23IGdlpQw8C16zVS7fyd45DZ6WVlakwI/export?format=csv" /tmp/St48035.000002
        - import delimited using `temp', clear varnames(1) stringcols(_all) charset("utf-8")
        = import delimited using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
          {hline 72} begin import {hline}
          - version 12
          - gettoken subcmd 0 : 0, parse(" ,")
          - if `"`subcmd'"' == "delim" {c -(}
          = if `"delimited"' == "delim" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimi" {c -(}
          = else if `"delimited"' == "delimi" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimit" {c -(}
          = else if `"delimited"' == "delimit" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimite" {c -(}
          = else if `"delimited"' == "delimite" {c -(}
            ImpDelim `0'
            {c )-}
          - else if `"`subcmd'"' == "delimited" {c -(}
          = else if `"delimited"' == "delimited" {c -(}
          - ImpDelim `0'
          = ImpDelim  using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
            {hline 61} begin import.ImpDelim {hline}
            - version 13
            - import_delimited `0'
            = import_delimited using /tmp/St48035.000002, clear varnames(1) stringcols(_all) charset("utf-8")
              {hline 58} begin import_delimited {hline}
              - version 13
              - gettoken filename rest : 0, parse(" ,")
              - gettoken comma : rest, parse(" ,")
              - if (`"`filename'"' != "" & (trim(`"`comma'"') == "," | trim(`"`comma'"') == "")) {c -(}
              = if (`"using"' != "" & (trim(`"/tmp/St48035.000002"') == "," | trim(`"/tmp/St48035.000002"') == "")) {c -(}
                local 0 `"using `0'"'
                {c )-}
              - capture syntax using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
              - if _rc {c -(}
                syntax [anything(name=vlist id="vlist")] using/ [, DELIMiters(string asis) ROWRange(string) COLRange(string) VARNames(string) case(string) ASDOUBle ASFLOat clear BINDQuotes(string) STRIPQuotes(string) NUMERICCols(string) STRINGCols(string) CHARSET(string) COLLAPSEDelimiters]
                {c )-}
              - mata:import_delim_import_file()
                {hline 67} begin clear {hline}
                - if _caller() < 10 {c -(}
                  _clear_9 `0'
                  exit
                  {c )-}
                - version 10
                - syntax [anything]
                - tokenize `anything'
                = tokenize 
                - if `"`2'"' != "" {c -(}
                = if `""' != "" {c -(}
                  display as err "`2' not allowed"
                  exit 198
                  {c )-}
                - if "`1'"=="" {c -(}
                = if ""=="" {c -(}
                - drop _all
                - label drop _all
                  {hline 65} begin label {hline}
                  - version 10.0
                  - gettoken val : 0
                  - if (strpos("`val'", "val") > 0 ) {c -(}
                  = if (strpos("drop", "val") > 0 ) {c -(}
                    gettoken val 0 : 0
                    syntax anything [, nofix]
                    if "`fix'" != "" {c -(}
                    local fix ", nofix"
                    {c )-}
                    gettoken var rest : anything
                    while `"`rest'"' != "" {c -(}
                    gettoken lab rest : rest
                    local label "`lab'"
                    {c )-}
                    local vlist : list anything - lab
                    if "`lab'" == "." {c -(}
                    local lab ""
                    {c )-}
                    foreach var of varlist `vlist' {c -(}
                    _label `val' `var' `lab' `fix'
                    {c )-}
                    {c )-}
                  - else {c -(}
                  - _label `macval(0)'
                  = _label drop _all
                  - {c )-}
                  {hline 67} end label {hline}
                - {c )-}
                - else if "`1'"=="mata" {c -(}
                = else if ""=="mata" {c -(}
                  mata: mata clear
                  {c )-}
                - else if inlist("`1'", "results", "matrix") {c -(}
                = else if inlist("", "results", "matrix") {c -(}
                  return clear
                  clearreturn
                  ereturn clear
                  sreturn clear
                  _return drop _all
                  if ("`1'" == "matrix") {c -(}
                  matrix drop _all
                  _est drop _all
                  {c )-}
                  {c )-}
                - else if "`1'"=="programs" {c -(}
                = else if ""=="programs" {c -(}
                  program drop _all
                  {c )-}
                - else if "`1'"=="ado" {c -(}
                = else if ""=="ado" {c -(}
                  program drop _allado
                  {c )-}
                - else if "`1'"=="*" | "`1'"=="all" {c -(}
                = else if ""=="*" | ""=="all" {c -(}
                  capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
                  capture
                  if (0`semmods') {c -(}
                  display as err "-clear all- not allowed while an SEM Builder is open"
                  exit 1
                  {c )-}
                  drop _all
                  label drop _all
                  matrix drop _all
                  scalar drop _all
                  constraint drop _all
                  eq drop _all
                  file close _all
                  postutil clear
                  _return drop _all
                  discard
                  program drop _all
                  timer clear
                  mata: mata clear
                  {c )-}
                - else {c -(}
                  display as err "`1' not allowed"
                  exit 198
                  {c )-}
                {hline 69} end clear {hline}
              {hline 60} end import_delimited {hline}
            {hline 63} end import.ImpDelim {hline}
          - {c )-}
          - else if `"`subcmd'"' == "exc" {c -(}
          = else if `"delimited"' == "exc" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "exce" {c -(}
          = else if `"delimited"' == "exce" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "excel" {c -(}
          = else if `"delimited"' == "excel" {c -(}
            ImpExcel `0'
            {c )-}
          - else if `"`subcmd'"' == "hav" {c -(}
          = else if `"delimited"' == "hav" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "have" {c -(}
          = else if `"delimited"' == "have" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "haver" {c -(}
          = else if `"delimited"' == "haver" {c -(}
            ImpHaver `0'
            {c )-}
          - else if `"`subcmd'"' == "sasxport" {c -(}
          = else if `"delimited"' == "sasxport" {c -(}
            ImpSasxport `0'
            {c )-}
          - else {c -(}
            display as error `"import: unknown subcommand "`subcmd'""'
            exit 198
            {c )-}
          {hline 74} end import {hline}
        {hline 75} end gs_load {hline}
      - {c )-}
      {hline 79} end gs_db {hline}
    - {c )-}
    {hline 79} end db_load {hline}
  - if !mi("`load'") import delimited using "`load'/`db'.csv", clear varnames(1) stringcols(_all) charset("utf-8")
  = if !mi("") import delimited using "/merges.csv", clear varnames(1) stringcols(_all) charset("utf-8")
  - if !mi("`save'") export delimited using "`save'/`db'.csv", replace
  = if !mi("") export delimited using "/merges.csv", replace
  - tostring *, replace
    {hline 76} begin tostring {hline}
    - version 8.0
    - syntax varlist, [Generate(string) replace] [force] [format(str) Usedisplayformat]
    - if "`generate'" != "" & "`replace'" != "" {c -(}
    = if "" != "" & "replace" != "" {c -(}
      di as err "{c -(}p{c )-}options generate and replace are mutually exclusive{c -(}p_end{c )-}"
      exit 198
      {c )-}
    - if "`generate'" == "" & "`replace'" == "" {c -(}
    = if "" == "" & "replace" == "" {c -(}
      di as err "{c -(}p{c )-}must specify either generate or replace option{c -(}p_end{c )-}"
      exit 198
      {c )-}
    - if "`generate'" != "" {c -(}
    = if "" != "" {c -(}
      local ct1: word count `varlist'
      local save "`varlist'"
      local 0 "`generate'"
      capture syntax newvarlist
      if _rc {c -(}
      di as err "generate(newvarlist) invalid"
      exit _rc
      {c )-}
      local generate "`varlist'"
      local varlist "`save'"
      local ct2: word count `generate'
      if `ct1' != `ct2' {c -(}
      di as err "{c -(}p{c )-}number of variables in varlist " "must equal number of variables in generate(newvarlist){c -(}p_end{c )-}"
      exit 198
      {c )-}
      {c )-}
    - if "`usedisplayformat'" != "" & "`format'" != "" {c -(}
    = if "" != "" & "" != "" {c -(}
      di as err "{c -(}p{c )-}must choose between usedisplayformat and format() options{c -(}p_end{c )-}"
      exit 198
      {c )-}
    - if "`format'" != "" {c -(}
    = if "" != "" {c -(}
      if index("`format'", "s") {c -(}
      di as err "use numeric format in format() option"
      exit 198
      {c )-}
      capture di `format' 12345.67890
      if _rc {c -(}
      di as err "format() option invalid"
      exit 198
      {c )-}
      local fmt "`format'"
      local format `", "`format'""'
      {c )-}
    - else {c -(}
    - local fmt "%12.0g"
    - local format `", "%12.0g""'
    - {c )-}
    - local u = "`usedisplayformat'" != ""
    = local u = "" != ""
    - if "`generate'" != "" {c -(}
    = if "" != "" {c -(}
      tokenize `generate'
      local i = 0
      foreach v of local varlist {c -(}
      local ++i
      capture confirm string variable `v'
      if _rc == 0 {c -(}
      di as txt "`v' already string; no " as res "generate"
      {c )-}
      else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "generate"
      {c )-}
      else {c -(}
      gen ``i'' = `temp'
      di as txt "``i'' generated as {c -(}res:`: type ``i'''{c )-}"
      _crcslbl ``i'' `v'
      move ``i'' `v'
      move `v' ``i''
      Charcopy `v' ``i''
      if `flag' & "`force'" != "" {c -(}
      di as txt "``i'' was forced to string; some loss of information"
      char ``i''[tostring] "forced to string; `fmt'"
      {c )-}
      else char ``i''[tostring] "converted to string"
      {c )-}
      drop `temp'
      {c )-}
      {c )-}
      {c )-}
    - else if "`replace'" != "" {c -(}
    = else if "replace" != "" {c -(}
    - foreach v of local varlist {c -(}
    - capture confirm string variable `v'
    = capture confirm string variable user
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "user already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable ubcov_id
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "ubcov_id already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable survey_name
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "survey_name already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable nid
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "nid already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable ihme_loc_id
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "ihme_loc_id already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable year_start
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "year_start already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable year_end
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "year_end already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable survey_module
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "survey_module already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable file_path
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "file_path already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable topic_name
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "topic_name already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable merge_file
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "merge_file already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable reshape
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "reshape already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable master_vars
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "master_vars already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable using_vars
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "using_vars already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable type
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "type already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - capture confirm string variable `v'
    = capture confirm string variable keep
    - if _rc == 0 {c -(}
    - di as txt "`v' already string; no " as res "replace"
    = di as txt "keep already string; no " as res "replace"
    - {c )-}
    - else if `"`: value label `v''"' != "" & "`force'" == "" {c -(}
    = else if `""' != "" & "" == "" {c -(}
      di as txt "`v' has value label; no " as res "replace"
      {c )-}
    - else {c -(}
      if `u' {c -(}
      local fmt "`: format `v''"
      local format `", "`: format `v''""'
      {c )-}
      tempvar temp
      qui gen str `temp' = string(`v'`format')
      qui count if `v' != real(`temp')
      local flag = r(N)
      if `flag' & "`force'" == "" {c -(}
      di as txt "`v' cannot be converted " "reversibly; no " as res "replace"
      {c )-}
      else {c -(}
      local oldtype : type `v'
      char rename `v' `temp'
      move `temp' `v'
      local vl: variable label `v'
      drop `v'
      rename `temp' `v'
      label variable `v' `"`vl'"'
      di as txt "`v' was {c -(}res:`oldtype'{c )-} now {c -(}res:`: type `v''{c )-}"
      if `flag' & "`force'" != "" {c -(}
      di as txt "`v' was forced to string; some loss of information"
      char `v'[tostring] "forced to string; `fmt'"
      {c )-}
      else char `v'[tostring] "converted to string"
      {c )-}
      {c )-}
    - {c )-}
    - {c )-}
    {hline 78} end tostring {hline}
  - inlist2, obj(topic_name) vals(`topics') str(vals)
  = inlist2, obj(topic_name) vals(basic design demographics geography hap) str(vals)
    {hline 77} begin inlist2 {hline}
    - syntax, obj(str) vals(str) [cond(str) str(str) string]
    - if !mi("`cond'") {c -(}
    = if !mi("") {c -(}
      if !inlist("`cond'", "&", "|") {c -(}
      STOP
      {c )-}
      local cond `cond'
      {c )-}
    - else {c -(}
    - local cond |
    - {c )-}
    - local i 1
    - local cmd 1==0
    - foreach val in `vals' {c -(}
    = foreach val in basic design demographics geography hap {c -(}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | "topic_name" == basic
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | "topic_name" == "basic"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | "topic_name" == design
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | "topic_name" == "design"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | "topic_name" == demographics
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | "topic_name" == "demographics"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | "topic_name" == geography
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | "topic_name" == "geography"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
    = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | "topic_name" == hap
    - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
    = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap"
    - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
    = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap" | "topic_name" == "hap"
    - else {c -(}
      cap confirm numeric variable `obj'
      if !_rc local num_obj 1
      else local num_obj 0
      cap confirm number `val'
      if !_rc local num_val 1
      else local num_val 0
      if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
      else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
      {c )-}
    - local ++i
    - {c )-}
    - return local cmd "`cmd'"
    = return local cmd "1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap""
    {hline 79} end inlist2 {hline}
  - local ifcmd `r(cmd)'
  = local ifcmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap"
  - if "`db'" == "vars" {c -(}
  = if "merges" == "vars" {c -(}
    keep if `ifcmd'
    global vars
    forvalues i = 1/`=_N' {c -(}
    global vars $vars `=var_name[`i']'
    {c )-}
    {c )-}
  - if "`db'" == "indicators" {c -(}
  = if "merges" == "indicators" {c -(}
    keep if `ifcmd'
    global indicators
    forvalues i = 1/`=_N' {c -(}
    global indicators $indicators `=indicator_name[`i']'
    {c )-}
    {c )-}
  - ds
    {hline 82} begin ds {hline}
    - version 9
    - local version : di "version " string(_caller()) ":"
    - if (_caller() <= 4) {c -(}
      `version' describe, simple
      exit
      {c )-}
    - else {c -(}
    - ds_util `0'
    = ds_util 
      {hline 75} begin ds_util {hline}
      - version 8
      - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detail Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
      - if "`varlist'" == "" {c -(}
      = if "user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path topic_name merge_file reshape master_vars using_vars type keep" == "" {c -(}
        exit
        {c )-}
      - if !inrange(`indent',0,244) {c -(}
      = if !inrange(0,0,244) {c -(}
        di as err "indent() should be in the range 0..244"
        exit 198
        {c )-}
      - if !inrange(`varwidth',5,32) {c -(}
      = if !inrange(12,5,32) {c -(}
        di as err "varwidth() should be in the range 5..32"
        exit 198
        {c )-}
      - if !inrange(`skip',1,10) {c -(}
      = if !inrange(2,1,10) {c -(}
        di as err "skip() should be in the range 1..10"
        exit 198
        {c )-}
      - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
      = local nopts = (`""' != "") + (`""' != "") + ("" != "")
      - if `nopts' == 3 {c -(}
      = if 0 == 3 {c -(}
        di as err "may not combine options has(), not(), and not"
        exit 198
        {c )-}
      - else if `nopts' == 2 {c -(}
      = else if 0 == 2 {c -(}
        if (`"`has'"' == "") {c -(}
        di as err "may not combine options not() and not"
        exit 198
        {c )-}
        else if (`"`not'"' == "") {c -(}
        di as err "may not combine options has() and not"
        exit 198
        {c )-}
        else if (`"`not2'"' == "") {c -(}
        di as err "may not combine options has() and not()"
        exit 198
        {c )-}
        {c )-}
      - if `"`not'"' != "" {c -(}
      = if `""' != "" {c -(}
        local has `"`not'"'
        local opt "not"
        {c )-}
      - else if `"`has'"' != "" {c -(}
      = else if `""' != "" {c -(}
        local opt "has"
        {c )-}
      - local inse = "`insensitive'" != ""
      = local inse = "" != ""
      - if `"`has'"' != "" {c -(}
      = if `""' != "" {c -(}
        CheckHas `"`has'"' "`opt'" "`inse'"
        if "`what'" == "varl" | "`what'" == "vall" {c -(}
        VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
        {c )-}
        else if "`what'" == "f" {c -(}
        Format `"`which'"' "`varlist'" "`inse'"
        {c )-}
        else if "`what'" == "c" {c -(}
        Char `"`which'"' "`varlist'" "`inse'"
        {c )-}
        else if "`what'" == "t" {c -(}
        Type `"`which'"' "`varlist'"
        {c )-}
        if `"`not'"' != "" {c -(}
        local varlist : list varlist - vlist
        {c )-}
        else if `"`has'"' != "" {c -(}
        local varlist "`vlist'"
        {c )-}
        {c )-}
      - if `"`not2'"' != "" {c -(}
      = if `""' != "" {c -(}
        unab all : *
        local varlist : list all - varlist
        {c )-}
      - if "`varlist'" == "" {c -(}
      = if "user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path topic_name merge_file reshape master_vars using_vars type keep" == "" {c -(}
        exit
        {c )-}
      - if "`alpha'" != "" {c -(}
      = if "" != "" {c -(}
        local varlist : list sort varlist
        {c )-}
      - if "`detail'" != "" {c -(}
      = if "" != "" {c -(}
        describe `varlist'
        {c )-}
      - else {c -(}
      - local nvar : word count `varlist'
      = local nvar : word count user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path topic_name merge_file reshape master_vars using_vars type keep
      - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
      = local ncol = int((99 + 2) / (12 + 2))
      - local i 0
      - local vlist
      - foreach v of local varlist {c -(}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user ubcov_id"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user ubcov_id survey_name"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user ubcov_id survey_name nid"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user ubcov_id survey_name nid ihme_loc_id"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user ubcov_id survey_name nid ihme_loc_id year_start"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user ubcov_id survey_name nid ihme_loc_id year_start year_end"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape master_vars"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape master_vars using_vars"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape master_vars using_vars type"'
      - {c )-}
      - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
      = local vlist `" user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape master_vars using_vars type keep"'
      - {c )-}
      - DisplayInCols txt `indent' `skip' 0 `vlist'
      = DisplayInCols txt 0 2 0  user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape master_vars using_vars type keep
        {hline 59} begin ds_util.DisplayInCols {hline}
        - gettoken sty 0 : 0
        - gettoken indent 0 : 0
        - gettoken pad 0 : 0
        - gettoken wid 0 : 0
        - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
        = local indent = cond(0==. | 0<0, 0, 0)
        - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
        = local pad = cond(2==. | 2<1, 2, 2)
        - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
        = local wid = cond(0==. | 0<0, 0, 0)
        - local n : list sizeof 0
        - if `n'==0 {c -(}
        = if 16==0 {c -(}
          exit
          {c )-}
        - foreach x of local 0 {c -(}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(0, length(`"user"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(4, length(`"ubcov_id"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(8, length(`"survey_name"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(11, length(`"nid"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(11, length(`"ihme_loc_id"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(11, length(`"year_start"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(11, length(`"year_end"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(11, length(`"survey_mod~e"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"file_path"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"topic_name"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"merge_file"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"reshape"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"master_vars"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"using_vars"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"type"'))
        - {c )-}
        - local wid = max(`wid', length(`"`x'"'))
        = local wid = max(12, length(`"keep"'))
        - {c )-}
        - local wid = `wid' + `pad'
        = local wid = 12 + 2
        - local cols = int((`c(linesize)'+1-`indent')/`wid')
        = local cols = int((99+1-0)/14)
        - if `cols' < 2 {c -(}
        = if 7 < 2 {c -(}
          if `indent' {c -(}
          local col "_column(`=`indent'+1')"
          {c )-}
          foreach x of local 0 {c -(}
          di as `sty' `col' `"`x'"'
          {c )-}
          exit
          {c )-}
        - local lines = `n'/`cols'
        = local lines = 16/7
        - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        = local lines = int(cond(2.285714285714286>int(2.285714285714286), 2.285714285714286+1, 2.285714285714286))
        - forvalues i=1(1)`lines' {c -(}
        = forvalues i=1(1)3 {c -(}
        - local top = min((`cols')*`lines'+`i', `n')
        = local top = min((7)*3+1, 16)
        - local col = `indent' + 1
        = local col = 0 + 1
        - forvalues j=`i'(`lines')`top' {c -(}
        = forvalues j=1(3)16 {c -(}
        - local x : word `j' of `0'
        = local x : word 1 of   user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape master_vars using_vars type keep
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(1) "user" _c
        - local col = `col' + `wid'
        = local col = 1 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 4 of   user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape master_vars using_vars type keep
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(15) "nid" _c
        - local col = `col' + `wid'
        = local col = 15 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 7 of   user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape master_vars using_vars type keep
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(29) "year_end" _c
        - local col = `col' + `wid'
        = local col = 29 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 10 of   user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape master_vars using_vars type keep
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(43) "topic_name" _c
        - local col = `col' + `wid'
        = local col = 43 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 13 of   user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape master_vars using_vars type keep
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(57) "master_vars" _c
        - local col = `col' + `wid'
        = local col = 57 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 16 of   user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape master_vars using_vars type keep
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(71) "keep" _c
        - local col = `col' + `wid'
        = local col = 71 + 14
        - {c )-}
        - di as `sty'
        = di as txt
        - {c )-}
        - local top = min((`cols')*`lines'+`i', `n')
        = local top = min((7)*3+2, 16)
        - local col = `indent' + 1
        = local col = 0 + 1
        - forvalues j=`i'(`lines')`top' {c -(}
        = forvalues j=2(3)16 {c -(}
        - local x : word `j' of `0'
        = local x : word 2 of   user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape master_vars using_vars type keep
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(1) "ubcov_id" _c
        - local col = `col' + `wid'
        = local col = 1 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 5 of   user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape master_vars using_vars type keep
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(15) "ihme_loc_id" _c
        - local col = `col' + `wid'
        = local col = 15 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 8 of   user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape master_vars using_vars type keep
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(29) "survey_mod~e" _c
        - local col = `col' + `wid'
        = local col = 29 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 11 of   user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape master_vars using_vars type keep
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(43) "merge_file" _c
        - local col = `col' + `wid'
        = local col = 43 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 14 of   user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape master_vars using_vars type keep
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(57) "using_vars" _c
        - local col = `col' + `wid'
        = local col = 57 + 14
        - {c )-}
        - di as `sty'
        = di as txt
        - {c )-}
        - local top = min((`cols')*`lines'+`i', `n')
        = local top = min((7)*3+3, 16)
        - local col = `indent' + 1
        = local col = 0 + 1
        - forvalues j=`i'(`lines')`top' {c -(}
        = forvalues j=3(3)16 {c -(}
        - local x : word `j' of `0'
        = local x : word 3 of   user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape master_vars using_vars type keep
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(1) "survey_name" _c
        - local col = `col' + `wid'
        = local col = 1 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 6 of   user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape master_vars using_vars type keep
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(15) "year_start" _c
        - local col = `col' + `wid'
        = local col = 15 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 9 of   user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape master_vars using_vars type keep
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(29) "file_path" _c
        - local col = `col' + `wid'
        = local col = 29 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 12 of   user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape master_vars using_vars type keep
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(43) "reshape" _c
        - local col = `col' + `wid'
        = local col = 43 + 14
        - {c )-}
        - local x : word `j' of `0'
        = local x : word 15 of   user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_mod~e file_path topic_name merge_file reshape master_vars using_vars type keep
        - di as `sty' _column(`col') "`x'" _c
        = di as txt _column(57) "type" _c
        - local col = `col' + `wid'
        = local col = 57 + 14
        - {c )-}
        - di as `sty'
        = di as txt
        - {c )-}
        {hline 61} end ds_util.DisplayInCols {hline}
      - {c )-}
      - return local varlist `varlist'
      = return local varlist user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path topic_name merge_file reshape master_vars using_vars type keep
      {hline 77} end ds_util {hline}
    - exit
    {hline 84} end ds {hline}
  - global `db'_cols `r(varlist)'
  = global merges_cols user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path topic_name merge_file reshape master_vars using_vars type keep
  - putmata `db' = (${c -(}`db'_cols{c )-}), replace
  = putmata merges = (user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path topic_name merge_file reshape master_vars using_vars type keep), replace
    {hline 77} begin putmata {hline}
    - version 11
    - syntax [anything(name=putlist id="putlist" equalok)] [if] [in] [, OMITmissing REPLACE VIEW]
    - marksample touse, novarlist
    - if ("`in'"!="") {c -(}
    = if (""!="") {c -(}
      local in = substr("`in'", 3, .)
      {c )-}
    - mata: put("`touse'", "`in'")
    = mata: put("__000000", "")
      {hline 78} begin unab {hline}
      - version 6
      - gettoken user 0: 0, parse(" :")
      - gettoken colon 0: 0, parse(" :")
      - if `"`colon'"' != ":" {c -(} error 198 {c )-}
      = if `":"' != ":" {c -(} error 198 {c )-}
      - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 32767) NAME(string)]
      - c_local `user' `varlist'
      = c_local _parse_varlist user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path topic_name merge_file reshape master_vars using_vars type keep
      - local n : word count `varlist'
      = local n : word count user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path topic_name merge_file reshape master_vars using_vars type keep
      - if `n'>=`min' & `n'<=`max' {c -(} exit {c )-}
      = if 16>=1 & 16<=32767 {c -(} exit {c )-}
      {hline 80} end unab {hline}
    {hline 79} end putmata {hline}
  - {c )-}
  - get, indicators
    {hline 81} begin get {hline}
    - qui {c -(}
    - syntax, [vars codebook indicators labels merges] [keep_key]
    - clear
      {hline 77} begin clear {hline}
      - if _caller() < 10 {c -(}
        _clear_9 `0'
        exit
        {c )-}
      - version 10
      - syntax [anything]
      - tokenize `anything'
      = tokenize 
      - if `"`2'"' != "" {c -(}
      = if `""' != "" {c -(}
        display as err "`2' not allowed"
        exit 198
        {c )-}
      - if "`1'"=="" {c -(}
      = if ""=="" {c -(}
      - drop _all
      - label drop _all
        {hline 75} begin label {hline}
        - version 10.0
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {c -(}
        = if (strpos("drop", "val") > 0 ) {c -(}
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {c -(}
          local fix ", nofix"
          {c )-}
          gettoken var rest : anything
          while `"`rest'"' != "" {c -(}
          gettoken lab rest : rest
          local label "`lab'"
          {c )-}
          local vlist : list anything - lab
          if "`lab'" == "." {c -(}
          local lab ""
          {c )-}
          foreach var of varlist `vlist' {c -(}
          _label `val' `var' `lab' `fix'
          {c )-}
          {c )-}
        - else {c -(}
        - _label `macval(0)'
        = _label drop _all
        - {c )-}
        {hline 77} end label {hline}
      - {c )-}
      - else if "`1'"=="mata" {c -(}
      = else if ""=="mata" {c -(}
        mata: mata clear
        {c )-}
      - else if inlist("`1'", "results", "matrix") {c -(}
      = else if inlist("", "results", "matrix") {c -(}
        return clear
        clearreturn
        ereturn clear
        sreturn clear
        _return drop _all
        if ("`1'" == "matrix") {c -(}
        matrix drop _all
        _est drop _all
        {c )-}
        {c )-}
      - else if "`1'"=="programs" {c -(}
      = else if ""=="programs" {c -(}
        program drop _all
        {c )-}
      - else if "`1'"=="ado" {c -(}
      = else if ""=="ado" {c -(}
        program drop _allado
        {c )-}
      - else if "`1'"=="*" | "`1'"=="all" {c -(}
      = else if ""=="*" | ""=="all" {c -(}
        capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
        capture
        if (0`semmods') {c -(}
        display as err "-clear all- not allowed while an SEM Builder is open"
        exit 1
        {c )-}
        drop _all
        label drop _all
        matrix drop _all
        scalar drop _all
        constraint drop _all
        eq drop _all
        file close _all
        postutil clear
        _return drop _all
        discard
        program drop _all
        timer clear
        mata: mata clear
        {c )-}
      - else {c -(}
        display as err "`1' not allowed"
        exit 198
        {c )-}
      {hline 79} end clear {hline}
    - local arg `2'
    = local arg indicators
    - getmata (${c -(}`arg'_cols{c )-}) = `arg'
    = getmata (v1 indicator_name topic_name indicator_desc indicator_type input_vars input_meta map_indicator code_custom indicator_required indicator_validation date_added last_modified) = indicators
      =        real scalar               isnumeric
      =        string rowvector                    varname
      =        string scalar                    matname
      =        real rowvector                    varexists
      =        real scalar                       op_id
      =        real scalar                       op_replace
      =        real scalar                       op_force
      =        real scalar                       op_double
      =        real scalar                       op_update
      =        struct elinfo scalar                       id
      =        real colvector                            id_lhsmap, id_rhsmap
      =        real scalar                            minrows, maxrows
      =        string scalar                            tempname
      =        real scalar                            ret_K_new
      =        real scalar                            ret_K_existing
      =        pointer(struct elinfo scalar) rowvector    el
      =        struct prinfo scalar       pr
      =void setup_problem(struct prinfo scalar pr)
      =                pr.op_force = 1
      =        if ( pr.op_update) pr.op_replace = 1
      =void setup_problem_id(struct prinfo scalar pr)
      =        string scalar    idstr
      =        string rowvector    idvec
      =        string scalar    varname
      =                pr.op_id  = 0
      =        pr.op_id = 1
      =                post_to_el(pr.id, varname, varname, 1)
      =                        post_to_el(pr.id, varname, idvec[3], 1)
      =void assert_matexists(string scalar matname)
      =void parse_getlist(struct prinfo scalar pr)
      =        transmorphic    t
      =        string scalar    getlist, token, varname
      =void parse_getlist_paren(transmorphic callerst, string scalar boundlist, struct prinfo scalar pr)
      =        transmorphic    t
      =        string scalar    toparse, token, evarnamelist
      =void parse_getlist_err(string scalar found, string scalar expected)
      =        string scalar    ftxt
      =void add_to_el(struct prinfo scalar pr, string rowvector evarnamelist, string scalar matname)
      =        real scalar    j
      =void post_to_el(struct elinfo scalar el,
      =                        string rowvector evarnamelist, string scalar matname, real scalar existsok)
      =        real scalar            i, rc
      =        string scalar            eltype, too, mtyp
      =        real scalar       isexpandlist
      =string rowvector expand_evarnamelist(string rowvector evarnamelist, real scalar n)
      =        real scalar    i
      =        string scalar    basename
      =        string rowvector    toret
      =void var_exists_error(string scalar varname)
      =void assert_vartype_matches(string scalar varname, real scalar isnumeric, string scalar matname)
      =        real scalar       isnumvar
      =void assert_is_name(string scalar name, string scalar nametype)
      =pointer(matrix) scalar get_matrix_pointer(string scalar matname, real scalar isexpandlist)
      =string rowvector parse_varnamelist(string scalar varnamelist, real scalar emptyok)
      =        real scalar    i
      =        string rowvector    list
      =string scalar unabvarname(string scalar uservarname)
      =        real scalar    i
      =        string scalar    varname
      =void assert_varnames_unique(struct prinfo scalar pr)
      =        real scalar    i,  j, n_el
      =        string colvector    varname, bad
      =        string scalar    s_variable
      =void set_minmaxrows(struct prinfo scalar pr)
      =        real scalar    i
      =        real rowvector    rows
      =void assert_row_conformability(struct prinfo scalar pr)
      =        real scalar            N
      =void setup_id(struct prinfo scalar pr)
      =void setup_id_u(struct prinfo scalar pr, pointer(colvector) vec)
      =        real scalar            i_d, i_v
      =        real scalar            N_d, N_v, N_m
      =        real colvector            p_d, p_v
      =        real matrix            map
      =        real scalar       cont
      =real scalar goforward(colvector a, real scalar i_a, colvector b, real scalar i_b)
      =                if ((++i_a) > rows(a)) return(0)
      =        return(1)
      =void assert_uniq(struct prinfo scalar pr, colvector data, colvector vec)
      =        real scalar       data_uniq, vec_uniq
      =real scalar whether_uniq(colvector x)
      =void post_variables(struct prinfo scalar pr)
      =        real scalar    i
      =void expand_dataset(struct prinfo scalar pr)
      =void post_variables_i(struct prinfo scalar pr, struct elinfo scalar el)
      =        real scalar    j
      =void post_variables_i_j(struct prinfo scalar pr, struct elinfo scalar el, matrix values, real scalar j)
      =        string scalar                    varname
      =        string scalar                    dflt_vartype, orig_vartype
      =        string scalar                    comp_vartype, new_vartype
      =        real scalar                    rc, n1, N_up
      =        real scalar                    up_strlen, orig_strlen, up_isstrl, orig_isstrl
      =        real scalar                    maxstrflen
      =        real scalar               isnumeric, isvec, noinfo, nodata
      =         pointer(real matrix) scalar   r
      =string scalar combine_num_vartype(string scalar typ_user, string scalar typ_comp)
      =real scalar has_no_updates(struct prinfo scalar pr, struct elinfo scalar el, matrix v, real scalar j)
      =        real scalar            N_up
      =        if (st_nobs()==0 | N_up==0) return(1)
      {hline 75} begin getmata {hline}
      - version 11
      - syntax [anything(name=getlist id="getlist" equalok)] [, DOUBLE FORCE ID(string) REPLACE UPdate]
      - mata: get()
      {hline 77} end getmata {hline}
    - if !inlist("`arg'", "labels", "merge") destring *, replace
    = if !inlist("indicators", "labels", "merge") destring *, replace
      {hline 74} begin destring {hline}
      - version 7.0
      - syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(string)] [percent] [dpcomma]
      - if "`percent'" == "percent" {c -(}
      = if "" == "percent" {c -(}
        if !index(`"`ignore'"', "%") {c -(}
        local ignore `"`ignore'%"'
        {c )-}
        {c )-}
      - if "`generate'" != "" & "`replace'" != "" {c -(}
      = if "" != "" & "replace" != "" {c -(}
        di as err "options generate and replace are mutually exclusive"
        exit 198
        {c )-}
      - if "`generate'" == "" & "`replace'" == "" {c -(}
      = if "" == "" & "replace" == "" {c -(}
        di as err "must specify either generate or replace option"
        exit 198
        {c )-}
      - if "`generate'" != "" {c -(}
      = if "" != "" {c -(}
        local ct1: word count `varlist'
        local save "`varlist'"
        local 0 "`generate'"
        capture syntax newvarlist
        if _rc {c -(}
        di as err "generate(newvarlist) invalid"
        exit _rc
        {c )-}
        local generate "`varlist'"
        local varlist "`save'"
        local ct2: word count `generate'
        if `ct1' != `ct2' {c -(}
        di as err "number of variables in varlist must equal"
        di as err "number of variables in generate(newvarlist)"
        exit 198
        {c )-}
        {c )-}
      - local m 1
      - if `"`ignore'"' == "" {c -(}
      = if `""' == "" {c -(}
      - local ignore ""
      - {c )-}
      - local l = length(`"`ignore'"')
      = local l = length(`""')
      - while `m' <= `l' {c -(}
      = while 1 <= 0 {c -(}
        local char`m' = substr(`"`ignore'"', `m', 1)
        if substr(`"`ignore'"', `m', 1) == " " {c -(}
        local char`m' " "
        {c )-}
        local m = `m' + 1
        {c )-}
      - if "`generate'" != "" {c -(}
      = if "" != "" {c -(}
        tokenize `varlist'
        local flag 0
        local jj 1
        local yy 1
        local varno 0
        while "`1'" != "" {c -(}
        local varno = `varno' + 1
        capture confirm string variable `1'
        if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "generate"
        local newvar : word `varno' of `generate'
        mac shift
        {c )-}
        else {c -(}
        tempvar temp
        qui gen str1 `temp' = ""
        qui replace `temp' = `1'
        qui compress `temp'
        while `"`char`jj''"' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
        qui replace `temp' = trim(`temp')
        qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        local r = r(N)
        qui count if real(`temp') >= .
        local s = r(N)
        if `r' != `s' {c -(}
        local flag 1
        {c )-}
        if `flag' == 1 & "`force'" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "generate"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "generate"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
        else {c -(}
        tempvar OLDVAR ind con
        qui gen str1 `OLDVAR' = ""
        qui replace `OLDVAR' = `1'
        qui gen byte `ind' = .
        qui gen byte `con' = 0
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`OLDVAR', `"`t'"') != 0
        qui count if `ind' == 1
        if r(N) > 0 {c -(}
        if `"`t'"' == " " {c -(}
        local b `"`b' space"'
        {c )-}
        else {c -(}
        local b `"`b' `t'"'
        {c )-}
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`OLDVAR', `"`t'"') != 0
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `OLDVAR' = subinstr(`OLDVAR', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        local newvar : word `varno' of `generate'
        local vl: variable label `1'
        if "`float'" == "" {c -(}
        qui gen double `newvar' = real(`OLDVAR')
        {c )-}
        else {c -(}
        qui gen float `newvar' = real(`OLDVAR')
        {c )-}
        move `newvar' `1'
        move `1' `newvar'
        Charcopy `1' `newvar'
        label variable `newvar' `"`vl'"'
        char `newvar'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) > 0 {c -(}
        qui replace `newvar' = `newvar'/100
        {c )-}
        qui compress `newvar'
        local type : type `newvar'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; `newvar' " as res "generated " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1': characters" as res `"`b'"' as txt " removed; `newvar' " as res "generated " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; `newvar' " as res "generated " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        drop `ind' `con' `OLDVAR'
        local jj 1
        local yy 1
        mac shift
        {c )-}
        drop `temp'
        {c )-}
        {c )-}
        {c )-}
      - else if "`replace'" != "" {c -(}
      = else if "replace" != "" {c -(}
      - tokenize `varlist'
      = tokenize v1 indicator_name topic_name indicator_desc indicator_type input_vars input_meta map_indicator code_custom indicator_required indicator_validation date_added last_modified
      - tempvar ind con
      - qui gen byte `con' = 0
      = qui gen byte __000001 = 0
      - qui gen byte `ind' = .
      = qui gen byte __000000 = .
      - local flag 0
      - local yy 1
      - local jj 1
      - while "`1'" != "" {c -(}
      = while "v1" != "" {c -(}
      - capture confirm string variable `1'
      = capture confirm string variable v1
      - if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
      - else {c -(}
      - tempvar temp
      - qui gen str1 `temp' = ""
      = qui gen str1 __000002 = ""
      - qui replace `temp' = `1'
      = qui replace __000002 = v1
      - qui compress `temp'
      = qui compress __000002
      - while `"`char`jj''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
      - qui replace `temp' = trim(`temp')
      = qui replace __000002 = trim(__000002)
      - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
      = qui count if __000002=="" | __000002=="." | (length(__000002)==2 & inrange(__000002,".a",".z"))
      - local r = r(N)
      - qui count if real(`temp') >= .
      = qui count if real(__000002) >= .
      - local s = r(N)
      - if `r' != `s' {c -(}
      = if 0 != 0 {c -(}
        local flag 1
        {c )-}
      - if `flag' == 1 & "`force'" == "" {c -(}
      = if 0 == 1 & "" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
      - else {c -(}
      - while `"`char`yy''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
      - local c Characters removed were: `b'
      = local c Characters removed were: 
      - tempvar switch
      - local type = cond("`float'" == "float", "float", "double")
      = local type = cond("" == "float", "float", "double")
      - qui gen `type' `switch' = real(`1')
      = qui gen double __000003 = real(v1)
      - char rename `1' `switch'
      = char rename v1 __000003
      - move `switch' `1'
      = move __000003 v1
      - local vl: variable label `1'
      = local vl: variable label v1
      - drop `1'
      = drop v1
      - if "`float'" == "" {c -(}
      = if "" == "" {c -(}
      - qui gen double `1' = `switch'
      = qui gen double v1 = __000003
      - {c )-}
      - else {c -(}
        qui gen float `1' = `switch'
        {c )-}
      - move `1' `switch'
      = move v1 __000003
      - label variable `1' `"`vl'"'
      = label variable v1 `""'
        {hline 75} begin label {hline}
        - version 10.0
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {c -(}
        = if (strpos("variable", "val") > 0 ) {c -(}
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {c -(}
          local fix ", nofix"
          {c )-}
          gettoken var rest : anything
          while `"`rest'"' != "" {c -(}
          gettoken lab rest : rest
          local label "`lab'"
          {c )-}
          local vlist : list anything - lab
          if "`lab'" == "." {c -(}
          local lab ""
          {c )-}
          foreach var of varlist `vlist' {c -(}
          _label `val' `var' `lab' `fix'
          {c )-}
          {c )-}
        - else {c -(}
        - _label `macval(0)'
        = _label variable v1 `""'
        - {c )-}
        {hline 77} end label {hline}
      - char rename `switch' `1'
      = char rename __000003 v1
      - char `1'[destring] `c'
      = char v1[destring] Characters removed were:
      - qui count if `con' == 1
      = qui count if __000001 == 1
      - if "`percent'" != "" & r(N) != 0 {c -(}
      = if "" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
      - qui replace `con' = 0
      = qui replace __000001 = 0
      - qui compress `1'
      = qui compress v1
      - local type : type `1'
      = local type : type v1
      - if "`force'" != "" {c -(}
      = if "" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
      - if `"`b'"' != "" {c -(}
      = if `""' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
      - else if `"`b'"' == "" & "`force'" == "" {c -(}
      = else if `""' == "" & "" == "" {c -(}
      - di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
      = di as txt "v1 has all " "characters numeric; " as res "replaced " as txt "as " as res "int"
      - {c )-}
      - if `s' != 0 {c -(}
      = if 0 != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
      - local b ""
      - local c ""
      - local jj 1
      - local yy 1
      - drop `switch'
      = drop __000003
      - mac shift
      - {c )-}
      - drop `temp'
      = drop __000002
      - {c )-}
      - {c )-}
      - while "`1'" != "" {c -(}
      = while "indicator_name" != "" {c -(}
      - capture confirm string variable `1'
      = capture confirm string variable indicator_name
      - if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
      - else {c -(}
      - tempvar temp
      - qui gen str1 `temp' = ""
      = qui gen str1 __000004 = ""
      - qui replace `temp' = `1'
      = qui replace __000004 = indicator_name
      - qui compress `temp'
      = qui compress __000004
      - while `"`char`jj''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
      - qui replace `temp' = trim(`temp')
      = qui replace __000004 = trim(__000004)
      - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
      = qui count if __000004=="" | __000004=="." | (length(__000004)==2 & inrange(__000004,".a",".z"))
      - local r = r(N)
      - qui count if real(`temp') >= .
      = qui count if real(__000004) >= .
      - local s = r(N)
      - if `r' != `s' {c -(}
      = if 0 != 53 {c -(}
      - local flag 1
      - {c )-}
      - if `flag' == 1 & "`force'" == "" {c -(}
      = if 1 == 1 & "" == "" {c -(}
      - if `"`ignore'"' != "" {c -(}
      = if `""' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
      - else {c -(}
      - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
      = di as txt "indicator_name contains " "nonnumeric characters; no " as res "replace"
      - {c )-}
      - local flag 0
      - local jj 1
      - mac shift
      - {c )-}
      - else {c -(}
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        tempvar switch
        local type = cond("`float'" == "float", "float", "double")
        qui gen `type' `switch' = real(`1')
        char rename `1' `switch'
        move `switch' `1'
        local vl: variable label `1'
        drop `1'
        if "`float'" == "" {c -(}
        qui gen double `1' = `switch'
        {c )-}
        else {c -(}
        qui gen float `1' = `switch'
        {c )-}
        move `1' `switch'
        label variable `1' `"`vl'"'
        char rename `switch' `1'
        char `1'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
        qui replace `con' = 0
        qui compress `1'
        local type : type `1'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        local jj 1
        local yy 1
        drop `switch'
        mac shift
        {c )-}
      - drop `temp'
      = drop __000004
      - {c )-}
      - {c )-}
      - while "`1'" != "" {c -(}
      = while "topic_name" != "" {c -(}
      - capture confirm string variable `1'
      = capture confirm string variable topic_name
      - if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
      - else {c -(}
      - tempvar temp
      - qui gen str1 `temp' = ""
      = qui gen str1 __000005 = ""
      - qui replace `temp' = `1'
      = qui replace __000005 = topic_name
      - qui compress `temp'
      = qui compress __000005
      - while `"`char`jj''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
      - qui replace `temp' = trim(`temp')
      = qui replace __000005 = trim(__000005)
      - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
      = qui count if __000005=="" | __000005=="." | (length(__000005)==2 & inrange(__000005,".a",".z"))
      - local r = r(N)
      - qui count if real(`temp') >= .
      = qui count if real(__000005) >= .
      - local s = r(N)
      - if `r' != `s' {c -(}
      = if 0 != 53 {c -(}
      - local flag 1
      - {c )-}
      - if `flag' == 1 & "`force'" == "" {c -(}
      = if 1 == 1 & "" == "" {c -(}
      - if `"`ignore'"' != "" {c -(}
      = if `""' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
      - else {c -(}
      - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
      = di as txt "topic_name contains " "nonnumeric characters; no " as res "replace"
      - {c )-}
      - local flag 0
      - local jj 1
      - mac shift
      - {c )-}
      - else {c -(}
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        tempvar switch
        local type = cond("`float'" == "float", "float", "double")
        qui gen `type' `switch' = real(`1')
        char rename `1' `switch'
        move `switch' `1'
        local vl: variable label `1'
        drop `1'
        if "`float'" == "" {c -(}
        qui gen double `1' = `switch'
        {c )-}
        else {c -(}
        qui gen float `1' = `switch'
        {c )-}
        move `1' `switch'
        label variable `1' `"`vl'"'
        char rename `switch' `1'
        char `1'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
        qui replace `con' = 0
        qui compress `1'
        local type : type `1'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        local jj 1
        local yy 1
        drop `switch'
        mac shift
        {c )-}
      - drop `temp'
      = drop __000005
      - {c )-}
      - {c )-}
      - while "`1'" != "" {c -(}
      = while "indicator_desc" != "" {c -(}
      - capture confirm string variable `1'
      = capture confirm string variable indicator_desc
      - if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
      - else {c -(}
      - tempvar temp
      - qui gen str1 `temp' = ""
      = qui gen str1 __000006 = ""
      - qui replace `temp' = `1'
      = qui replace __000006 = indicator_desc
      - qui compress `temp'
      = qui compress __000006
      - while `"`char`jj''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
      - qui replace `temp' = trim(`temp')
      = qui replace __000006 = trim(__000006)
      - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
      = qui count if __000006=="" | __000006=="." | (length(__000006)==2 & inrange(__000006,".a",".z"))
      - local r = r(N)
      - qui count if real(`temp') >= .
      = qui count if real(__000006) >= .
      - local s = r(N)
      - if `r' != `s' {c -(}
      = if 53 != 53 {c -(}
        local flag 1
        {c )-}
      - if `flag' == 1 & "`force'" == "" {c -(}
      = if 0 == 1 & "" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
      - else {c -(}
      - while `"`char`yy''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
      - local c Characters removed were: `b'
      = local c Characters removed were: 
      - tempvar switch
      - local type = cond("`float'" == "float", "float", "double")
      = local type = cond("" == "float", "float", "double")
      - qui gen `type' `switch' = real(`1')
      = qui gen double __000007 = real(indicator_desc)
      - char rename `1' `switch'
      = char rename indicator_desc __000007
      - move `switch' `1'
      = move __000007 indicator_desc
      - local vl: variable label `1'
      = local vl: variable label indicator_desc
      - drop `1'
      = drop indicator_desc
      - if "`float'" == "" {c -(}
      = if "" == "" {c -(}
      - qui gen double `1' = `switch'
      = qui gen double indicator_desc = __000007
      - {c )-}
      - else {c -(}
        qui gen float `1' = `switch'
        {c )-}
      - move `1' `switch'
      = move indicator_desc __000007
      - label variable `1' `"`vl'"'
      = label variable indicator_desc `""'
        {hline 75} begin label {hline}
        - version 10.0
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {c -(}
        = if (strpos("variable", "val") > 0 ) {c -(}
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {c -(}
          local fix ", nofix"
          {c )-}
          gettoken var rest : anything
          while `"`rest'"' != "" {c -(}
          gettoken lab rest : rest
          local label "`lab'"
          {c )-}
          local vlist : list anything - lab
          if "`lab'" == "." {c -(}
          local lab ""
          {c )-}
          foreach var of varlist `vlist' {c -(}
          _label `val' `var' `lab' `fix'
          {c )-}
          {c )-}
        - else {c -(}
        - _label `macval(0)'
        = _label variable indicator_desc `""'
        - {c )-}
        {hline 77} end label {hline}
      - char rename `switch' `1'
      = char rename __000007 indicator_desc
      - char `1'[destring] `c'
      = char indicator_desc[destring] Characters removed were:
      - qui count if `con' == 1
      = qui count if __000001 == 1
      - if "`percent'" != "" & r(N) != 0 {c -(}
      = if "" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
      - qui replace `con' = 0
      = qui replace __000001 = 0
      - qui compress `1'
      = qui compress indicator_desc
      - local type : type `1'
      = local type : type indicator_desc
      - if "`force'" != "" {c -(}
      = if "" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
      - if `"`b'"' != "" {c -(}
      = if `""' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
      - else if `"`b'"' == "" & "`force'" == "" {c -(}
      = else if `""' == "" & "" == "" {c -(}
      - di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
      = di as txt "indicator_desc has all " "characters numeric; " as res "replaced " as txt "as " as res "byte"
      - {c )-}
      - if `s' != 0 {c -(}
      = if 53 != 0 {c -(}
      - local valmsg = cond(`s' > 1, "values", "value")
      = local valmsg = cond(53 > 1, "values", "value")
      - di as txt "(`s' missing `valmsg' generated)"
      = di as txt "(53 missing values generated)"
      - {c )-}
      - local b ""
      - local c ""
      - local jj 1
      - local yy 1
      - drop `switch'
      = drop __000007
      - mac shift
      - {c )-}
      - drop `temp'
      = drop __000006
      - {c )-}
      - {c )-}
      - while "`1'" != "" {c -(}
      = while "indicator_type" != "" {c -(}
      - capture confirm string variable `1'
      = capture confirm string variable indicator_type
      - if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
      - else {c -(}
      - tempvar temp
      - qui gen str1 `temp' = ""
      = qui gen str1 __000008 = ""
      - qui replace `temp' = `1'
      = qui replace __000008 = indicator_type
      - qui compress `temp'
      = qui compress __000008
      - while `"`char`jj''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
      - qui replace `temp' = trim(`temp')
      = qui replace __000008 = trim(__000008)
      - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
      = qui count if __000008=="" | __000008=="." | (length(__000008)==2 & inrange(__000008,".a",".z"))
      - local r = r(N)
      - qui count if real(`temp') >= .
      = qui count if real(__000008) >= .
      - local s = r(N)
      - if `r' != `s' {c -(}
      = if 0 != 53 {c -(}
      - local flag 1
      - {c )-}
      - if `flag' == 1 & "`force'" == "" {c -(}
      = if 1 == 1 & "" == "" {c -(}
      - if `"`ignore'"' != "" {c -(}
      = if `""' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
      - else {c -(}
      - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
      = di as txt "indicator_type contains " "nonnumeric characters; no " as res "replace"
      - {c )-}
      - local flag 0
      - local jj 1
      - mac shift
      - {c )-}
      - else {c -(}
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        tempvar switch
        local type = cond("`float'" == "float", "float", "double")
        qui gen `type' `switch' = real(`1')
        char rename `1' `switch'
        move `switch' `1'
        local vl: variable label `1'
        drop `1'
        if "`float'" == "" {c -(}
        qui gen double `1' = `switch'
        {c )-}
        else {c -(}
        qui gen float `1' = `switch'
        {c )-}
        move `1' `switch'
        label variable `1' `"`vl'"'
        char rename `switch' `1'
        char `1'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
        qui replace `con' = 0
        qui compress `1'
        local type : type `1'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        local jj 1
        local yy 1
        drop `switch'
        mac shift
        {c )-}
      - drop `temp'
      = drop __000008
      - {c )-}
      - {c )-}
      - while "`1'" != "" {c -(}
      = while "input_vars" != "" {c -(}
      - capture confirm string variable `1'
      = capture confirm string variable input_vars
      - if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
      - else {c -(}
      - tempvar temp
      - qui gen str1 `temp' = ""
      = qui gen str1 __000009 = ""
      - qui replace `temp' = `1'
      = qui replace __000009 = input_vars
      - qui compress `temp'
      = qui compress __000009
      - while `"`char`jj''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
      - qui replace `temp' = trim(`temp')
      = qui replace __000009 = trim(__000009)
      - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
      = qui count if __000009=="" | __000009=="." | (length(__000009)==2 & inrange(__000009,".a",".z"))
      - local r = r(N)
      - qui count if real(`temp') >= .
      = qui count if real(__000009) >= .
      - local s = r(N)
      - if `r' != `s' {c -(}
      = if 9 != 53 {c -(}
      - local flag 1
      - {c )-}
      - if `flag' == 1 & "`force'" == "" {c -(}
      = if 1 == 1 & "" == "" {c -(}
      - if `"`ignore'"' != "" {c -(}
      = if `""' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
      - else {c -(}
      - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
      = di as txt "input_vars contains " "nonnumeric characters; no " as res "replace"
      - {c )-}
      - local flag 0
      - local jj 1
      - mac shift
      - {c )-}
      - else {c -(}
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        tempvar switch
        local type = cond("`float'" == "float", "float", "double")
        qui gen `type' `switch' = real(`1')
        char rename `1' `switch'
        move `switch' `1'
        local vl: variable label `1'
        drop `1'
        if "`float'" == "" {c -(}
        qui gen double `1' = `switch'
        {c )-}
        else {c -(}
        qui gen float `1' = `switch'
        {c )-}
        move `1' `switch'
        label variable `1' `"`vl'"'
        char rename `switch' `1'
        char `1'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
        qui replace `con' = 0
        qui compress `1'
        local type : type `1'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        local jj 1
        local yy 1
        drop `switch'
        mac shift
        {c )-}
      - drop `temp'
      = drop __000009
      - {c )-}
      - {c )-}
      - while "`1'" != "" {c -(}
      = while "input_meta" != "" {c -(}
      - capture confirm string variable `1'
      = capture confirm string variable input_meta
      - if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
      - else {c -(}
      - tempvar temp
      - qui gen str1 `temp' = ""
      = qui gen str1 __00000A = ""
      - qui replace `temp' = `1'
      = qui replace __00000A = input_meta
      - qui compress `temp'
      = qui compress __00000A
      - while `"`char`jj''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
      - qui replace `temp' = trim(`temp')
      = qui replace __00000A = trim(__00000A)
      - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
      = qui count if __00000A=="" | __00000A=="." | (length(__00000A)==2 & inrange(__00000A,".a",".z"))
      - local r = r(N)
      - qui count if real(`temp') >= .
      = qui count if real(__00000A) >= .
      - local s = r(N)
      - if `r' != `s' {c -(}
      = if 42 != 53 {c -(}
      - local flag 1
      - {c )-}
      - if `flag' == 1 & "`force'" == "" {c -(}
      = if 1 == 1 & "" == "" {c -(}
      - if `"`ignore'"' != "" {c -(}
      = if `""' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
      - else {c -(}
      - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
      = di as txt "input_meta contains " "nonnumeric characters; no " as res "replace"
      - {c )-}
      - local flag 0
      - local jj 1
      - mac shift
      - {c )-}
      - else {c -(}
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        tempvar switch
        local type = cond("`float'" == "float", "float", "double")
        qui gen `type' `switch' = real(`1')
        char rename `1' `switch'
        move `switch' `1'
        local vl: variable label `1'
        drop `1'
        if "`float'" == "" {c -(}
        qui gen double `1' = `switch'
        {c )-}
        else {c -(}
        qui gen float `1' = `switch'
        {c )-}
        move `1' `switch'
        label variable `1' `"`vl'"'
        char rename `switch' `1'
        char `1'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
        qui replace `con' = 0
        qui compress `1'
        local type : type `1'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        local jj 1
        local yy 1
        drop `switch'
        mac shift
        {c )-}
      - drop `temp'
      = drop __00000A
      - {c )-}
      - {c )-}
      - while "`1'" != "" {c -(}
      = while "map_indicator" != "" {c -(}
      - capture confirm string variable `1'
      = capture confirm string variable map_indicator
      - if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
      - else {c -(}
      - tempvar temp
      - qui gen str1 `temp' = ""
      = qui gen str1 __00000B = ""
      - qui replace `temp' = `1'
      = qui replace __00000B = map_indicator
      - qui compress `temp'
      = qui compress __00000B
      - while `"`char`jj''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
      - qui replace `temp' = trim(`temp')
      = qui replace __00000B = trim(__00000B)
      - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
      = qui count if __00000B=="" | __00000B=="." | (length(__00000B)==2 & inrange(__00000B,".a",".z"))
      - local r = r(N)
      - qui count if real(`temp') >= .
      = qui count if real(__00000B) >= .
      - local s = r(N)
      - if `r' != `s' {c -(}
      = if 0 != 0 {c -(}
        local flag 1
        {c )-}
      - if `flag' == 1 & "`force'" == "" {c -(}
      = if 0 == 1 & "" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
      - else {c -(}
      - while `"`char`yy''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
      - local c Characters removed were: `b'
      = local c Characters removed were: 
      - tempvar switch
      - local type = cond("`float'" == "float", "float", "double")
      = local type = cond("" == "float", "float", "double")
      - qui gen `type' `switch' = real(`1')
      = qui gen double __00000C = real(map_indicator)
      - char rename `1' `switch'
      = char rename map_indicator __00000C
      - move `switch' `1'
      = move __00000C map_indicator
      - local vl: variable label `1'
      = local vl: variable label map_indicator
      - drop `1'
      = drop map_indicator
      - if "`float'" == "" {c -(}
      = if "" == "" {c -(}
      - qui gen double `1' = `switch'
      = qui gen double map_indicator = __00000C
      - {c )-}
      - else {c -(}
        qui gen float `1' = `switch'
        {c )-}
      - move `1' `switch'
      = move map_indicator __00000C
      - label variable `1' `"`vl'"'
      = label variable map_indicator `""'
        {hline 75} begin label {hline}
        - version 10.0
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {c -(}
        = if (strpos("variable", "val") > 0 ) {c -(}
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {c -(}
          local fix ", nofix"
          {c )-}
          gettoken var rest : anything
          while `"`rest'"' != "" {c -(}
          gettoken lab rest : rest
          local label "`lab'"
          {c )-}
          local vlist : list anything - lab
          if "`lab'" == "." {c -(}
          local lab ""
          {c )-}
          foreach var of varlist `vlist' {c -(}
          _label `val' `var' `lab' `fix'
          {c )-}
          {c )-}
        - else {c -(}
        - _label `macval(0)'
        = _label variable map_indicator `""'
        - {c )-}
        {hline 77} end label {hline}
      - char rename `switch' `1'
      = char rename __00000C map_indicator
      - char `1'[destring] `c'
      = char map_indicator[destring] Characters removed were:
      - qui count if `con' == 1
      = qui count if __000001 == 1
      - if "`percent'" != "" & r(N) != 0 {c -(}
      = if "" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
      - qui replace `con' = 0
      = qui replace __000001 = 0
      - qui compress `1'
      = qui compress map_indicator
      - local type : type `1'
      = local type : type map_indicator
      - if "`force'" != "" {c -(}
      = if "" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
      - if `"`b'"' != "" {c -(}
      = if `""' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
      - else if `"`b'"' == "" & "`force'" == "" {c -(}
      = else if `""' == "" & "" == "" {c -(}
      - di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
      = di as txt "map_indicator has all " "characters numeric; " as res "replaced " as txt "as " as res "byte"
      - {c )-}
      - if `s' != 0 {c -(}
      = if 0 != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
      - local b ""
      - local c ""
      - local jj 1
      - local yy 1
      - drop `switch'
      = drop __00000C
      - mac shift
      - {c )-}
      - drop `temp'
      = drop __00000B
      - {c )-}
      - {c )-}
      - while "`1'" != "" {c -(}
      = while "code_custom" != "" {c -(}
      - capture confirm string variable `1'
      = capture confirm string variable code_custom
      - if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
      - else {c -(}
      - tempvar temp
      - qui gen str1 `temp' = ""
      = qui gen str1 __00000D = ""
      - qui replace `temp' = `1'
      = qui replace __00000D = code_custom
      - qui compress `temp'
      = qui compress __00000D
      - while `"`char`jj''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
      - qui replace `temp' = trim(`temp')
      = qui replace __00000D = trim(__00000D)
      - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
      = qui count if __00000D=="" | __00000D=="." | (length(__00000D)==2 & inrange(__00000D,".a",".z"))
      - local r = r(N)
      - qui count if real(`temp') >= .
      = qui count if real(__00000D) >= .
      - local s = r(N)
      - if `r' != `s' {c -(}
      = if 0 != 0 {c -(}
        local flag 1
        {c )-}
      - if `flag' == 1 & "`force'" == "" {c -(}
      = if 0 == 1 & "" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
      - else {c -(}
      - while `"`char`yy''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
      - local c Characters removed were: `b'
      = local c Characters removed were: 
      - tempvar switch
      - local type = cond("`float'" == "float", "float", "double")
      = local type = cond("" == "float", "float", "double")
      - qui gen `type' `switch' = real(`1')
      = qui gen double __00000E = real(code_custom)
      - char rename `1' `switch'
      = char rename code_custom __00000E
      - move `switch' `1'
      = move __00000E code_custom
      - local vl: variable label `1'
      = local vl: variable label code_custom
      - drop `1'
      = drop code_custom
      - if "`float'" == "" {c -(}
      = if "" == "" {c -(}
      - qui gen double `1' = `switch'
      = qui gen double code_custom = __00000E
      - {c )-}
      - else {c -(}
        qui gen float `1' = `switch'
        {c )-}
      - move `1' `switch'
      = move code_custom __00000E
      - label variable `1' `"`vl'"'
      = label variable code_custom `""'
        {hline 75} begin label {hline}
        - version 10.0
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {c -(}
        = if (strpos("variable", "val") > 0 ) {c -(}
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {c -(}
          local fix ", nofix"
          {c )-}
          gettoken var rest : anything
          while `"`rest'"' != "" {c -(}
          gettoken lab rest : rest
          local label "`lab'"
          {c )-}
          local vlist : list anything - lab
          if "`lab'" == "." {c -(}
          local lab ""
          {c )-}
          foreach var of varlist `vlist' {c -(}
          _label `val' `var' `lab' `fix'
          {c )-}
          {c )-}
        - else {c -(}
        - _label `macval(0)'
        = _label variable code_custom `""'
        - {c )-}
        {hline 77} end label {hline}
      - char rename `switch' `1'
      = char rename __00000E code_custom
      - char `1'[destring] `c'
      = char code_custom[destring] Characters removed were:
      - qui count if `con' == 1
      = qui count if __000001 == 1
      - if "`percent'" != "" & r(N) != 0 {c -(}
      = if "" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
      - qui replace `con' = 0
      = qui replace __000001 = 0
      - qui compress `1'
      = qui compress code_custom
      - local type : type `1'
      = local type : type code_custom
      - if "`force'" != "" {c -(}
      = if "" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
      - if `"`b'"' != "" {c -(}
      = if `""' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
      - else if `"`b'"' == "" & "`force'" == "" {c -(}
      = else if `""' == "" & "" == "" {c -(}
      - di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
      = di as txt "code_custom has all " "characters numeric; " as res "replaced " as txt "as " as res "byte"
      - {c )-}
      - if `s' != 0 {c -(}
      = if 0 != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
      - local b ""
      - local c ""
      - local jj 1
      - local yy 1
      - drop `switch'
      = drop __00000E
      - mac shift
      - {c )-}
      - drop `temp'
      = drop __00000D
      - {c )-}
      - {c )-}
      - while "`1'" != "" {c -(}
      = while "indicator_required" != "" {c -(}
      - capture confirm string variable `1'
      = capture confirm string variable indicator_required
      - if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
      - else {c -(}
      - tempvar temp
      - qui gen str1 `temp' = ""
      = qui gen str1 __00000F = ""
      - qui replace `temp' = `1'
      = qui replace __00000F = indicator_required
      - qui compress `temp'
      = qui compress __00000F
      - while `"`char`jj''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
      - qui replace `temp' = trim(`temp')
      = qui replace __00000F = trim(__00000F)
      - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
      = qui count if __00000F=="" | __00000F=="." | (length(__00000F)==2 & inrange(__00000F,".a",".z"))
      - local r = r(N)
      - qui count if real(`temp') >= .
      = qui count if real(__00000F) >= .
      - local s = r(N)
      - if `r' != `s' {c -(}
      = if 0 != 0 {c -(}
        local flag 1
        {c )-}
      - if `flag' == 1 & "`force'" == "" {c -(}
      = if 0 == 1 & "" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
      - else {c -(}
      - while `"`char`yy''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
      - local c Characters removed were: `b'
      = local c Characters removed were: 
      - tempvar switch
      - local type = cond("`float'" == "float", "float", "double")
      = local type = cond("" == "float", "float", "double")
      - qui gen `type' `switch' = real(`1')
      = qui gen double __00000G = real(indicator_required)
      - char rename `1' `switch'
      = char rename indicator_required __00000G
      - move `switch' `1'
      = move __00000G indicator_required
      - local vl: variable label `1'
      = local vl: variable label indicator_required
      - drop `1'
      = drop indicator_required
      - if "`float'" == "" {c -(}
      = if "" == "" {c -(}
      - qui gen double `1' = `switch'
      = qui gen double indicator_required = __00000G
      - {c )-}
      - else {c -(}
        qui gen float `1' = `switch'
        {c )-}
      - move `1' `switch'
      = move indicator_required __00000G
      - label variable `1' `"`vl'"'
      = label variable indicator_required `""'
        {hline 75} begin label {hline}
        - version 10.0
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {c -(}
        = if (strpos("variable", "val") > 0 ) {c -(}
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {c -(}
          local fix ", nofix"
          {c )-}
          gettoken var rest : anything
          while `"`rest'"' != "" {c -(}
          gettoken lab rest : rest
          local label "`lab'"
          {c )-}
          local vlist : list anything - lab
          if "`lab'" == "." {c -(}
          local lab ""
          {c )-}
          foreach var of varlist `vlist' {c -(}
          _label `val' `var' `lab' `fix'
          {c )-}
          {c )-}
        - else {c -(}
        - _label `macval(0)'
        = _label variable indicator_required `""'
        - {c )-}
        {hline 77} end label {hline}
      - char rename `switch' `1'
      = char rename __00000G indicator_required
      - char `1'[destring] `c'
      = char indicator_required[destring] Characters removed were:
      - qui count if `con' == 1
      = qui count if __000001 == 1
      - if "`percent'" != "" & r(N) != 0 {c -(}
      = if "" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
      - qui replace `con' = 0
      = qui replace __000001 = 0
      - qui compress `1'
      = qui compress indicator_required
      - local type : type `1'
      = local type : type indicator_required
      - if "`force'" != "" {c -(}
      = if "" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
      - if `"`b'"' != "" {c -(}
      = if `""' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
      - else if `"`b'"' == "" & "`force'" == "" {c -(}
      = else if `""' == "" & "" == "" {c -(}
      - di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
      = di as txt "indicator_required has all " "characters numeric; " as res "replaced " as txt "as " as res "byte"
      - {c )-}
      - if `s' != 0 {c -(}
      = if 0 != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
      - local b ""
      - local c ""
      - local jj 1
      - local yy 1
      - drop `switch'
      = drop __00000G
      - mac shift
      - {c )-}
      - drop `temp'
      = drop __00000F
      - {c )-}
      - {c )-}
      - while "`1'" != "" {c -(}
      = while "indicator_validation" != "" {c -(}
      - capture confirm string variable `1'
      = capture confirm string variable indicator_validation
      - if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
      - else {c -(}
      - tempvar temp
      - qui gen str1 `temp' = ""
      = qui gen str1 __00000H = ""
      - qui replace `temp' = `1'
      = qui replace __00000H = indicator_validation
      - qui compress `temp'
      = qui compress __00000H
      - while `"`char`jj''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
      - qui replace `temp' = trim(`temp')
      = qui replace __00000H = trim(__00000H)
      - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
      = qui count if __00000H=="" | __00000H=="." | (length(__00000H)==2 & inrange(__00000H,".a",".z"))
      - local r = r(N)
      - qui count if real(`temp') >= .
      = qui count if real(__00000H) >= .
      - local s = r(N)
      - if `r' != `s' {c -(}
      = if 53 != 53 {c -(}
        local flag 1
        {c )-}
      - if `flag' == 1 & "`force'" == "" {c -(}
      = if 0 == 1 & "" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
      - else {c -(}
      - while `"`char`yy''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
      - local c Characters removed were: `b'
      = local c Characters removed were: 
      - tempvar switch
      - local type = cond("`float'" == "float", "float", "double")
      = local type = cond("" == "float", "float", "double")
      - qui gen `type' `switch' = real(`1')
      = qui gen double __00000I = real(indicator_validation)
      - char rename `1' `switch'
      = char rename indicator_validation __00000I
      - move `switch' `1'
      = move __00000I indicator_validation
      - local vl: variable label `1'
      = local vl: variable label indicator_validation
      - drop `1'
      = drop indicator_validation
      - if "`float'" == "" {c -(}
      = if "" == "" {c -(}
      - qui gen double `1' = `switch'
      = qui gen double indicator_validation = __00000I
      - {c )-}
      - else {c -(}
        qui gen float `1' = `switch'
        {c )-}
      - move `1' `switch'
      = move indicator_validation __00000I
      - label variable `1' `"`vl'"'
      = label variable indicator_validation `""'
        {hline 75} begin label {hline}
        - version 10.0
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {c -(}
        = if (strpos("variable", "val") > 0 ) {c -(}
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {c -(}
          local fix ", nofix"
          {c )-}
          gettoken var rest : anything
          while `"`rest'"' != "" {c -(}
          gettoken lab rest : rest
          local label "`lab'"
          {c )-}
          local vlist : list anything - lab
          if "`lab'" == "." {c -(}
          local lab ""
          {c )-}
          foreach var of varlist `vlist' {c -(}
          _label `val' `var' `lab' `fix'
          {c )-}
          {c )-}
        - else {c -(}
        - _label `macval(0)'
        = _label variable indicator_validation `""'
        - {c )-}
        {hline 77} end label {hline}
      - char rename `switch' `1'
      = char rename __00000I indicator_validation
      - char `1'[destring] `c'
      = char indicator_validation[destring] Characters removed were:
      - qui count if `con' == 1
      = qui count if __000001 == 1
      - if "`percent'" != "" & r(N) != 0 {c -(}
      = if "" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
      - qui replace `con' = 0
      = qui replace __000001 = 0
      - qui compress `1'
      = qui compress indicator_validation
      - local type : type `1'
      = local type : type indicator_validation
      - if "`force'" != "" {c -(}
      = if "" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
      - if `"`b'"' != "" {c -(}
      = if `""' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
      - else if `"`b'"' == "" & "`force'" == "" {c -(}
      = else if `""' == "" & "" == "" {c -(}
      - di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
      = di as txt "indicator_validation has all " "characters numeric; " as res "replaced " as txt "as " as res "byte"
      - {c )-}
      - if `s' != 0 {c -(}
      = if 53 != 0 {c -(}
      - local valmsg = cond(`s' > 1, "values", "value")
      = local valmsg = cond(53 > 1, "values", "value")
      - di as txt "(`s' missing `valmsg' generated)"
      = di as txt "(53 missing values generated)"
      - {c )-}
      - local b ""
      - local c ""
      - local jj 1
      - local yy 1
      - drop `switch'
      = drop __00000I
      - mac shift
      - {c )-}
      - drop `temp'
      = drop __00000H
      - {c )-}
      - {c )-}
      - while "`1'" != "" {c -(}
      = while "date_added" != "" {c -(}
      - capture confirm string variable `1'
      = capture confirm string variable date_added
      - if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
      - else {c -(}
      - tempvar temp
      - qui gen str1 `temp' = ""
      = qui gen str1 __00000J = ""
      - qui replace `temp' = `1'
      = qui replace __00000J = date_added
      - qui compress `temp'
      = qui compress __00000J
      - while `"`char`jj''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
      - qui replace `temp' = trim(`temp')
      = qui replace __00000J = trim(__00000J)
      - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
      = qui count if __00000J=="" | __00000J=="." | (length(__00000J)==2 & inrange(__00000J,".a",".z"))
      - local r = r(N)
      - qui count if real(`temp') >= .
      = qui count if real(__00000J) >= .
      - local s = r(N)
      - if `r' != `s' {c -(}
      = if 27 != 53 {c -(}
      - local flag 1
      - {c )-}
      - if `flag' == 1 & "`force'" == "" {c -(}
      = if 1 == 1 & "" == "" {c -(}
      - if `"`ignore'"' != "" {c -(}
      = if `""' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
      - else {c -(}
      - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
      = di as txt "date_added contains " "nonnumeric characters; no " as res "replace"
      - {c )-}
      - local flag 0
      - local jj 1
      - mac shift
      - {c )-}
      - else {c -(}
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        tempvar switch
        local type = cond("`float'" == "float", "float", "double")
        qui gen `type' `switch' = real(`1')
        char rename `1' `switch'
        move `switch' `1'
        local vl: variable label `1'
        drop `1'
        if "`float'" == "" {c -(}
        qui gen double `1' = `switch'
        {c )-}
        else {c -(}
        qui gen float `1' = `switch'
        {c )-}
        move `1' `switch'
        label variable `1' `"`vl'"'
        char rename `switch' `1'
        char `1'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
        qui replace `con' = 0
        qui compress `1'
        local type : type `1'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        local jj 1
        local yy 1
        drop `switch'
        mac shift
        {c )-}
      - drop `temp'
      = drop __00000J
      - {c )-}
      - {c )-}
      - while "`1'" != "" {c -(}
      = while "last_modified" != "" {c -(}
      - capture confirm string variable `1'
      = capture confirm string variable last_modified
      - if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
      - else {c -(}
      - tempvar temp
      - qui gen str1 `temp' = ""
      = qui gen str1 __00000K = ""
      - qui replace `temp' = `1'
      = qui replace __00000K = last_modified
      - qui compress `temp'
      = qui compress __00000K
      - while `"`char`jj''"' != "" {c -(}
      = while `""' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
      - if ("`dpcomma'" != "") {c -(}
      = if ("" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
      - qui replace `temp' = trim(`temp')
      = qui replace __00000K = trim(__00000K)
      - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
      = qui count if __00000K=="" | __00000K=="." | (length(__00000K)==2 & inrange(__00000K,".a",".z"))
      - local r = r(N)
      - qui count if real(`temp') >= .
      = qui count if real(__00000K) >= .
      - local s = r(N)
      - if `r' != `s' {c -(}
      = if 28 != 53 {c -(}
      - local flag 1
      - {c )-}
      - if `flag' == 1 & "`force'" == "" {c -(}
      = if 1 == 1 & "" == "" {c -(}
      - if `"`ignore'"' != "" {c -(}
      = if `""' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
      - else {c -(}
      - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
      = di as txt "last_modified contains " "nonnumeric characters; no " as res "replace"
      - {c )-}
      - local flag 0
      - local jj 1
      - mac shift
      - {c )-}
      - else {c -(}
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        tempvar switch
        local type = cond("`float'" == "float", "float", "double")
        qui gen `type' `switch' = real(`1')
        char rename `1' `switch'
        move `switch' `1'
        local vl: variable label `1'
        drop `1'
        if "`float'" == "" {c -(}
        qui gen double `1' = `switch'
        {c )-}
        else {c -(}
        qui gen float `1' = `switch'
        {c )-}
        move `1' `switch'
        label variable `1' `"`vl'"'
        char rename `switch' `1'
        char `1'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
        qui replace `con' = 0
        qui compress `1'
        local type : type `1'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        local jj 1
        local yy 1
        drop `switch'
        mac shift
        {c )-}
      - drop `temp'
      = drop __00000K
      - {c )-}
      - {c )-}
      - while "`1'" != "" {c -(}
      = while "" != "" {c -(}
        capture confirm string variable `1'
        if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
        else {c -(}
        tempvar temp
        qui gen str1 `temp' = ""
        qui replace `temp' = `1'
        qui compress `temp'
        while `"`char`jj''"' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
        qui replace `temp' = trim(`temp')
        qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        local r = r(N)
        qui count if real(`temp') >= .
        local s = r(N)
        if `r' != `s' {c -(}
        local flag 1
        {c )-}
        if `flag' == 1 & "`force'" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
        else {c -(}
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        tempvar switch
        local type = cond("`float'" == "float", "float", "double")
        qui gen `type' `switch' = real(`1')
        char rename `1' `switch'
        move `switch' `1'
        local vl: variable label `1'
        drop `1'
        if "`float'" == "" {c -(}
        qui gen double `1' = `switch'
        {c )-}
        else {c -(}
        qui gen float `1' = `switch'
        {c )-}
        move `1' `switch'
        label variable `1' `"`vl'"'
        char rename `switch' `1'
        char `1'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
        qui replace `con' = 0
        qui compress `1'
        local type : type `1'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        local jj 1
        local yy 1
        drop `switch'
        mac shift
        {c )-}
        drop `temp'
        {c )-}
        {c )-}
      - {c )-}
      {hline 76} end destring {hline}
    - if !mi("`keep_key'") keep_key
    = if !mi("") keep_key
    - {c )-}
    {hline 83} end get {hline}
  - levelsof indicator_name if map_indicator == 1, l(map_indicators) clean
    {hline 76} begin levelsof {hline}
    - version 9
    - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
    - if (_N==0) {c -(}
      error 2000
      {c )-}
    - if "`separate'" == "" local sep " "
    = if "" == "" local sep " "
    - else local sep "`separate'"
    = else local sep ""
    - if "`missing'" != "" local novarlist "novarlist"
    = if "" != "" local novarlist "novarlist"
    - marksample touse, strok `novarlist'
    = marksample touse, strok 
    - capture confirm numeric variable `varlist'
    = capture confirm numeric variable indicator_name
    - local isnum = _rc != 7
    - local maclen 0
    - if `isnum' {c -(}
    = if 0 {c -(}
      tempname Vals
      qui capture tab `varlist' if `touse', `missing' matrow(`Vals')
      if !(_rc) {c -(}
      local nvals = r(r)
      forval i = 1 / `nvals' {c -(}
      local val = `Vals'[`i',1]
      if `i' < `nvals' local vals "`vals'`val'`sep'"
      else local vals "`vals'`val'"
      {c )-}
      {c )-}
      else {c -(}
      tempvar select counter
      bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
      generate `counter' = sum(`select') * (`select' == 1)
      sort `counter'
      qui count if `counter' == 0
      local j = 1 + r(N)
      local nvals = _N
      forval i = `j' / `nvals' {c -(}
      local val = `varlist'[`i']
      if (`i' < `nvals') {c -(}
      local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""')
      local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""'
      {c )-}
      else {c -(}
      local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'""')
      local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'""'
      {c )-}
      local maclen = `maclen' + `:length local val' + `:length local sep'
      if ((`maclen' + `cmdlen') > `c(macrolen)') {c -(}
      di as err "macro length exceeded"
      exit 1000
      {c )-}
      else `cmd'
      {c )-}
      {c )-}
      {c )-}
    - else {c -(}
    - tempvar select counter
    - bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
    = bysort __000001 indicator_name : gen byte __000002 = (_n == 1) * __000001
    - generate `counter' = sum(`select') * (`select' == 1)
    = generate __000003 = sum(__000002) * (__000002 == 1)
    - sort `counter'
    = sort __000003
    - qui count if `counter' == 0
    = qui count if __000003 == 0
    - local j = 1 + r(N)
    - local nvals = _N
    - if "`clean'" != "" {c -(}
    = if "clean" != "" {c -(}
    - forval i = `j' / `nvals' {c -(}
    = forval i = 50 / 53 {c -(}
    - if (`i' < `nvals') {c -(}
    = if (50 < 53) {c -(}
    - local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""')
    = local cmdlen = length(`"local vals "`vals'`=`varlist'[`i']'`sep'""')
    - local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""'
    = local cmd `"local vals "`vals'`=`varlist'[`i']'`sep'""'
    - {c )-}
    - else {c -(}
      local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'""')
      local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'""'
      {c )-}
    - local maclen = `maclen' + length(`"`=`varlist'[`i']'"') + length(`"`sep'"')
    = local maclen = 0 + length(`"cooking_fuel"') + length(`" "')
    - if ((`maclen' + `cmdlen') > `c(macrolen)') {c -(}
    = if ((13 + 41) > 165200) {c -(}
      di as err "macro length exceeded"
      exit 1000
      {c )-}
    - else `cmd'
    = else local vals "cooking_fuel "
    - {c )-}
    - if (`i' < `nvals') {c -(}
    = if (51 < 53) {c -(}
    - local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""')
    = local cmdlen = length(`"local vals "`vals'`=`varlist'[`i']'`sep'""')
    - local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""'
    = local cmd `"local vals "`vals'`=`varlist'[`i']'`sep'""'
    - {c )-}
    - else {c -(}
      local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'""')
      local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'""'
      {c )-}
    - local maclen = `maclen' + length(`"`=`varlist'[`i']'"') + length(`"`sep'"')
    = local maclen = 13 + length(`"cooking_location"') + length(`" "')
    - if ((`maclen' + `cmdlen') > `c(macrolen)') {c -(}
    = if ((30 + 41) > 165200) {c -(}
      di as err "macro length exceeded"
      exit 1000
      {c )-}
    - else `cmd'
    = else local vals "cooking_fuel cooking_location "
    - {c )-}
    - if (`i' < `nvals') {c -(}
    = if (52 < 53) {c -(}
    - local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""')
    = local cmdlen = length(`"local vals "`vals'`=`varlist'[`i']'`sep'""')
    - local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""'
    = local cmd `"local vals "`vals'`=`varlist'[`i']'`sep'""'
    - {c )-}
    - else {c -(}
      local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'""')
      local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'""'
      {c )-}
    - local maclen = `maclen' + length(`"`=`varlist'[`i']'"') + length(`"`sep'"')
    = local maclen = 30 + length(`"cooking_type"') + length(`" "')
    - if ((`maclen' + `cmdlen') > `c(macrolen)') {c -(}
    = if ((43 + 41) > 165200) {c -(}
      di as err "macro length exceeded"
      exit 1000
      {c )-}
    - else `cmd'
    = else local vals "cooking_fuel cooking_location cooking_type "
    - {c )-}
    - if (`i' < `nvals') {c -(}
    = if (53 < 53) {c -(}
      local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""')
      local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""'
      {c )-}
    - else {c -(}
    - local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'""')
    = local cmdlen = length(`"local vals "`vals'`=`varlist'[`i']'""')
    - local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'""'
    = local cmd `"local vals "`vals'`=`varlist'[`i']'""'
    - {c )-}
    - local maclen = `maclen' + length(`"`=`varlist'[`i']'"') + length(`"`sep'"')
    = local maclen = 43 + length(`"cooking_type_chimney"') + length(`" "')
    - if ((`maclen' + `cmdlen') > `c(macrolen)') {c -(}
    = if ((64 + 36) > 165200) {c -(}
      di as err "macro length exceeded"
      exit 1000
      {c )-}
    - else `cmd'
    = else local vals "cooking_fuel cooking_location cooking_type cooking_type_chimney"
    - {c )-}
    - {c )-}
    - else {c -(}
      forval i = `j' / `nvals' {c -(}
      if (`i' < `nvals') {c -(}
      local cmdlen = length(`"local vals `"\`vals'\`"\`=\`varlist'[\`i']'"'\`sep'"'"')
      local cmd `"local vals `"\`vals'\`"\`=\`varlist'[\`i']'"'\`sep'"'"'
      {c )-}
      else {c -(}
      local cmdlen = length(`"local vals \`"\`vals'\`"\`=\`varlist'[\`i']'"'"'"')
      local cmd `"local vals \`"\`vals'\`"\`=\`varlist'[\`i']'"'"'"'
      {c )-}
      local maclen = `maclen' + length(`"`=`varlist'[`i']'"') + length(`"`sep'"') + 4
      if ((`maclen' + `cmdlen') > `c(macrolen)') {c -(}
      di as err "macro length exceeded"
      exit 1000
      {c )-}
      else `cmd'
      {c )-}
      {c )-}
    - {c )-}
    - di as txt `"`vals'"'
    = di as txt `"cooking_fuel cooking_location cooking_type cooking_type_chimney"'
    - return local levels `"`vals'"'
    = return local levels `"cooking_fuel cooking_location cooking_type cooking_type_chimney"'
    - if "`local'" != "" {c -(}
    = if "map_indicators" != "" {c -(}
    - c_local `local' `"`vals'"'
    = c_local map_indicators `"cooking_fuel cooking_location cooking_type cooking_type_chimney"'
    - {c )-}
    {hline 78} end levelsof {hline}
  - global map_indicators `map_indicators'
  = global map_indicators cooking_fuel cooking_location cooking_type cooking_type_chimney
  - levelsof topic_name if map_indicator == 1, l(map_topics) clean
    {hline 76} begin levelsof {hline}
    - version 9
    - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
    - if (_N==0) {c -(}
      error 2000
      {c )-}
    - if "`separate'" == "" local sep " "
    = if "" == "" local sep " "
    - else local sep "`separate'"
    = else local sep ""
    - if "`missing'" != "" local novarlist "novarlist"
    = if "" != "" local novarlist "novarlist"
    - marksample touse, strok `novarlist'
    = marksample touse, strok 
    - capture confirm numeric variable `varlist'
    = capture confirm numeric variable topic_name
    - local isnum = _rc != 7
    - local maclen 0
    - if `isnum' {c -(}
    = if 0 {c -(}
      tempname Vals
      qui capture tab `varlist' if `touse', `missing' matrow(`Vals')
      if !(_rc) {c -(}
      local nvals = r(r)
      forval i = 1 / `nvals' {c -(}
      local val = `Vals'[`i',1]
      if `i' < `nvals' local vals "`vals'`val'`sep'"
      else local vals "`vals'`val'"
      {c )-}
      {c )-}
      else {c -(}
      tempvar select counter
      bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
      generate `counter' = sum(`select') * (`select' == 1)
      sort `counter'
      qui count if `counter' == 0
      local j = 1 + r(N)
      local nvals = _N
      forval i = `j' / `nvals' {c -(}
      local val = `varlist'[`i']
      if (`i' < `nvals') {c -(}
      local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""')
      local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""'
      {c )-}
      else {c -(}
      local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'""')
      local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'""'
      {c )-}
      local maclen = `maclen' + `:length local val' + `:length local sep'
      if ((`maclen' + `cmdlen') > `c(macrolen)') {c -(}
      di as err "macro length exceeded"
      exit 1000
      {c )-}
      else `cmd'
      {c )-}
      {c )-}
      {c )-}
    - else {c -(}
    - tempvar select counter
    - bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
    = bysort __000001 topic_name : gen byte __000002 = (_n == 1) * __000001
    - generate `counter' = sum(`select') * (`select' == 1)
    = generate __000003 = sum(__000002) * (__000002 == 1)
    - sort `counter'
    = sort __000003
    - qui count if `counter' == 0
    = qui count if __000003 == 0
    - local j = 1 + r(N)
    - local nvals = _N
    - if "`clean'" != "" {c -(}
    = if "clean" != "" {c -(}
    - forval i = `j' / `nvals' {c -(}
    = forval i = 53 / 53 {c -(}
    - if (`i' < `nvals') {c -(}
    = if (53 < 53) {c -(}
      local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""')
      local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""'
      {c )-}
    - else {c -(}
    - local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'""')
    = local cmdlen = length(`"local vals "`vals'`=`varlist'[`i']'""')
    - local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'""'
    = local cmd `"local vals "`vals'`=`varlist'[`i']'""'
    - {c )-}
    - local maclen = `maclen' + length(`"`=`varlist'[`i']'"') + length(`"`sep'"')
    = local maclen = 0 + length(`"hap"') + length(`" "')
    - if ((`maclen' + `cmdlen') > `c(macrolen)') {c -(}
    = if ((4 + 36) > 165200) {c -(}
      di as err "macro length exceeded"
      exit 1000
      {c )-}
    - else `cmd'
    = else local vals "hap"
    - {c )-}
    - {c )-}
    - else {c -(}
      forval i = `j' / `nvals' {c -(}
      if (`i' < `nvals') {c -(}
      local cmdlen = length(`"local vals `"\`vals'\`"\`=\`varlist'[\`i']'"'\`sep'"'"')
      local cmd `"local vals `"\`vals'\`"\`=\`varlist'[\`i']'"'\`sep'"'"'
      {c )-}
      else {c -(}
      local cmdlen = length(`"local vals \`"\`vals'\`"\`=\`varlist'[\`i']'"'"'"')
      local cmd `"local vals \`"\`vals'\`"\`=\`varlist'[\`i']'"'"'"'
      {c )-}
      local maclen = `maclen' + length(`"`=`varlist'[`i']'"') + length(`"`sep'"') + 4
      if ((`maclen' + `cmdlen') > `c(macrolen)') {c -(}
      di as err "macro length exceeded"
      exit 1000
      {c )-}
      else `cmd'
      {c )-}
      {c )-}
    - {c )-}
    - di as txt `"`vals'"'
    = di as txt `"hap"'
    - return local levels `"`vals'"'
    = return local levels `"hap"'
    - if "`local'" != "" {c -(}
    = if "map_topics" != "" {c -(}
    - c_local `local' `"`vals'"'
    = c_local map_topics `"hap"'
    - {c )-}
    {hline 78} end levelsof {hline}
  - global map_topics `map_topics'
  = global map_topics hap
  - clear
    {hline 79} begin clear {hline}
    - if _caller() < 10 {c -(}
      _clear_9 `0'
      exit
      {c )-}
    - version 10
    - syntax [anything]
    - tokenize `anything'
    = tokenize 
    - if `"`2'"' != "" {c -(}
    = if `""' != "" {c -(}
      display as err "`2' not allowed"
      exit 198
      {c )-}
    - if "`1'"=="" {c -(}
    = if ""=="" {c -(}
    - drop _all
    - label drop _all
      {hline 77} begin label {hline}
      - version 10.0
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("drop", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - _label `macval(0)'
      = _label drop _all
      - {c )-}
      {hline 79} end label {hline}
    - {c )-}
    - else if "`1'"=="mata" {c -(}
    = else if ""=="mata" {c -(}
      mata: mata clear
      {c )-}
    - else if inlist("`1'", "results", "matrix") {c -(}
    = else if inlist("", "results", "matrix") {c -(}
      return clear
      clearreturn
      ereturn clear
      sreturn clear
      _return drop _all
      if ("`1'" == "matrix") {c -(}
      matrix drop _all
      _est drop _all
      {c )-}
      {c )-}
    - else if "`1'"=="programs" {c -(}
    = else if ""=="programs" {c -(}
      program drop _all
      {c )-}
    - else if "`1'"=="ado" {c -(}
    = else if ""=="ado" {c -(}
      program drop _allado
      {c )-}
    - else if "`1'"=="*" | "`1'"=="all" {c -(}
    = else if ""=="*" | ""=="all" {c -(}
      capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
      capture
      if (0`semmods') {c -(}
      display as err "-clear all- not allowed while an SEM Builder is open"
      exit 1
      {c )-}
      drop _all
      label drop _all
      matrix drop _all
      scalar drop _all
      constraint drop _all
      eq drop _all
      file close _all
      postutil clear
      _return drop _all
      discard
      program drop _all
      timer clear
      mata: mata clear
      {c )-}
    - else {c -(}
      display as err "`1' not allowed"
      exit 198
      {c )-}
    {hline 81} end clear {hline}
  - {c )-}
  - di as error "***********************************************"
{err}***********************************************
  {txt}- di as error " Databases initialized"
{err} Databases initialized
  {txt}- di as error "***********************************************"
{err}***********************************************
{txt}  {hline 84} end init {hline}

{com}. // Run extraction
. /* Launches extract
>     Arguments:
>         - ubcov_id: The id of the codebook row
>     Optional:
>         - keep: Keeps 
>         - bypass: Skips the extraction check
>         - run_all: Loops through all ubcov_ids in the codebook.
> */
. //Enter path where you'd like your extracts saved below between the quotes
. //DO NOT EXTRACT DATA FROM LIMITED USE TO THE J DRIVE. YOU CAN GET IN BIG TROUBLE. If you need to extract from LIMITED_USE contact IT and your PO to organize a workaround. 
. local outpath = "`l'/LU_GEOSPATIAL/ubCov_extractions/hap/"
{txt}
{com}. 
. //Troublemakers
. local array 15451 //come back to this one: error=variables ihme_loc_id admin_1 do not uniquely identify observations in the using data 
{txt}
{com}. local array 5110 // come back to this one: error=variable hv109 not found
{txt}
{com}. local array 4723 // come back to this one: error=Indicator Check || Requisite input vars (sweight) do not exist in dataset || design || pweight_admin_1 (cont)
{txt}
{com}. local array 4651 // come back to this one: error=Indicator Check || Requisite input vars (hv239) do not exist in dataset || hap || cooking_type 
{txt}
{com}. 
. //Enter the ubCov ID of your survey after "array"
. //local array 4468 4489 4475 4494 4462 4484 4500 4504 4479 5844 5341 5629 5965 5718 4542 5972 4948 5425 5725 6042 4710 5075 5491 5979 4830 4955 5293 5581 5787 6049 6284 4622 4837 5083 5498 5851 4582 4870 4877 5090 6056 4670 5097 5588 6063 5794 6204 5636 6070 4518 4635 4905 5348 5595 5912 4969 6116 4523 4677 4976 5300 5458  
. //local array 6211 4545 4586 4717 4911 5354 5505 5643 5858 6290 4915 5463 5360 5649 5986 5365 6123 4593 4843 5103 5511 5864 6296 5307 5656 6130 6218 4922  6303 5918 5663 6077 4884 5372 5669 6137 4554 4683 4891 5023 5469 5808 6143 5166 5676 5030 5476 5815 5925 6150 4928 5314 4598 4850 5250 5518 5871 6309 5036 6156 5379 5683 6000 6316 4527 5732 6225 4558 5601 5931 6323 4562 4778 5525 5690 4784 5042 5531 5878 5938 4565 4572 4934 5431 5739 6163 5833 5048 5538 6084 5384 4790 5391 5608 6007 5836 4797 5398 5746 6232 4803 5259 5753 6170 4647 5546 5885 6239 5055 5438 4983 5444 5760 6091
. //local array 5767 6177 4531 4690 4989 5405 5554 5945 6015 6100 6184 4857 5266 5567 5892 6253 4658 4810 5411 5697 5821 6021 6338 4628 4538 4817 5062 5320 5704 6028 6192 6345 6373 5898 6259 4510 5905 5773 4996 5615 6352 4603 5272 6268 4577 6198 5951 4581 4608 4864 5279 5574 4696 5003 5327 5622 5958 6380 4613 4941 5418 5780 6109 5828 5010 5069 5482 4704 6272 5286 4825 5016 5451 5837 6278 4618 4898 5334 5711 6035 6387 6360 6250 6396 6397 6403 6439 6410 6452 6457 6430 6447 6404 6443 6445 6419 6468 6495 6517 6528 6473 6500 6503 6514 6536 6532 6508 6521 6489 6511 6464 6476 6483 6524
. //local array 7887 7663 7502 7671 7979 7506 7510 7675 7738 7741 7743 8074 7515 7747 7982 7679 8078 7751 7988 7519 8083 7891 7527 7755 7895 7531 7760 7535 7764 7667 7900 7539 7992 7768 7904 7772 7543 8186 8088 8129 7683 7777 7847 7908 7997 7547 7687 7551 7782 8189 7555 7559 7786 8196 8003 8004 7567 7791 12063 10638 10123 5996 4643 6096 6426 6432 10471
. 
. local array 5622
{txt}
{com}. 
. 
. //fill me in with the ubcov_ids you want to run
. foreach number in `array'{c -(}
{txt}  2{com}.     local i `number'
{txt}  3{com}.     run_extract `i', bypass
{txt}  4{com}.     tostring year_start, gen(year)
{txt}  5{com}.     tostring year_end, gen(end_year)
{txt}  6{com}.     tostring nid, gen(nid_n)
{txt}  7{com}.     local filename = ihme_loc_id + "_" + survey_name + "_" + year + "_" + end_year + "_" + nid_n
{txt}  8{com}.     local filename = subinstr("`filename'", "/", "_",.)
{txt}  9{com}.     drop year end_year nid_n
{txt} 10{com}.     cd  `outpath'
{txt} 11{com}.     outsheet using "`filename'.csv", comma names replace
{txt} 12{com}. {c )-}
{txt}- foreach number in `array'{c -(}
= foreach number in 5622{c -(}
- local i `number'
= local i 5622
- run_extract `i', bypass
= run_extract 5622, bypass
  {hline 75} begin run_extract {hline}
  - syntax anything, [bypass] [keep] [bypass_map] [store_vals] [run_all] [store_vals_path(str)] [collapse_config(str)] [trace]
  - global ubcov_ids `anything'
  = global ubcov_ids 5622
  - global key nid ihme_loc_id year_start year_end survey_module file_path
  - if !mi("`run_all'") {c -(}
  = if !mi("") {c -(}
    get, codebook
    levelsof ubcov_id, l(ubcov_ids) clean
    global ubcov_ids `ubcov_ids'
    {c )-}
  - foreach ubcov_id in $ubcov_ids {c -(}
  = foreach ubcov_id in 5622 {c -(}
  - global ubcov_id `ubcov_id'
  = global ubcov_id 5622
  - load_codebook, ubcov_id(`ubcov_id')
  = load_codebook, ubcov_id(5622)
    {hline 71} begin load_codebook {hline}
    - syntax, ubcov_id(int)
    - get, codebook
      {hline 79} begin get {hline}
      - qui {c -(}
      - syntax, [vars codebook indicators labels merges] [keep_key]
      - clear
        {hline 75} begin clear {hline}
        - if _caller() < 10 {c -(}
          _clear_9 `0'
          exit
          {c )-}
        - version 10
        - syntax [anything]
        - tokenize `anything'
        = tokenize 
        - if `"`2'"' != "" {c -(}
        = if `""' != "" {c -(}
          display as err "`2' not allowed"
          exit 198
          {c )-}
        - if "`1'"=="" {c -(}
        = if ""=="" {c -(}
        - drop _all
        - label drop _all
          {hline 73} begin label {hline}
          - version 10.0
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - _label `macval(0)'
          = _label drop _all
          - {c )-}
          {hline 75} end label {hline}
        - {c )-}
        - else if "`1'"=="mata" {c -(}
        = else if ""=="mata" {c -(}
          mata: mata clear
          {c )-}
        - else if inlist("`1'", "results", "matrix") {c -(}
        = else if inlist("", "results", "matrix") {c -(}
          return clear
          clearreturn
          ereturn clear
          sreturn clear
          _return drop _all
          if ("`1'" == "matrix") {c -(}
          matrix drop _all
          _est drop _all
          {c )-}
          {c )-}
        - else if "`1'"=="programs" {c -(}
        = else if ""=="programs" {c -(}
          program drop _all
          {c )-}
        - else if "`1'"=="ado" {c -(}
        = else if ""=="ado" {c -(}
          program drop _allado
          {c )-}
        - else if "`1'"=="*" | "`1'"=="all" {c -(}
        = else if ""=="*" | ""=="all" {c -(}
          capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
          capture
          if (0`semmods') {c -(}
          display as err "-clear all- not allowed while an SEM Builder is open"
          exit 1
          {c )-}
          drop _all
          label drop _all
          matrix drop _all
          scalar drop _all
          constraint drop _all
          eq drop _all
          file close _all
          postutil clear
          _return drop _all
          discard
          program drop _all
          timer clear
          mata: mata clear
          {c )-}
        - else {c -(}
          display as err "`1' not allowed"
          exit 198
          {c )-}
        {hline 77} end clear {hline}
      - local arg `2'
      = local arg codebook
      - getmata (${c -(}`arg'_cols{c )-}) = `arg'
      = getmata (ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num) = codebook
        {hline 73} begin getmata {hline}
        - version 11
        - syntax [anything(name=getlist id="getlist" equalok)] [, DOUBLE FORCE ID(string) REPLACE UPdate]
        - mata: get()
        {hline 75} end getmata {hline}
      - if !inlist("`arg'", "labels", "merge") destring *, replace
      = if !inlist("codebook", "labels", "merge") destring *, replace
        {hline 72} begin destring {hline}
        - version 7.0
        - syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(string)] [percent] [dpcomma]
        - if "`percent'" == "percent" {c -(}
        = if "" == "percent" {c -(}
          if !index(`"`ignore'"', "%") {c -(}
          local ignore `"`ignore'%"'
          {c )-}
          {c )-}
        - if "`generate'" != "" & "`replace'" != "" {c -(}
        = if "" != "" & "replace" != "" {c -(}
          di as err "options generate and replace are mutually exclusive"
          exit 198
          {c )-}
        - if "`generate'" == "" & "`replace'" == "" {c -(}
        = if "" == "" & "replace" == "" {c -(}
          di as err "must specify either generate or replace option"
          exit 198
          {c )-}
        - if "`generate'" != "" {c -(}
        = if "" != "" {c -(}
          local ct1: word count `varlist'
          local save "`varlist'"
          local 0 "`generate'"
          capture syntax newvarlist
          if _rc {c -(}
          di as err "generate(newvarlist) invalid"
          exit _rc
          {c )-}
          local generate "`varlist'"
          local varlist "`save'"
          local ct2: word count `generate'
          if `ct1' != `ct2' {c -(}
          di as err "number of variables in varlist must equal"
          di as err "number of variables in generate(newvarlist)"
          exit 198
          {c )-}
          {c )-}
        - local m 1
        - if `"`ignore'"' == "" {c -(}
        = if `""' == "" {c -(}
        - local ignore ""
        - {c )-}
        - local l = length(`"`ignore'"')
        = local l = length(`""')
        - while `m' <= `l' {c -(}
        = while 1 <= 0 {c -(}
          local char`m' = substr(`"`ignore'"', `m', 1)
          if substr(`"`ignore'"', `m', 1) == " " {c -(}
          local char`m' " "
          {c )-}
          local m = `m' + 1
          {c )-}
        - if "`generate'" != "" {c -(}
        = if "" != "" {c -(}
          tokenize `varlist'
          local flag 0
          local jj 1
          local yy 1
          local varno 0
          while "`1'" != "" {c -(}
          local varno = `varno' + 1
          capture confirm string variable `1'
          if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "generate"
          local newvar : word `varno' of `generate'
          mac shift
          {c )-}
          else {c -(}
          tempvar temp
          qui gen str1 `temp' = ""
          qui replace `temp' = `1'
          qui compress `temp'
          while `"`char`jj''"' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
          qui replace `temp' = trim(`temp')
          qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
          local r = r(N)
          qui count if real(`temp') >= .
          local s = r(N)
          if `r' != `s' {c -(}
          local flag 1
          {c )-}
          if `flag' == 1 & "`force'" == "" {c -(}
          if `"`ignore'"' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "generate"
          {c )-}
          else {c -(}
          di as txt "`1' contains " "nonnumeric characters; no " as res "generate"
          {c )-}
          local flag 0
          local jj 1
          mac shift
          {c )-}
          else {c -(}
          tempvar OLDVAR ind con
          qui gen str1 `OLDVAR' = ""
          qui replace `OLDVAR' = `1'
          qui gen byte `ind' = .
          qui gen byte `con' = 0
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`OLDVAR', `"`t'"') != 0
          qui count if `ind' == 1
          if r(N) > 0 {c -(}
          if `"`t'"' == " " {c -(}
          local b `"`b' space"'
          {c )-}
          else {c -(}
          local b `"`b' `t'"'
          {c )-}
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`OLDVAR', `"`t'"') != 0
          qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `OLDVAR' = subinstr(`OLDVAR', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          local newvar : word `varno' of `generate'
          local vl: variable label `1'
          if "`float'" == "" {c -(}
          qui gen double `newvar' = real(`OLDVAR')
          {c )-}
          else {c -(}
          qui gen float `newvar' = real(`OLDVAR')
          {c )-}
          move `newvar' `1'
          move `1' `newvar'
          Charcopy `1' `newvar'
          label variable `newvar' `"`vl'"'
          char `newvar'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) > 0 {c -(}
          qui replace `newvar' = `newvar'/100
          {c )-}
          qui compress `newvar'
          local type : type `newvar'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; `newvar' " as res "generated " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1': characters" as res `"`b'"' as txt " removed; `newvar' " as res "generated " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; `newvar' " as res "generated " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          drop `ind' `con' `OLDVAR'
          local jj 1
          local yy 1
          mac shift
          {c )-}
          drop `temp'
          {c )-}
          {c )-}
          {c )-}
        - else if "`replace'" != "" {c -(}
        = else if "replace" != "" {c -(}
        - tokenize `varlist'
        = tokenize ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path smaller_site_unit reshape reshape_stem reshape_keepid subset delimiter strata psu pweight hhweight geospatial_id hh_id line_id sex sex_male sex_female age_categorical age_categorical_type age_categorical_parse age_year age_year_missing age_month age_month_missing birth_date birth_date_format birth_day birth_month birth_year int_date int_date_format int_day int_month int_year year_adjust month_adjust urban urban_true urban_false admin_1 pweight_admin_1 admin_2 pweight_admin_2 admin_3 pweight_admin_3 admin_4 admin_5 latitude longitude hh_size cooking_fuel cooking_type cooking_type_chimney cooking_location heating_fuel heating_type heating_type_chimney lighting_fuel cooking_fuel_multi cooking_fuel_multi_true cooking_fuel_multi_false electricity electricity_true electricity_false housing_roof housing_wall housing_floor housing_roof_num housing_wall_num housing_floor_num
        - tempvar ind con
        - qui gen byte `con' = 0
        = qui gen byte __000001 = 0
        - qui gen byte `ind' = .
        = qui gen byte __000000 = .
        - local flag 0
        - local yy 1
        - local jj 1
        - while "`1'" != "" {c -(}
        = while "ubcov_id" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable ubcov_id
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000002 = ""
        - qui replace `temp' = `1'
        = qui replace __000002 = ubcov_id
        - qui compress `temp'
        = qui compress __000002
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000002 = trim(__000002)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000002=="" | __000002=="." | (length(__000002)==2 & inrange(__000002,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000002) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 0 != 0 {c -(}
          local flag 1
          {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 0 == 1 & "" == "" {c -(}
          if `"`ignore'"' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
          else {c -(}
          di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
          {c )-}
          local flag 0
          local jj 1
          mac shift
          {c )-}
        - else {c -(}
        - while `"`char`yy''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
        - local c Characters removed were: `b'
        = local c Characters removed were: 
        - tempvar switch
        - local type = cond("`float'" == "float", "float", "double")
        = local type = cond("" == "float", "float", "double")
        - qui gen `type' `switch' = real(`1')
        = qui gen double __000003 = real(ubcov_id)
        - char rename `1' `switch'
        = char rename ubcov_id __000003
        - move `switch' `1'
        = move __000003 ubcov_id
        - local vl: variable label `1'
        = local vl: variable label ubcov_id
        - drop `1'
        = drop ubcov_id
        - if "`float'" == "" {c -(}
        = if "" == "" {c -(}
        - qui gen double `1' = `switch'
        = qui gen double ubcov_id = __000003
        - {c )-}
        - else {c -(}
          qui gen float `1' = `switch'
          {c )-}
        - move `1' `switch'
        = move ubcov_id __000003
        - label variable `1' `"`vl'"'
        = label variable ubcov_id `""'
          {hline 73} begin label {hline}
          - version 10.0
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("variable", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - _label `macval(0)'
          = _label variable ubcov_id `""'
          - {c )-}
          {hline 75} end label {hline}
        - char rename `switch' `1'
        = char rename __000003 ubcov_id
        - char `1'[destring] `c'
        = char ubcov_id[destring] Characters removed were:
        - qui count if `con' == 1
        = qui count if __000001 == 1
        - if "`percent'" != "" & r(N) != 0 {c -(}
        = if "" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
        - qui replace `con' = 0
        = qui replace __000001 = 0
        - qui compress `1'
        = qui compress ubcov_id
        - local type : type `1'
        = local type : type ubcov_id
        - if "`force'" != "" {c -(}
        = if "" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - if `"`b'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - else if `"`b'"' == "" & "`force'" == "" {c -(}
        = else if `""' == "" & "" == "" {c -(}
        - di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        = di as txt "ubcov_id has all " "characters numeric; " as res "replaced " as txt "as " as res "int"
        - {c )-}
        - if `s' != 0 {c -(}
        = if 0 != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
        - local b ""
        - local c ""
        - local jj 1
        - local yy 1
        - drop `switch'
        = drop __000003
        - mac shift
        - {c )-}
        - drop `temp'
        = drop __000002
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "survey_name" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable survey_name
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000004 = ""
        - qui replace `temp' = `1'
        = qui replace __000004 = survey_name
        - qui compress `temp'
        = qui compress __000004
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000004 = trim(__000004)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000004=="" | __000004=="." | (length(__000004)==2 & inrange(__000004,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000004) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 0 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "survey_name contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000004
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "nid" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable nid
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000005 = ""
        - qui replace `temp' = `1'
        = qui replace __000005 = nid
        - qui compress `temp'
        = qui compress __000005
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000005 = trim(__000005)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000005=="" | __000005=="." | (length(__000005)==2 & inrange(__000005,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000005) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 0 != 0 {c -(}
          local flag 1
          {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 0 == 1 & "" == "" {c -(}
          if `"`ignore'"' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
          else {c -(}
          di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
          {c )-}
          local flag 0
          local jj 1
          mac shift
          {c )-}
        - else {c -(}
        - while `"`char`yy''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
        - local c Characters removed were: `b'
        = local c Characters removed were: 
        - tempvar switch
        - local type = cond("`float'" == "float", "float", "double")
        = local type = cond("" == "float", "float", "double")
        - qui gen `type' `switch' = real(`1')
        = qui gen double __000006 = real(nid)
        - char rename `1' `switch'
        = char rename nid __000006
        - move `switch' `1'
        = move __000006 nid
        - local vl: variable label `1'
        = local vl: variable label nid
        - drop `1'
        = drop nid
        - if "`float'" == "" {c -(}
        = if "" == "" {c -(}
        - qui gen double `1' = `switch'
        = qui gen double nid = __000006
        - {c )-}
        - else {c -(}
          qui gen float `1' = `switch'
          {c )-}
        - move `1' `switch'
        = move nid __000006
        - label variable `1' `"`vl'"'
        = label variable nid `""'
          {hline 73} begin label {hline}
          - version 10.0
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("variable", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - _label `macval(0)'
          = _label variable nid `""'
          - {c )-}
          {hline 75} end label {hline}
        - char rename `switch' `1'
        = char rename __000006 nid
        - char `1'[destring] `c'
        = char nid[destring] Characters removed were:
        - qui count if `con' == 1
        = qui count if __000001 == 1
        - if "`percent'" != "" & r(N) != 0 {c -(}
        = if "" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
        - qui replace `con' = 0
        = qui replace __000001 = 0
        - qui compress `1'
        = qui compress nid
        - local type : type `1'
        = local type : type nid
        - if "`force'" != "" {c -(}
        = if "" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - if `"`b'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - else if `"`b'"' == "" & "`force'" == "" {c -(}
        = else if `""' == "" & "" == "" {c -(}
        - di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        = di as txt "nid has all " "characters numeric; " as res "replaced " as txt "as " as res "long"
        - {c )-}
        - if `s' != 0 {c -(}
        = if 0 != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
        - local b ""
        - local c ""
        - local jj 1
        - local yy 1
        - drop `switch'
        = drop __000006
        - mac shift
        - {c )-}
        - drop `temp'
        = drop __000005
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "ihme_loc_id" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable ihme_loc_id
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000007 = ""
        - qui replace `temp' = `1'
        = qui replace __000007 = ihme_loc_id
        - qui compress `temp'
        = qui compress __000007
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000007 = trim(__000007)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000007=="" | __000007=="." | (length(__000007)==2 & inrange(__000007,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000007) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 0 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "ihme_loc_id contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000007
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "year_start" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable year_start
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000008 = ""
        - qui replace `temp' = `1'
        = qui replace __000008 = year_start
        - qui compress `temp'
        = qui compress __000008
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000008 = trim(__000008)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000008=="" | __000008=="." | (length(__000008)==2 & inrange(__000008,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000008) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 0 != 0 {c -(}
          local flag 1
          {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 0 == 1 & "" == "" {c -(}
          if `"`ignore'"' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
          else {c -(}
          di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
          {c )-}
          local flag 0
          local jj 1
          mac shift
          {c )-}
        - else {c -(}
        - while `"`char`yy''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
        - local c Characters removed were: `b'
        = local c Characters removed were: 
        - tempvar switch
        - local type = cond("`float'" == "float", "float", "double")
        = local type = cond("" == "float", "float", "double")
        - qui gen `type' `switch' = real(`1')
        = qui gen double __000009 = real(year_start)
        - char rename `1' `switch'
        = char rename year_start __000009
        - move `switch' `1'
        = move __000009 year_start
        - local vl: variable label `1'
        = local vl: variable label year_start
        - drop `1'
        = drop year_start
        - if "`float'" == "" {c -(}
        = if "" == "" {c -(}
        - qui gen double `1' = `switch'
        = qui gen double year_start = __000009
        - {c )-}
        - else {c -(}
          qui gen float `1' = `switch'
          {c )-}
        - move `1' `switch'
        = move year_start __000009
        - label variable `1' `"`vl'"'
        = label variable year_start `""'
          {hline 73} begin label {hline}
          - version 10.0
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("variable", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - _label `macval(0)'
          = _label variable year_start `""'
          - {c )-}
          {hline 75} end label {hline}
        - char rename `switch' `1'
        = char rename __000009 year_start
        - char `1'[destring] `c'
        = char year_start[destring] Characters removed were:
        - qui count if `con' == 1
        = qui count if __000001 == 1
        - if "`percent'" != "" & r(N) != 0 {c -(}
        = if "" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
        - qui replace `con' = 0
        = qui replace __000001 = 0
        - qui compress `1'
        = qui compress year_start
        - local type : type `1'
        = local type : type year_start
        - if "`force'" != "" {c -(}
        = if "" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - if `"`b'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - else if `"`b'"' == "" & "`force'" == "" {c -(}
        = else if `""' == "" & "" == "" {c -(}
        - di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        = di as txt "year_start has all " "characters numeric; " as res "replaced " as txt "as " as res "int"
        - {c )-}
        - if `s' != 0 {c -(}
        = if 0 != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
        - local b ""
        - local c ""
        - local jj 1
        - local yy 1
        - drop `switch'
        = drop __000009
        - mac shift
        - {c )-}
        - drop `temp'
        = drop __000008
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "year_end" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable year_end
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000A = ""
        - qui replace `temp' = `1'
        = qui replace __00000A = year_end
        - qui compress `temp'
        = qui compress __00000A
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000A = trim(__00000A)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000A=="" | __00000A=="." | (length(__00000A)==2 & inrange(__00000A,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000A) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 0 != 0 {c -(}
          local flag 1
          {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 0 == 1 & "" == "" {c -(}
          if `"`ignore'"' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
          else {c -(}
          di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
          {c )-}
          local flag 0
          local jj 1
          mac shift
          {c )-}
        - else {c -(}
        - while `"`char`yy''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
        - local c Characters removed were: `b'
        = local c Characters removed were: 
        - tempvar switch
        - local type = cond("`float'" == "float", "float", "double")
        = local type = cond("" == "float", "float", "double")
        - qui gen `type' `switch' = real(`1')
        = qui gen double __00000B = real(year_end)
        - char rename `1' `switch'
        = char rename year_end __00000B
        - move `switch' `1'
        = move __00000B year_end
        - local vl: variable label `1'
        = local vl: variable label year_end
        - drop `1'
        = drop year_end
        - if "`float'" == "" {c -(}
        = if "" == "" {c -(}
        - qui gen double `1' = `switch'
        = qui gen double year_end = __00000B
        - {c )-}
        - else {c -(}
          qui gen float `1' = `switch'
          {c )-}
        - move `1' `switch'
        = move year_end __00000B
        - label variable `1' `"`vl'"'
        = label variable year_end `""'
          {hline 73} begin label {hline}
          - version 10.0
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("variable", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - _label `macval(0)'
          = _label variable year_end `""'
          - {c )-}
          {hline 75} end label {hline}
        - char rename `switch' `1'
        = char rename __00000B year_end
        - char `1'[destring] `c'
        = char year_end[destring] Characters removed were:
        - qui count if `con' == 1
        = qui count if __000001 == 1
        - if "`percent'" != "" & r(N) != 0 {c -(}
        = if "" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
        - qui replace `con' = 0
        = qui replace __000001 = 0
        - qui compress `1'
        = qui compress year_end
        - local type : type `1'
        = local type : type year_end
        - if "`force'" != "" {c -(}
        = if "" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - if `"`b'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - else if `"`b'"' == "" & "`force'" == "" {c -(}
        = else if `""' == "" & "" == "" {c -(}
        - di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        = di as txt "year_end has all " "characters numeric; " as res "replaced " as txt "as " as res "int"
        - {c )-}
        - if `s' != 0 {c -(}
        = if 0 != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
        - local b ""
        - local c ""
        - local jj 1
        - local yy 1
        - drop `switch'
        = drop __00000B
        - mac shift
        - {c )-}
        - drop `temp'
        = drop __00000A
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "survey_module" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable survey_module
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000C = ""
        - qui replace `temp' = `1'
        = qui replace __00000C = survey_module
        - qui compress `temp'
        = qui compress __00000C
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000C = trim(__00000C)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000C=="" | __00000C=="." | (length(__00000C)==2 & inrange(__00000C,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000C) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 0 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "survey_module contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000C
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "file_path" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable file_path
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000D = ""
        - qui replace `temp' = `1'
        = qui replace __00000D = file_path
        - qui compress `temp'
        = qui compress __00000D
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000D = trim(__00000D)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000D=="" | __00000D=="." | (length(__00000D)==2 & inrange(__00000D,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000D) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 0 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "file_path contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000D
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "smaller_site_unit" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable smaller_site_unit
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000E = ""
        - qui replace `temp' = `1'
        = qui replace __00000E = smaller_site_unit
        - qui compress `temp'
        = qui compress __00000E
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000E = trim(__00000E)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000E=="" | __00000E=="." | (length(__00000E)==2 & inrange(__00000E,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000E) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1543 != 1543 {c -(}
          local flag 1
          {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 0 == 1 & "" == "" {c -(}
          if `"`ignore'"' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
          else {c -(}
          di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
          {c )-}
          local flag 0
          local jj 1
          mac shift
          {c )-}
        - else {c -(}
        - while `"`char`yy''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
        - local c Characters removed were: `b'
        = local c Characters removed were: 
        - tempvar switch
        - local type = cond("`float'" == "float", "float", "double")
        = local type = cond("" == "float", "float", "double")
        - qui gen `type' `switch' = real(`1')
        = qui gen double __00000F = real(smaller_site_unit)
        - char rename `1' `switch'
        = char rename smaller_site_unit __00000F
        - move `switch' `1'
        = move __00000F smaller_site_unit
        - local vl: variable label `1'
        = local vl: variable label smaller_site_unit
        - drop `1'
        = drop smaller_site_unit
        - if "`float'" == "" {c -(}
        = if "" == "" {c -(}
        - qui gen double `1' = `switch'
        = qui gen double smaller_site_unit = __00000F
        - {c )-}
        - else {c -(}
          qui gen float `1' = `switch'
          {c )-}
        - move `1' `switch'
        = move smaller_site_unit __00000F
        - label variable `1' `"`vl'"'
        = label variable smaller_site_unit `""'
          {hline 73} begin label {hline}
          - version 10.0
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("variable", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - _label `macval(0)'
          = _label variable smaller_site_unit `""'
          - {c )-}
          {hline 75} end label {hline}
        - char rename `switch' `1'
        = char rename __00000F smaller_site_unit
        - char `1'[destring] `c'
        = char smaller_site_unit[destring] Characters removed were:
        - qui count if `con' == 1
        = qui count if __000001 == 1
        - if "`percent'" != "" & r(N) != 0 {c -(}
        = if "" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
        - qui replace `con' = 0
        = qui replace __000001 = 0
        - qui compress `1'
        = qui compress smaller_site_unit
        - local type : type `1'
        = local type : type smaller_site_unit
        - if "`force'" != "" {c -(}
        = if "" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - if `"`b'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - else if `"`b'"' == "" & "`force'" == "" {c -(}
        = else if `""' == "" & "" == "" {c -(}
        - di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        = di as txt "smaller_site_unit has all " "characters numeric; " as res "replaced " as txt "as " as res "byte"
        - {c )-}
        - if `s' != 0 {c -(}
        = if 1543 != 0 {c -(}
        - local valmsg = cond(`s' > 1, "values", "value")
        = local valmsg = cond(1543 > 1, "values", "value")
        - di as txt "(`s' missing `valmsg' generated)"
        = di as txt "(1543 missing values generated)"
        - {c )-}
        - local b ""
        - local c ""
        - local jj 1
        - local yy 1
        - drop `switch'
        = drop __00000F
        - mac shift
        - {c )-}
        - drop `temp'
        = drop __00000E
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "reshape" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable reshape
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000G = ""
        - qui replace `temp' = `1'
        = qui replace __00000G = reshape
        - qui compress `temp'
        = qui compress __00000G
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000G = trim(__00000G)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000G=="" | __00000G=="." | (length(__00000G)==2 & inrange(__00000G,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000G) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1572 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "reshape contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000G
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "reshape_stem" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable reshape_stem
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000H = ""
        - qui replace `temp' = `1'
        = qui replace __00000H = reshape_stem
        - qui compress `temp'
        = qui compress __00000H
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000H = trim(__00000H)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000H=="" | __00000H=="." | (length(__00000H)==2 & inrange(__00000H,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000H) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1582 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "reshape_stem contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000H
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "reshape_keepid" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable reshape_keepid
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000I = ""
        - qui replace `temp' = `1'
        = qui replace __00000I = reshape_keepid
        - qui compress `temp'
        = qui compress __00000I
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000I = trim(__00000I)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000I=="" | __00000I=="." | (length(__00000I)==2 & inrange(__00000I,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000I) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1580 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "reshape_keepid contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000I
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "subset" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable subset
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000J = ""
        - qui replace `temp' = `1'
        = qui replace __00000J = subset
        - qui compress `temp'
        = qui compress __00000J
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000J = trim(__00000J)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000J=="" | __00000J=="." | (length(__00000J)==2 & inrange(__00000J,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000J) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1340 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "subset contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000J
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "delimiter" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable delimiter
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000K = ""
        - qui replace `temp' = `1'
        = qui replace __00000K = delimiter
        - qui compress `temp'
        = qui compress __00000K
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000K = trim(__00000K)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000K=="" | __00000K=="." | (length(__00000K)==2 & inrange(__00000K,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000K) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1503 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "delimiter contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000K
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "strata" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable strata
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000L = ""
        - qui replace `temp' = `1'
        = qui replace __00000L = strata
        - qui compress `temp'
        = qui compress __00000L
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000L = trim(__00000L)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000L=="" | __00000L=="." | (length(__00000L)==2 & inrange(__00000L,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000L) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 339 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "strata contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000L
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "psu" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable psu
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000M = ""
        - qui replace `temp' = `1'
        = qui replace __00000M = psu
        - qui compress `temp'
        = qui compress __00000M
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000M = trim(__00000M)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000M=="" | __00000M=="." | (length(__00000M)==2 & inrange(__00000M,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000M) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 450 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "psu contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000M
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "pweight" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable pweight
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000N = ""
        - qui replace `temp' = `1'
        = qui replace __00000N = pweight
        - qui compress `temp'
        = qui compress __00000N
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000N = trim(__00000N)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000N=="" | __00000N=="." | (length(__00000N)==2 & inrange(__00000N,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000N) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 695 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "pweight contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000N
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "hhweight" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable hhweight
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000O = ""
        - qui replace `temp' = `1'
        = qui replace __00000O = hhweight
        - qui compress `temp'
        = qui compress __00000O
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000O = trim(__00000O)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000O=="" | __00000O=="." | (length(__00000O)==2 & inrange(__00000O,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000O) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 638 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "hhweight contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000O
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "geospatial_id" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable geospatial_id
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000P = ""
        - qui replace `temp' = `1'
        = qui replace __00000P = geospatial_id
        - qui compress `temp'
        = qui compress __00000P
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000P = trim(__00000P)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000P=="" | __00000P=="." | (length(__00000P)==2 & inrange(__00000P,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000P) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 962 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "geospatial_id contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000P
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "hh_id" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable hh_id
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000Q = ""
        - qui replace `temp' = `1'
        = qui replace __00000Q = hh_id
        - qui compress `temp'
        = qui compress __00000Q
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000Q = trim(__00000Q)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000Q=="" | __00000Q=="." | (length(__00000Q)==2 & inrange(__00000Q,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000Q) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 170 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "hh_id contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000Q
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "line_id" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable line_id
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000R = ""
        - qui replace `temp' = `1'
        = qui replace __00000R = line_id
        - qui compress `temp'
        = qui compress __00000R
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000R = trim(__00000R)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000R=="" | __00000R=="." | (length(__00000R)==2 & inrange(__00000R,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000R) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 944 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "line_id contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000R
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "sex" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable sex
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000S = ""
        - qui replace `temp' = `1'
        = qui replace __00000S = sex
        - qui compress `temp'
        = qui compress __00000S
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000S = trim(__00000S)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000S=="" | __00000S=="." | (length(__00000S)==2 & inrange(__00000S,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000S) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 952 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "sex contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000S
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "sex_male" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable sex_male
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000T = ""
        - qui replace `temp' = `1'
        = qui replace __00000T = sex_male
        - qui compress `temp'
        = qui compress __00000T
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000T = trim(__00000T)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000T=="" | __00000T=="." | (length(__00000T)==2 & inrange(__00000T,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000T) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 951 != 952 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "sex_male contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000T
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "sex_female" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable sex_female
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000U = ""
        - qui replace `temp' = `1'
        = qui replace __00000U = sex_female
        - qui compress `temp'
        = qui compress __00000U
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000U = trim(__00000U)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000U=="" | __00000U=="." | (length(__00000U)==2 & inrange(__00000U,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000U) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 951 != 952 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "sex_female contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000U
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "age_categorical" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable age_categorical
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000V = ""
        - qui replace `temp' = `1'
        = qui replace __00000V = age_categorical
        - qui compress `temp'
        = qui compress __00000V
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000V = trim(__00000V)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000V=="" | __00000V=="." | (length(__00000V)==2 & inrange(__00000V,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000V) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1566 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "age_categorical contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000V
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "age_categorical_type" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable age_categorical_type
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000W = ""
        - qui replace `temp' = `1'
        = qui replace __00000W = age_categorical_type
        - qui compress `temp'
        = qui compress __00000W
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000W = trim(__00000W)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000W=="" | __00000W=="." | (length(__00000W)==2 & inrange(__00000W,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000W) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1591 != 1591 {c -(}
          local flag 1
          {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 0 == 1 & "" == "" {c -(}
          if `"`ignore'"' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
          else {c -(}
          di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
          {c )-}
          local flag 0
          local jj 1
          mac shift
          {c )-}
        - else {c -(}
        - while `"`char`yy''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
        - local c Characters removed were: `b'
        = local c Characters removed were: 
        - tempvar switch
        - local type = cond("`float'" == "float", "float", "double")
        = local type = cond("" == "float", "float", "double")
        - qui gen `type' `switch' = real(`1')
        = qui gen double __00000X = real(age_categorical_type)
        - char rename `1' `switch'
        = char rename age_categorical_type __00000X
        - move `switch' `1'
        = move __00000X age_categorical_type
        - local vl: variable label `1'
        = local vl: variable label age_categorical_type
        - drop `1'
        = drop age_categorical_type
        - if "`float'" == "" {c -(}
        = if "" == "" {c -(}
        - qui gen double `1' = `switch'
        = qui gen double age_categorical_type = __00000X
        - {c )-}
        - else {c -(}
          qui gen float `1' = `switch'
          {c )-}
        - move `1' `switch'
        = move age_categorical_type __00000X
        - label variable `1' `"`vl'"'
        = label variable age_categorical_type `""'
          {hline 73} begin label {hline}
          - version 10.0
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("variable", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - _label `macval(0)'
          = _label variable age_categorical_type `""'
          - {c )-}
          {hline 75} end label {hline}
        - char rename `switch' `1'
        = char rename __00000X age_categorical_type
        - char `1'[destring] `c'
        = char age_categorical_type[destring] Characters removed were:
        - qui count if `con' == 1
        = qui count if __000001 == 1
        - if "`percent'" != "" & r(N) != 0 {c -(}
        = if "" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
        - qui replace `con' = 0
        = qui replace __000001 = 0
        - qui compress `1'
        = qui compress age_categorical_type
        - local type : type `1'
        = local type : type age_categorical_type
        - if "`force'" != "" {c -(}
        = if "" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - if `"`b'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - else if `"`b'"' == "" & "`force'" == "" {c -(}
        = else if `""' == "" & "" == "" {c -(}
        - di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        = di as txt "age_categorical_type has all " "characters numeric; " as res "replaced " as txt "as " as res "byte"
        - {c )-}
        - if `s' != 0 {c -(}
        = if 1591 != 0 {c -(}
        - local valmsg = cond(`s' > 1, "values", "value")
        = local valmsg = cond(1591 > 1, "values", "value")
        - di as txt "(`s' missing `valmsg' generated)"
        = di as txt "(1591 missing values generated)"
        - {c )-}
        - local b ""
        - local c ""
        - local jj 1
        - local yy 1
        - drop `switch'
        = drop __00000X
        - mac shift
        - {c )-}
        - drop `temp'
        = drop __00000W
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "age_categorical_parse" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable age_categorical_parse
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000Y = ""
        - qui replace `temp' = `1'
        = qui replace __00000Y = age_categorical_parse
        - qui compress `temp'
        = qui compress __00000Y
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000Y = trim(__00000Y)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000Y=="" | __00000Y=="." | (length(__00000Y)==2 & inrange(__00000Y,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000Y) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1591 != 1591 {c -(}
          local flag 1
          {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 0 == 1 & "" == "" {c -(}
          if `"`ignore'"' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
          else {c -(}
          di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
          {c )-}
          local flag 0
          local jj 1
          mac shift
          {c )-}
        - else {c -(}
        - while `"`char`yy''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
        - local c Characters removed were: `b'
        = local c Characters removed were: 
        - tempvar switch
        - local type = cond("`float'" == "float", "float", "double")
        = local type = cond("" == "float", "float", "double")
        - qui gen `type' `switch' = real(`1')
        = qui gen double __00000Z = real(age_categorical_parse)
        - char rename `1' `switch'
        = char rename age_categorical_parse __00000Z
        - move `switch' `1'
        = move __00000Z age_categorical_parse
        - local vl: variable label `1'
        = local vl: variable label age_categorical_parse
        - drop `1'
        = drop age_categorical_parse
        - if "`float'" == "" {c -(}
        = if "" == "" {c -(}
        - qui gen double `1' = `switch'
        = qui gen double age_categorical_parse = __00000Z
        - {c )-}
        - else {c -(}
          qui gen float `1' = `switch'
          {c )-}
        - move `1' `switch'
        = move age_categorical_parse __00000Z
        - label variable `1' `"`vl'"'
        = label variable age_categorical_parse `""'
          {hline 73} begin label {hline}
          - version 10.0
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("variable", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - _label `macval(0)'
          = _label variable age_categorical_parse `""'
          - {c )-}
          {hline 75} end label {hline}
        - char rename `switch' `1'
        = char rename __00000Z age_categorical_parse
        - char `1'[destring] `c'
        = char age_categorical_parse[destring] Characters removed were:
        - qui count if `con' == 1
        = qui count if __000001 == 1
        - if "`percent'" != "" & r(N) != 0 {c -(}
        = if "" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
        - qui replace `con' = 0
        = qui replace __000001 = 0
        - qui compress `1'
        = qui compress age_categorical_parse
        - local type : type `1'
        = local type : type age_categorical_parse
        - if "`force'" != "" {c -(}
        = if "" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - if `"`b'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - else if `"`b'"' == "" & "`force'" == "" {c -(}
        = else if `""' == "" & "" == "" {c -(}
        - di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        = di as txt "age_categorical_parse has all " "characters numeric; " as res "replaced " as txt "as " as res "byte"
        - {c )-}
        - if `s' != 0 {c -(}
        = if 1591 != 0 {c -(}
        - local valmsg = cond(`s' > 1, "values", "value")
        = local valmsg = cond(1591 > 1, "values", "value")
        - di as txt "(`s' missing `valmsg' generated)"
        = di as txt "(1591 missing values generated)"
        - {c )-}
        - local b ""
        - local c ""
        - local jj 1
        - local yy 1
        - drop `switch'
        = drop __00000Z
        - mac shift
        - {c )-}
        - drop `temp'
        = drop __00000Y
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "age_year" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable age_year
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000010 = ""
        - qui replace `temp' = `1'
        = qui replace __000010 = age_year
        - qui compress `temp'
        = qui compress __000010
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000010 = trim(__000010)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000010=="" | __000010=="." | (length(__000010)==2 & inrange(__000010,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000010) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 931 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "age_year contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000010
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "age_year_missing" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable age_year_missing
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000011 = ""
        - qui replace `temp' = `1'
        = qui replace __000011 = age_year_missing
        - qui compress `temp'
        = qui compress __000011
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000011 = trim(__000011)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000011=="" | __000011=="." | (length(__000011)==2 & inrange(__000011,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000011) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1344 != 1353 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "age_year_missing contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000011
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "age_month" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable age_month
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000012 = ""
        - qui replace `temp' = `1'
        = qui replace __000012 = age_month
        - qui compress `temp'
        = qui compress __000012
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000012 = trim(__000012)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000012=="" | __000012=="." | (length(__000012)==2 & inrange(__000012,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000012) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1551 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "age_month contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000012
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "age_month_missing" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable age_month_missing
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000013 = ""
        - qui replace `temp' = `1'
        = qui replace __000013 = age_month_missing
        - qui compress `temp'
        = qui compress __000013
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000013 = trim(__000013)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000013=="" | __000013=="." | (length(__000013)==2 & inrange(__000013,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000013) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1585 != 1586 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "age_month_missing contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000013
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "birth_date" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable birth_date
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000014 = ""
        - qui replace `temp' = `1'
        = qui replace __000014 = birth_date
        - qui compress `temp'
        = qui compress __000014
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000014 = trim(__000014)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000014=="" | __000014=="." | (length(__000014)==2 & inrange(__000014,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000014) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1555 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "birth_date contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000014
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "birth_date_format" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable birth_date_format
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000015 = ""
        - qui replace `temp' = `1'
        = qui replace __000015 = birth_date_format
        - qui compress `temp'
        = qui compress __000015
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000015 = trim(__000015)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000015=="" | __000015=="." | (length(__000015)==2 & inrange(__000015,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000015) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1555 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "birth_date_format contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000015
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "birth_day" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable birth_day
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000016 = ""
        - qui replace `temp' = `1'
        = qui replace __000016 = birth_day
        - qui compress `temp'
        = qui compress __000016
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000016 = trim(__000016)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000016=="" | __000016=="." | (length(__000016)==2 & inrange(__000016,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000016) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1526 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "birth_day contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000016
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "birth_month" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable birth_month
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000017 = ""
        - qui replace `temp' = `1'
        = qui replace __000017 = birth_month
        - qui compress `temp'
        = qui compress __000017
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000017 = trim(__000017)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000017=="" | __000017=="." | (length(__000017)==2 & inrange(__000017,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000017) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1481 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "birth_month contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000017
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "birth_year" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable birth_year
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000018 = ""
        - qui replace `temp' = `1'
        = qui replace __000018 = birth_year
        - qui compress `temp'
        = qui compress __000018
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000018 = trim(__000018)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000018=="" | __000018=="." | (length(__000018)==2 & inrange(__000018,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000018) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1500 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "birth_year contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000018
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "int_date" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable int_date
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000019 = ""
        - qui replace `temp' = `1'
        = qui replace __000019 = int_date
        - qui compress `temp'
        = qui compress __000019
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000019 = trim(__000019)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000019=="" | __000019=="." | (length(__000019)==2 & inrange(__000019,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000019) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1147 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "int_date contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000019
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "int_date_format" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable int_date_format
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001A = ""
        - qui replace `temp' = `1'
        = qui replace __00001A = int_date_format
        - qui compress `temp'
        = qui compress __00001A
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001A = trim(__00001A)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001A=="" | __00001A=="." | (length(__00001A)==2 & inrange(__00001A,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001A) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1145 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "int_date_format contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00001A
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "int_day" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable int_day
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001B = ""
        - qui replace `temp' = `1'
        = qui replace __00001B = int_day
        - qui compress `temp'
        = qui compress __00001B
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001B = trim(__00001B)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001B=="" | __00001B=="." | (length(__00001B)==2 & inrange(__00001B,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001B) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1379 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "int_day contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00001B
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "int_month" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable int_month
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001C = ""
        - qui replace `temp' = `1'
        = qui replace __00001C = int_month
        - qui compress `temp'
        = qui compress __00001C
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001C = trim(__00001C)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001C=="" | __00001C=="." | (length(__00001C)==2 & inrange(__00001C,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001C) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1075 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "int_month contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00001C
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "int_year" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable int_year
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001D = ""
        - qui replace `temp' = `1'
        = qui replace __00001D = int_year
        - qui compress `temp'
        = qui compress __00001D
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001D = trim(__00001D)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001D=="" | __00001D=="." | (length(__00001D)==2 & inrange(__00001D,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001D) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1052 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "int_year contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00001D
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "year_adjust" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable year_adjust
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001E = ""
        - qui replace `temp' = `1'
        = qui replace __00001E = year_adjust
        - qui compress `temp'
        = qui compress __00001E
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001E = trim(__00001E)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001E=="" | __00001E=="." | (length(__00001E)==2 & inrange(__00001E,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001E) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1579 != 1579 {c -(}
          local flag 1
          {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 0 == 1 & "" == "" {c -(}
          if `"`ignore'"' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
          else {c -(}
          di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
          {c )-}
          local flag 0
          local jj 1
          mac shift
          {c )-}
        - else {c -(}
        - while `"`char`yy''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
        - local c Characters removed were: `b'
        = local c Characters removed were: 
        - tempvar switch
        - local type = cond("`float'" == "float", "float", "double")
        = local type = cond("" == "float", "float", "double")
        - qui gen `type' `switch' = real(`1')
        = qui gen double __00001F = real(year_adjust)
        - char rename `1' `switch'
        = char rename year_adjust __00001F
        - move `switch' `1'
        = move __00001F year_adjust
        - local vl: variable label `1'
        = local vl: variable label year_adjust
        - drop `1'
        = drop year_adjust
        - if "`float'" == "" {c -(}
        = if "" == "" {c -(}
        - qui gen double `1' = `switch'
        = qui gen double year_adjust = __00001F
        - {c )-}
        - else {c -(}
          qui gen float `1' = `switch'
          {c )-}
        - move `1' `switch'
        = move year_adjust __00001F
        - label variable `1' `"`vl'"'
        = label variable year_adjust `""'
          {hline 73} begin label {hline}
          - version 10.0
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("variable", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - _label `macval(0)'
          = _label variable year_adjust `""'
          - {c )-}
          {hline 75} end label {hline}
        - char rename `switch' `1'
        = char rename __00001F year_adjust
        - char `1'[destring] `c'
        = char year_adjust[destring] Characters removed were:
        - qui count if `con' == 1
        = qui count if __000001 == 1
        - if "`percent'" != "" & r(N) != 0 {c -(}
        = if "" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
        - qui replace `con' = 0
        = qui replace __000001 = 0
        - qui compress `1'
        = qui compress year_adjust
        - local type : type `1'
        = local type : type year_adjust
        - if "`force'" != "" {c -(}
        = if "" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - if `"`b'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - else if `"`b'"' == "" & "`force'" == "" {c -(}
        = else if `""' == "" & "" == "" {c -(}
        - di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        = di as txt "year_adjust has all " "characters numeric; " as res "replaced " as txt "as " as res "int"
        - {c )-}
        - if `s' != 0 {c -(}
        = if 1579 != 0 {c -(}
        - local valmsg = cond(`s' > 1, "values", "value")
        = local valmsg = cond(1579 > 1, "values", "value")
        - di as txt "(`s' missing `valmsg' generated)"
        = di as txt "(1579 missing values generated)"
        - {c )-}
        - local b ""
        - local c ""
        - local jj 1
        - local yy 1
        - drop `switch'
        = drop __00001F
        - mac shift
        - {c )-}
        - drop `temp'
        = drop __00001E
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "month_adjust" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable month_adjust
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001G = ""
        - qui replace `temp' = `1'
        = qui replace __00001G = month_adjust
        - qui compress `temp'
        = qui compress __00001G
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001G = trim(__00001G)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001G=="" | __00001G=="." | (length(__00001G)==2 & inrange(__00001G,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001G) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1582 != 1582 {c -(}
          local flag 1
          {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 0 == 1 & "" == "" {c -(}
          if `"`ignore'"' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
          else {c -(}
          di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
          {c )-}
          local flag 0
          local jj 1
          mac shift
          {c )-}
        - else {c -(}
        - while `"`char`yy''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
        - local c Characters removed were: `b'
        = local c Characters removed were: 
        - tempvar switch
        - local type = cond("`float'" == "float", "float", "double")
        = local type = cond("" == "float", "float", "double")
        - qui gen `type' `switch' = real(`1')
        = qui gen double __00001H = real(month_adjust)
        - char rename `1' `switch'
        = char rename month_adjust __00001H
        - move `switch' `1'
        = move __00001H month_adjust
        - local vl: variable label `1'
        = local vl: variable label month_adjust
        - drop `1'
        = drop month_adjust
        - if "`float'" == "" {c -(}
        = if "" == "" {c -(}
        - qui gen double `1' = `switch'
        = qui gen double month_adjust = __00001H
        - {c )-}
        - else {c -(}
          qui gen float `1' = `switch'
          {c )-}
        - move `1' `switch'
        = move month_adjust __00001H
        - label variable `1' `"`vl'"'
        = label variable month_adjust `""'
          {hline 73} begin label {hline}
          - version 10.0
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("variable", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - _label `macval(0)'
          = _label variable month_adjust `""'
          - {c )-}
          {hline 75} end label {hline}
        - char rename `switch' `1'
        = char rename __00001H month_adjust
        - char `1'[destring] `c'
        = char month_adjust[destring] Characters removed were:
        - qui count if `con' == 1
        = qui count if __000001 == 1
        - if "`percent'" != "" & r(N) != 0 {c -(}
        = if "" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
        - qui replace `con' = 0
        = qui replace __000001 = 0
        - qui compress `1'
        = qui compress month_adjust
        - local type : type `1'
        = local type : type month_adjust
        - if "`force'" != "" {c -(}
        = if "" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - if `"`b'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - else if `"`b'"' == "" & "`force'" == "" {c -(}
        = else if `""' == "" & "" == "" {c -(}
        - di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        = di as txt "month_adjust has all " "characters numeric; " as res "replaced " as txt "as " as res "byte"
        - {c )-}
        - if `s' != 0 {c -(}
        = if 1582 != 0 {c -(}
        - local valmsg = cond(`s' > 1, "values", "value")
        = local valmsg = cond(1582 > 1, "values", "value")
        - di as txt "(`s' missing `valmsg' generated)"
        = di as txt "(1582 missing values generated)"
        - {c )-}
        - local b ""
        - local c ""
        - local jj 1
        - local yy 1
        - drop `switch'
        = drop __00001H
        - mac shift
        - {c )-}
        - drop `temp'
        = drop __00001G
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "urban" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable urban
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001I = ""
        - qui replace `temp' = `1'
        = qui replace __00001I = urban
        - qui compress `temp'
        = qui compress __00001I
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001I = trim(__00001I)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001I=="" | __00001I=="." | (length(__00001I)==2 & inrange(__00001I,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001I) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 370 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "urban contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00001I
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "urban_true" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable urban_true
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001J = ""
        - qui replace `temp' = `1'
        = qui replace __00001J = urban_true
        - qui compress `temp'
        = qui compress __00001J
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001J = trim(__00001J)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001J=="" | __00001J=="." | (length(__00001J)==2 & inrange(__00001J,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001J) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 370 != 446 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "urban_true contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00001J
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "urban_false" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable urban_false
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001K = ""
        - qui replace `temp' = `1'
        = qui replace __00001K = urban_false
        - qui compress `temp'
        = qui compress __00001K
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001K = trim(__00001K)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001K=="" | __00001K=="." | (length(__00001K)==2 & inrange(__00001K,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001K) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 370 != 405 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "urban_false contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00001K
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "admin_1" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable admin_1
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001L = ""
        - qui replace `temp' = `1'
        = qui replace __00001L = admin_1
        - qui compress `temp'
        = qui compress __00001L
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001L = trim(__00001L)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001L=="" | __00001L=="." | (length(__00001L)==2 & inrange(__00001L,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001L) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 251 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "admin_1 contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00001L
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "pweight_admin_1" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable pweight_admin_1
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001M = ""
        - qui replace `temp' = `1'
        = qui replace __00001M = pweight_admin_1
        - qui compress `temp'
        = qui compress __00001M
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001M = trim(__00001M)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001M=="" | __00001M=="." | (length(__00001M)==2 & inrange(__00001M,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001M) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1582 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "pweight_admin_1 contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00001M
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "admin_2" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable admin_2
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001N = ""
        - qui replace `temp' = `1'
        = qui replace __00001N = admin_2
        - qui compress `temp'
        = qui compress __00001N
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001N = trim(__00001N)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001N=="" | __00001N=="." | (length(__00001N)==2 & inrange(__00001N,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001N) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 965 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "admin_2 contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00001N
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "pweight_admin_2" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable pweight_admin_2
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001O = ""
        - qui replace `temp' = `1'
        = qui replace __00001O = pweight_admin_2
        - qui compress `temp'
        = qui compress __00001O
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001O = trim(__00001O)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001O=="" | __00001O=="." | (length(__00001O)==2 & inrange(__00001O,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001O) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1590 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "pweight_admin_2 contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00001O
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "admin_3" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable admin_3
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001P = ""
        - qui replace `temp' = `1'
        = qui replace __00001P = admin_3
        - qui compress `temp'
        = qui compress __00001P
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001P = trim(__00001P)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001P=="" | __00001P=="." | (length(__00001P)==2 & inrange(__00001P,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001P) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1291 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "admin_3 contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00001P
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "pweight_admin_3" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable pweight_admin_3
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001Q = ""
        - qui replace `temp' = `1'
        = qui replace __00001Q = pweight_admin_3
        - qui compress `temp'
        = qui compress __00001Q
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001Q = trim(__00001Q)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001Q=="" | __00001Q=="." | (length(__00001Q)==2 & inrange(__00001Q,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001Q) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1591 != 1591 {c -(}
          local flag 1
          {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 0 == 1 & "" == "" {c -(}
          if `"`ignore'"' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
          else {c -(}
          di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
          {c )-}
          local flag 0
          local jj 1
          mac shift
          {c )-}
        - else {c -(}
        - while `"`char`yy''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
        - local c Characters removed were: `b'
        = local c Characters removed were: 
        - tempvar switch
        - local type = cond("`float'" == "float", "float", "double")
        = local type = cond("" == "float", "float", "double")
        - qui gen `type' `switch' = real(`1')
        = qui gen double __00001R = real(pweight_admin_3)
        - char rename `1' `switch'
        = char rename pweight_admin_3 __00001R
        - move `switch' `1'
        = move __00001R pweight_admin_3
        - local vl: variable label `1'
        = local vl: variable label pweight_admin_3
        - drop `1'
        = drop pweight_admin_3
        - if "`float'" == "" {c -(}
        = if "" == "" {c -(}
        - qui gen double `1' = `switch'
        = qui gen double pweight_admin_3 = __00001R
        - {c )-}
        - else {c -(}
          qui gen float `1' = `switch'
          {c )-}
        - move `1' `switch'
        = move pweight_admin_3 __00001R
        - label variable `1' `"`vl'"'
        = label variable pweight_admin_3 `""'
          {hline 73} begin label {hline}
          - version 10.0
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("variable", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - _label `macval(0)'
          = _label variable pweight_admin_3 `""'
          - {c )-}
          {hline 75} end label {hline}
        - char rename `switch' `1'
        = char rename __00001R pweight_admin_3
        - char `1'[destring] `c'
        = char pweight_admin_3[destring] Characters removed were:
        - qui count if `con' == 1
        = qui count if __000001 == 1
        - if "`percent'" != "" & r(N) != 0 {c -(}
        = if "" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
        - qui replace `con' = 0
        = qui replace __000001 = 0
        - qui compress `1'
        = qui compress pweight_admin_3
        - local type : type `1'
        = local type : type pweight_admin_3
        - if "`force'" != "" {c -(}
        = if "" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - if `"`b'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - else if `"`b'"' == "" & "`force'" == "" {c -(}
        = else if `""' == "" & "" == "" {c -(}
        - di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        = di as txt "pweight_admin_3 has all " "characters numeric; " as res "replaced " as txt "as " as res "byte"
        - {c )-}
        - if `s' != 0 {c -(}
        = if 1591 != 0 {c -(}
        - local valmsg = cond(`s' > 1, "values", "value")
        = local valmsg = cond(1591 > 1, "values", "value")
        - di as txt "(`s' missing `valmsg' generated)"
        = di as txt "(1591 missing values generated)"
        - {c )-}
        - local b ""
        - local c ""
        - local jj 1
        - local yy 1
        - drop `switch'
        = drop __00001R
        - mac shift
        - {c )-}
        - drop `temp'
        = drop __00001Q
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "admin_4" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable admin_4
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001S = ""
        - qui replace `temp' = `1'
        = qui replace __00001S = admin_4
        - qui compress `temp'
        = qui compress __00001S
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001S = trim(__00001S)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001S=="" | __00001S=="." | (length(__00001S)==2 & inrange(__00001S,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001S) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1461 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "admin_4 contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00001S
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "admin_5" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable admin_5
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001T = ""
        - qui replace `temp' = `1'
        = qui replace __00001T = admin_5
        - qui compress `temp'
        = qui compress __00001T
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001T = trim(__00001T)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001T=="" | __00001T=="." | (length(__00001T)==2 & inrange(__00001T,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001T) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1533 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "admin_5 contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00001T
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "latitude" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable latitude
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001U = ""
        - qui replace `temp' = `1'
        = qui replace __00001U = latitude
        - qui compress `temp'
        = qui compress __00001U
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001U = trim(__00001U)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001U=="" | __00001U=="." | (length(__00001U)==2 & inrange(__00001U,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001U) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1491 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "latitude contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00001U
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "longitude" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable longitude
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001V = ""
        - qui replace `temp' = `1'
        = qui replace __00001V = longitude
        - qui compress `temp'
        = qui compress __00001V
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001V = trim(__00001V)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001V=="" | __00001V=="." | (length(__00001V)==2 & inrange(__00001V,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001V) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1494 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "longitude contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00001V
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "hh_size" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable hh_size
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001W = ""
        - qui replace `temp' = `1'
        = qui replace __00001W = hh_size
        - qui compress `temp'
        = qui compress __00001W
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001W = trim(__00001W)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001W=="" | __00001W=="." | (length(__00001W)==2 & inrange(__00001W,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001W) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 445 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "hh_size contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00001W
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "cooking_fuel" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable cooking_fuel
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001X = ""
        - qui replace `temp' = `1'
        = qui replace __00001X = cooking_fuel
        - qui compress `temp'
        = qui compress __00001X
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001X = trim(__00001X)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001X=="" | __00001X=="." | (length(__00001X)==2 & inrange(__00001X,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001X) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 517 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "cooking_fuel contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00001X
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "cooking_type" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable cooking_type
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001Y = ""
        - qui replace `temp' = `1'
        = qui replace __00001Y = cooking_type
        - qui compress `temp'
        = qui compress __00001Y
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001Y = trim(__00001Y)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001Y=="" | __00001Y=="." | (length(__00001Y)==2 & inrange(__00001Y,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001Y) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1331 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "cooking_type contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00001Y
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "cooking_type_chimney" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable cooking_type_chimney
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00001Z = ""
        - qui replace `temp' = `1'
        = qui replace __00001Z = cooking_type_chimney
        - qui compress `temp'
        = qui compress __00001Z
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00001Z = trim(__00001Z)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00001Z=="" | __00001Z=="." | (length(__00001Z)==2 & inrange(__00001Z,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00001Z) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1386 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "cooking_type_chimney contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00001Z
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "cooking_location" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable cooking_location
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000020 = ""
        - qui replace `temp' = `1'
        = qui replace __000020 = cooking_location
        - qui compress `temp'
        = qui compress __000020
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000020 = trim(__000020)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000020=="" | __000020=="." | (length(__000020)==2 & inrange(__000020,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000020) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1194 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "cooking_location contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000020
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "heating_fuel" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable heating_fuel
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000021 = ""
        - qui replace `temp' = `1'
        = qui replace __000021 = heating_fuel
        - qui compress `temp'
        = qui compress __000021
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000021 = trim(__000021)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000021=="" | __000021=="." | (length(__000021)==2 & inrange(__000021,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000021) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1433 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "heating_fuel contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000021
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "heating_type" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable heating_type
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000022 = ""
        - qui replace `temp' = `1'
        = qui replace __000022 = heating_type
        - qui compress `temp'
        = qui compress __000022
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000022 = trim(__000022)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000022=="" | __000022=="." | (length(__000022)==2 & inrange(__000022,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000022) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1516 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "heating_type contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000022
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "heating_type_chimney" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable heating_type_chimney
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000023 = ""
        - qui replace `temp' = `1'
        = qui replace __000023 = heating_type_chimney
        - qui compress `temp'
        = qui compress __000023
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000023 = trim(__000023)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000023=="" | __000023=="." | (length(__000023)==2 & inrange(__000023,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000023) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1585 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "heating_type_chimney contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000023
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "lighting_fuel" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable lighting_fuel
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000024 = ""
        - qui replace `temp' = `1'
        = qui replace __000024 = lighting_fuel
        - qui compress `temp'
        = qui compress __000024
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000024 = trim(__000024)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000024=="" | __000024=="." | (length(__000024)==2 & inrange(__000024,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000024) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1256 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "lighting_fuel contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000024
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "cooking_fuel_multi" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable cooking_fuel_multi
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000025 = ""
        - qui replace `temp' = `1'
        = qui replace __000025 = cooking_fuel_multi
        - qui compress `temp'
        = qui compress __000025
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000025 = trim(__000025)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000025=="" | __000025=="." | (length(__000025)==2 & inrange(__000025,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000025) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1591 != 1591 {c -(}
          local flag 1
          {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 0 == 1 & "" == "" {c -(}
          if `"`ignore'"' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
          else {c -(}
          di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
          {c )-}
          local flag 0
          local jj 1
          mac shift
          {c )-}
        - else {c -(}
        - while `"`char`yy''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
        - local c Characters removed were: `b'
        = local c Characters removed were: 
        - tempvar switch
        - local type = cond("`float'" == "float", "float", "double")
        = local type = cond("" == "float", "float", "double")
        - qui gen `type' `switch' = real(`1')
        = qui gen double __000026 = real(cooking_fuel_multi)
        - char rename `1' `switch'
        = char rename cooking_fuel_multi __000026
        - move `switch' `1'
        = move __000026 cooking_fuel_multi
        - local vl: variable label `1'
        = local vl: variable label cooking_fuel_multi
        - drop `1'
        = drop cooking_fuel_multi
        - if "`float'" == "" {c -(}
        = if "" == "" {c -(}
        - qui gen double `1' = `switch'
        = qui gen double cooking_fuel_multi = __000026
        - {c )-}
        - else {c -(}
          qui gen float `1' = `switch'
          {c )-}
        - move `1' `switch'
        = move cooking_fuel_multi __000026
        - label variable `1' `"`vl'"'
        = label variable cooking_fuel_multi `""'
          {hline 73} begin label {hline}
          - version 10.0
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("variable", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - _label `macval(0)'
          = _label variable cooking_fuel_multi `""'
          - {c )-}
          {hline 75} end label {hline}
        - char rename `switch' `1'
        = char rename __000026 cooking_fuel_multi
        - char `1'[destring] `c'
        = char cooking_fuel_multi[destring] Characters removed were:
        - qui count if `con' == 1
        = qui count if __000001 == 1
        - if "`percent'" != "" & r(N) != 0 {c -(}
        = if "" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
        - qui replace `con' = 0
        = qui replace __000001 = 0
        - qui compress `1'
        = qui compress cooking_fuel_multi
        - local type : type `1'
        = local type : type cooking_fuel_multi
        - if "`force'" != "" {c -(}
        = if "" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - if `"`b'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - else if `"`b'"' == "" & "`force'" == "" {c -(}
        = else if `""' == "" & "" == "" {c -(}
        - di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        = di as txt "cooking_fuel_multi has all " "characters numeric; " as res "replaced " as txt "as " as res "byte"
        - {c )-}
        - if `s' != 0 {c -(}
        = if 1591 != 0 {c -(}
        - local valmsg = cond(`s' > 1, "values", "value")
        = local valmsg = cond(1591 > 1, "values", "value")
        - di as txt "(`s' missing `valmsg' generated)"
        = di as txt "(1591 missing values generated)"
        - {c )-}
        - local b ""
        - local c ""
        - local jj 1
        - local yy 1
        - drop `switch'
        = drop __000026
        - mac shift
        - {c )-}
        - drop `temp'
        = drop __000025
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "cooking_fuel_multi_true" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable cooking_fuel_multi_true
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000027 = ""
        - qui replace `temp' = `1'
        = qui replace __000027 = cooking_fuel_multi_true
        - qui compress `temp'
        = qui compress __000027
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000027 = trim(__000027)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000027=="" | __000027=="." | (length(__000027)==2 & inrange(__000027,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000027) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1591 != 1591 {c -(}
          local flag 1
          {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 0 == 1 & "" == "" {c -(}
          if `"`ignore'"' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
          else {c -(}
          di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
          {c )-}
          local flag 0
          local jj 1
          mac shift
          {c )-}
        - else {c -(}
        - while `"`char`yy''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
        - local c Characters removed were: `b'
        = local c Characters removed were: 
        - tempvar switch
        - local type = cond("`float'" == "float", "float", "double")
        = local type = cond("" == "float", "float", "double")
        - qui gen `type' `switch' = real(`1')
        = qui gen double __000028 = real(cooking_fuel_multi_true)
        - char rename `1' `switch'
        = char rename cooking_fuel_multi_true __000028
        - move `switch' `1'
        = move __000028 cooking_fuel_multi_true
        - local vl: variable label `1'
        = local vl: variable label cooking_fuel_multi_true
        - drop `1'
        = drop cooking_fuel_multi_true
        - if "`float'" == "" {c -(}
        = if "" == "" {c -(}
        - qui gen double `1' = `switch'
        = qui gen double cooking_fuel_multi_true = __000028
        - {c )-}
        - else {c -(}
          qui gen float `1' = `switch'
          {c )-}
        - move `1' `switch'
        = move cooking_fuel_multi_true __000028
        - label variable `1' `"`vl'"'
        = label variable cooking_fuel_multi_true `""'
          {hline 73} begin label {hline}
          - version 10.0
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("variable", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - _label `macval(0)'
          = _label variable cooking_fuel_multi_true `""'
          - {c )-}
          {hline 75} end label {hline}
        - char rename `switch' `1'
        = char rename __000028 cooking_fuel_multi_true
        - char `1'[destring] `c'
        = char cooking_fuel_multi_true[destring] Characters removed were:
        - qui count if `con' == 1
        = qui count if __000001 == 1
        - if "`percent'" != "" & r(N) != 0 {c -(}
        = if "" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
        - qui replace `con' = 0
        = qui replace __000001 = 0
        - qui compress `1'
        = qui compress cooking_fuel_multi_true
        - local type : type `1'
        = local type : type cooking_fuel_multi_true
        - if "`force'" != "" {c -(}
        = if "" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - if `"`b'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - else if `"`b'"' == "" & "`force'" == "" {c -(}
        = else if `""' == "" & "" == "" {c -(}
        - di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        = di as txt "cooking_fuel_multi_true has all " "characters numeric; " as res "replaced " as txt "as " as res "byte"
        - {c )-}
        - if `s' != 0 {c -(}
        = if 1591 != 0 {c -(}
        - local valmsg = cond(`s' > 1, "values", "value")
        = local valmsg = cond(1591 > 1, "values", "value")
        - di as txt "(`s' missing `valmsg' generated)"
        = di as txt "(1591 missing values generated)"
        - {c )-}
        - local b ""
        - local c ""
        - local jj 1
        - local yy 1
        - drop `switch'
        = drop __000028
        - mac shift
        - {c )-}
        - drop `temp'
        = drop __000027
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "cooking_fuel_multi_false" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable cooking_fuel_multi_false
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000029 = ""
        - qui replace `temp' = `1'
        = qui replace __000029 = cooking_fuel_multi_false
        - qui compress `temp'
        = qui compress __000029
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000029 = trim(__000029)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000029=="" | __000029=="." | (length(__000029)==2 & inrange(__000029,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000029) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 1591 != 1591 {c -(}
          local flag 1
          {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 0 == 1 & "" == "" {c -(}
          if `"`ignore'"' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
          else {c -(}
          di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
          {c )-}
          local flag 0
          local jj 1
          mac shift
          {c )-}
        - else {c -(}
        - while `"`char`yy''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
        - local c Characters removed were: `b'
        = local c Characters removed were: 
        - tempvar switch
        - local type = cond("`float'" == "float", "float", "double")
        = local type = cond("" == "float", "float", "double")
        - qui gen `type' `switch' = real(`1')
        = qui gen double __00002A = real(cooking_fuel_multi_false)
        - char rename `1' `switch'
        = char rename cooking_fuel_multi_false __00002A
        - move `switch' `1'
        = move __00002A cooking_fuel_multi_false
        - local vl: variable label `1'
        = local vl: variable label cooking_fuel_multi_false
        - drop `1'
        = drop cooking_fuel_multi_false
        - if "`float'" == "" {c -(}
        = if "" == "" {c -(}
        - qui gen double `1' = `switch'
        = qui gen double cooking_fuel_multi_false = __00002A
        - {c )-}
        - else {c -(}
          qui gen float `1' = `switch'
          {c )-}
        - move `1' `switch'
        = move cooking_fuel_multi_false __00002A
        - label variable `1' `"`vl'"'
        = label variable cooking_fuel_multi_false `""'
          {hline 73} begin label {hline}
          - version 10.0
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("variable", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - _label `macval(0)'
          = _label variable cooking_fuel_multi_false `""'
          - {c )-}
          {hline 75} end label {hline}
        - char rename `switch' `1'
        = char rename __00002A cooking_fuel_multi_false
        - char `1'[destring] `c'
        = char cooking_fuel_multi_false[destring] Characters removed were:
        - qui count if `con' == 1
        = qui count if __000001 == 1
        - if "`percent'" != "" & r(N) != 0 {c -(}
        = if "" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
        - qui replace `con' = 0
        = qui replace __000001 = 0
        - qui compress `1'
        = qui compress cooking_fuel_multi_false
        - local type : type `1'
        = local type : type cooking_fuel_multi_false
        - if "`force'" != "" {c -(}
        = if "" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - if `"`b'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
        - else if `"`b'"' == "" & "`force'" == "" {c -(}
        = else if `""' == "" & "" == "" {c -(}
        - di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        = di as txt "cooking_fuel_multi_false has all " "characters numeric; " as res "replaced " as txt "as " as res "byte"
        - {c )-}
        - if `s' != 0 {c -(}
        = if 1591 != 0 {c -(}
        - local valmsg = cond(`s' > 1, "values", "value")
        = local valmsg = cond(1591 > 1, "values", "value")
        - di as txt "(`s' missing `valmsg' generated)"
        = di as txt "(1591 missing values generated)"
        - {c )-}
        - local b ""
        - local c ""
        - local jj 1
        - local yy 1
        - drop `switch'
        = drop __00002A
        - mac shift
        - {c )-}
        - drop `temp'
        = drop __000029
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "electricity" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable electricity
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00002B = ""
        - qui replace `temp' = `1'
        = qui replace __00002B = electricity
        - qui compress `temp'
        = qui compress __00002B
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00002B = trim(__00002B)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00002B=="" | __00002B=="." | (length(__00002B)==2 & inrange(__00002B,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00002B) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 671 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "electricity contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00002B
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "electricity_true" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable electricity_true
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00002C = ""
        - qui replace `temp' = `1'
        = qui replace __00002C = electricity_true
        - qui compress `temp'
        = qui compress __00002C
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00002C = trim(__00002C)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00002C=="" | __00002C=="." | (length(__00002C)==2 & inrange(__00002C,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00002C) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 673 != 739 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "electricity_true contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00002C
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "electricity_false" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable electricity_false
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00002D = ""
        - qui replace `temp' = `1'
        = qui replace __00002D = electricity_false
        - qui compress `temp'
        = qui compress __00002D
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00002D = trim(__00002D)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00002D=="" | __00002D=="." | (length(__00002D)==2 & inrange(__00002D,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00002D) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 674 != 700 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "electricity_false contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00002D
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "housing_roof" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable housing_roof
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00002E = ""
        - qui replace `temp' = `1'
        = qui replace __00002E = housing_roof
        - qui compress `temp'
        = qui compress __00002E
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00002E = trim(__00002E)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00002E=="" | __00002E=="." | (length(__00002E)==2 & inrange(__00002E,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00002E) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 620 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "housing_roof contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00002E
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "housing_wall" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable housing_wall
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00002F = ""
        - qui replace `temp' = `1'
        = qui replace __00002F = housing_wall
        - qui compress `temp'
        = qui compress __00002F
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00002F = trim(__00002F)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00002F=="" | __00002F=="." | (length(__00002F)==2 & inrange(__00002F,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00002F) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 531 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "housing_wall contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00002F
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "housing_floor" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable housing_floor
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00002G = ""
        - qui replace `temp' = `1'
        = qui replace __00002G = housing_floor
        - qui compress `temp'
        = qui compress __00002G
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00002G = trim(__00002G)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00002G=="" | __00002G=="." | (length(__00002G)==2 & inrange(__00002G,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00002G) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 540 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "housing_floor contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00002G
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "housing_roof_num" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable housing_roof_num
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00002H = ""
        - qui replace `temp' = `1'
        = qui replace __00002H = housing_roof_num
        - qui compress `temp'
        = qui compress __00002H
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00002H = trim(__00002H)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00002H=="" | __00002H=="." | (length(__00002H)==2 & inrange(__00002H,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00002H) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 620 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "housing_roof_num contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00002H
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "housing_wall_num" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable housing_wall_num
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00002I = ""
        - qui replace `temp' = `1'
        = qui replace __00002I = housing_wall_num
        - qui compress `temp'
        = qui compress __00002I
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00002I = trim(__00002I)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00002I=="" | __00002I=="." | (length(__00002I)==2 & inrange(__00002I,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00002I) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 530 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "housing_wall_num contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00002I
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "housing_floor_num" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable housing_floor_num
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00002J = ""
        - qui replace `temp' = `1'
        = qui replace __00002J = housing_floor_num
        - qui compress `temp'
        = qui compress __00002J
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00002J = trim(__00002J)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00002J=="" | __00002J=="." | (length(__00002J)==2 & inrange(__00002J,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00002J) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 539 != 1591 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "housing_floor_num contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00002J
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "" != "" {c -(}
          capture confirm string variable `1'
          if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
          else {c -(}
          tempvar temp
          qui gen str1 `temp' = ""
          qui replace `temp' = `1'
          qui compress `temp'
          while `"`char`jj''"' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
          qui replace `temp' = trim(`temp')
          qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
          local r = r(N)
          qui count if real(`temp') >= .
          local s = r(N)
          if `r' != `s' {c -(}
          local flag 1
          {c )-}
          if `flag' == 1 & "`force'" == "" {c -(}
          if `"`ignore'"' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
          else {c -(}
          di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
          {c )-}
          local flag 0
          local jj 1
          mac shift
          {c )-}
          else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
          drop `temp'
          {c )-}
          {c )-}
        - {c )-}
        {hline 74} end destring {hline}
      - if !mi("`keep_key'") keep_key
      = if !mi("") keep_key
      - {c )-}
      {hline 81} end get {hline}
    - keep if ubcov_id == `ubcov_id'
    = keep if ubcov_id == 5622
(1590 observations deleted)
    - if _N == 0 {c -(}
      di as error "ubcov_id (`ubcov_id') doesn't exist for the topics specified ($sel_topics). Check using get, codebook"
      STOP
      {c )-}
    - foreach var of varlist * {c -(}
    - global `var' = `var'
    = global ubcov_id = ubcov_id
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"5622"' == "." & "ubcov_id" != "delimiter" global ubcov_id = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("ubcov_id", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global survey_name = survey_name
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"IDN/CENSUS"' == "." & "survey_name" != "delimiter" global survey_name = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("survey_name", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global nid = nid
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"91740"' == "." & "nid" != "delimiter" global nid = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("nid", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global ihme_loc_id = ihme_loc_id
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"IDN"' == "." & "ihme_loc_id" != "delimiter" global ihme_loc_id = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("ihme_loc_id", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global year_start = year_start
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"2010"' == "." & "year_start" != "delimiter" global year_start = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("year_start", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global year_end = year_end
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"2010"' == "." & "year_end" != "delimiter" global year_end = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("year_end", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global survey_module = survey_module
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"HH"' == "." & "survey_module" != "delimiter" global survey_module = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("survey_module", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global file_path = file_path
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_HH_ALL_Y2013M05D28.DTA"' == "." & "file_path" != "delimiter" global file_path = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("file_path", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global smaller_site_unit = smaller_site_unit
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"."' == "." & "smaller_site_unit" != "delimiter" global smaller_site_unit = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("smaller_site_unit", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global reshape = reshape
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "reshape" != "delimiter" global reshape = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("reshape", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global reshape_stem = reshape_stem
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "reshape_stem" != "delimiter" global reshape_stem = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("reshape_stem", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global reshape_keepid = reshape_keepid
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "reshape_keepid" != "delimiter" global reshape_keepid = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("reshape_keepid", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global subset = subset
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "subset" != "delimiter" global subset = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("subset", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global delimiter = delimiter
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "delimiter" != "delimiter" global delimiter = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("delimiter", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global strata = strata
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "strata" != "delimiter" global strata = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("strata", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global psu = psu
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"province, district, sub_district, village, census_block"' == "." & "psu" != "delimiter" global psu = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("psu", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global pweight = pweight
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "pweight" != "delimiter" global pweight = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("pweight", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global hhweight = hhweight
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"weight"' == "." & "hhweight" != "delimiter" global hhweight = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("hhweight", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global geospatial_id = geospatial_id
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"province, district"' == "." & "geospatial_id" != "delimiter" global geospatial_id = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("geospatial_id", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global hh_id = hh_id
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"hh_number, province, district, sub_district, village, census_block, sls_number, physical_building, census_building"' == "." & "hh_id" != "delimiter" global hh_id = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("hh_id", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global line_id = line_id
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "line_id" != "delimiter" global line_id = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("line_id", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global sex = sex
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "sex" != "delimiter" global sex = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("sex", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global sex_male = sex_male
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "sex_male" != "delimiter" global sex_male = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("sex_male", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global sex_female = sex_female
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "sex_female" != "delimiter" global sex_female = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("sex_female", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global age_categorical = age_categorical
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "age_categorical" != "delimiter" global age_categorical = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("age_categorical", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global age_categorical_type = age_categorical_type
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"."' == "." & "age_categorical_type" != "delimiter" global age_categorical_type = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("age_categorical_type", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global age_categorical_parse = age_categorical_parse
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"."' == "." & "age_categorical_parse" != "delimiter" global age_categorical_parse = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("age_categorical_parse", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global age_year = age_year
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "age_year" != "delimiter" global age_year = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("age_year", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global age_year_missing = age_year_missing
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "age_year_missing" != "delimiter" global age_year_missing = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("age_year_missing", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global age_month = age_month
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "age_month" != "delimiter" global age_month = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("age_month", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global age_month_missing = age_month_missing
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "age_month_missing" != "delimiter" global age_month_missing = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("age_month_missing", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global birth_date = birth_date
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "birth_date" != "delimiter" global birth_date = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("birth_date", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global birth_date_format = birth_date_format
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "birth_date_format" != "delimiter" global birth_date_format = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("birth_date_format", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global birth_day = birth_day
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "birth_day" != "delimiter" global birth_day = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("birth_day", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global birth_month = birth_month
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "birth_month" != "delimiter" global birth_month = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("birth_month", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global birth_year = birth_year
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "birth_year" != "delimiter" global birth_year = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("birth_year", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global int_date = int_date
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "int_date" != "delimiter" global int_date = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("int_date", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global int_date_format = int_date_format
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "int_date_format" != "delimiter" global int_date_format = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("int_date_format", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global int_day = int_day
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "int_day" != "delimiter" global int_day = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("int_day", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global int_month = int_month
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "int_month" != "delimiter" global int_month = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("int_month", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global int_year = int_year
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "int_year" != "delimiter" global int_year = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("int_year", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global year_adjust = year_adjust
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"."' == "." & "year_adjust" != "delimiter" global year_adjust = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("year_adjust", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global month_adjust = month_adjust
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"."' == "." & "month_adjust" != "delimiter" global month_adjust = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("month_adjust", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global urban = urban
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"urban_rural"' == "." & "urban" != "delimiter" global urban = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("urban", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global urban_true = urban_true
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"1"' == "." & "urban_true" != "delimiter" global urban_true = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("urban_true", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global urban_false = urban_false
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"2"' == "." & "urban_false" != "delimiter" global urban_false = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("urban_false", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global admin_1 = admin_1
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"province"' == "." & "admin_1" != "delimiter" global admin_1 = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("admin_1", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global pweight_admin_1 = pweight_admin_1
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "pweight_admin_1" != "delimiter" global pweight_admin_1 = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("pweight_admin_1", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global admin_2 = admin_2
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"district"' == "." & "admin_2" != "delimiter" global admin_2 = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("admin_2", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global pweight_admin_2 = pweight_admin_2
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "pweight_admin_2" != "delimiter" global pweight_admin_2 = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("pweight_admin_2", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global admin_3 = admin_3
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"sub_district"' == "." & "admin_3" != "delimiter" global admin_3 = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("admin_3", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global pweight_admin_3 = pweight_admin_3
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"."' == "." & "pweight_admin_3" != "delimiter" global pweight_admin_3 = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("pweight_admin_3", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global admin_4 = admin_4
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "admin_4" != "delimiter" global admin_4 = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("admin_4", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global admin_5 = admin_5
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "admin_5" != "delimiter" global admin_5 = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("admin_5", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global latitude = latitude
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "latitude" != "delimiter" global latitude = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("latitude", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global longitude = longitude
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "longitude" != "delimiter" global longitude = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("longitude", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global hh_size = hh_size
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "hh_size" != "delimiter" global hh_size = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("hh_size", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global cooking_fuel = cooking_fuel
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"cooking"' == "." & "cooking_fuel" != "delimiter" global cooking_fuel = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("cooking_fuel", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global cooking_type = cooking_type
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "cooking_type" != "delimiter" global cooking_type = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("cooking_type", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global cooking_type_chimney = cooking_type_chimney
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "cooking_type_chimney" != "delimiter" global cooking_type_chimney = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("cooking_type_chimney", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global cooking_location = cooking_location
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "cooking_location" != "delimiter" global cooking_location = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("cooking_location", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global heating_fuel = heating_fuel
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "heating_fuel" != "delimiter" global heating_fuel = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("heating_fuel", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global heating_type = heating_type
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "heating_type" != "delimiter" global heating_type = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("heating_type", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global heating_type_chimney = heating_type_chimney
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "heating_type_chimney" != "delimiter" global heating_type_chimney = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("heating_type_chimney", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global lighting_fuel = lighting_fuel
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"lighting"' == "." & "lighting_fuel" != "delimiter" global lighting_fuel = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("lighting_fuel", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global cooking_fuel_multi = cooking_fuel_multi
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"."' == "." & "cooking_fuel_multi" != "delimiter" global cooking_fuel_multi = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("cooking_fuel_multi", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global cooking_fuel_multi_true = cooking_fuel_multi_true
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"."' == "." & "cooking_fuel_multi_true" != "delimiter" global cooking_fuel_multi_true = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("cooking_fuel_multi_true", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global cooking_fuel_multi_false = cooking_fuel_multi_false
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"."' == "." & "cooking_fuel_multi_false" != "delimiter" global cooking_fuel_multi_false = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("cooking_fuel_multi_false", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global electricity = electricity
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "electricity" != "delimiter" global electricity = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("electricity", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global electricity_true = electricity_true
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "electricity_true" != "delimiter" global electricity_true = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("electricity_true", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global electricity_false = electricity_false
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "electricity_false" != "delimiter" global electricity_false = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("electricity_false", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global housing_roof = housing_roof
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "housing_roof" != "delimiter" global housing_roof = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("housing_roof", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global housing_wall = housing_wall
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "housing_wall" != "delimiter" global housing_wall = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("housing_wall", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global housing_floor = housing_floor
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"floor"' == "." & "housing_floor" != "delimiter" global housing_floor = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("housing_floor", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global housing_roof_num = housing_roof_num
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "housing_roof_num" != "delimiter" global housing_roof_num = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("housing_roof_num", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global housing_wall_num = housing_wall_num
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `""' == "." & "housing_wall_num" != "delimiter" global housing_wall_num = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("housing_wall_num", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - global `var' = `var'
    = global housing_floor_num = housing_floor_num
    - if `"${c -(}`var'{c )-}"' == "." & "`var'" != "delimiter" global `var' = ""
    = if `"floor "' == "." & "housing_floor_num" != "delimiter" global housing_floor_num = ""
    - if regexm("`var'", "merge_file") {c -(}
    = if regexm("housing_floor_num", "merge_file") {c -(}
      if regexm("${c -(}`var'{c )-}", "J:") & (c(os) == "Unix" | c(os) == "MacOSX") {c -(}
      global `var' = subinstr("${c -(}`var'{c )-}", "J:", "$j", .)
      {c )-}
      {c )-}
    - {c )-}
    - di as error "********************************************************************"
{err}********************************************************************
    {txt}- di as error "LOADED SURVEY"
{err}LOADED SURVEY
    {txt}- di as error "ubcov_id: `ubcov_id'"
    = di as error "ubcov_id: 5622"
{err}ubcov_id: 5622
    {txt}- di as error "nid: $nid | survey_name: $survey_name"
    = di as error "nid: 91740 | survey_name: IDN/CENSUS"
{err}nid: 91740 | survey_name: IDN/CENSUS
    {txt}- di as error "ihme_loc_id: $ihme_loc_id | years: $year_start - $year_end | survey_module: $survey_module"
    = di as error "ihme_loc_id: IDN | years: 2010 - 2010 | survey_module: HH"
{err}ihme_loc_id: IDN | years: 2010 - 2010 | survey_module: HH
    {txt}- di as error "base_path: $file_path"
    = di as error "base_path: J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_HH_ALL_Y2013M05D28.DTA"
{err}base_path: J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_HH_ALL_Y2013M05D28.DTA
    {txt}- di as error "********************************************************************"
{err}********************************************************************
{txt}    {hline 73} end load_codebook {hline}
  - if regexm(lower("$file_path"), "j:/data/incoming|j:/temp|j:/work") {c -(}
  = if regexm(lower("J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_HH_ALL_Y2013M05D28.DTA"), "j:/data/incoming|j:/temp|j:/work") {c -(}
    di as error "Please contact the data team to index file ($file_path)."
    STOP
    {c )-}
  - if mi("$delimiter") load $file_path
  = if mi("") load J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_HH_ALL_Y2013M05D28.DTA
    {hline 80} begin load {hline}
    - syntax anything, [delimiter(str)]
    - local path `anything'
    = local path J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_HH_ALL_Y2013M05D28.DTA
    - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
    - local path = subinstr("`path'", "J:", "$j", .)
    = local path = subinstr("J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_HH_ALL_Y2013M05D28.DTA", "J:", "/home/j", .)
    - {c )-}
    - else if c(os) == "Windows" {c -(}
      local path = subinstr("`path'", "/home/j", "$j", .)
      {c )-}
    - tokenize `path', p(".")
    = tokenize /home/j/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_HH_ALL_Y2013M05D28.DTA, p(".")
    - local file = "`1'"
    = local file = "/home/j/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_HH_ALL_Y2013M05D28"
    - local ext = lower("`3'")
    = local ext = lower("DTA")
    - if "`ext'" == "" {c -(}
    = if "dta" == "" {c -(}
      di as error "Path needs a file extension"
      STOP
      {c )-}
    - if "`ext'" == "dta" {c -(}
    = if "dta" == "dta" {c -(}
    - use "`path'", clear
    = use "/home/j/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_HH_ALL_Y2013M05D28.DTA", clear
(Written by R.              )
    - {c )-}
    - else if inlist("`ext'", "csv", "tab") {c -(}
    = else if inlist("dta", "csv", "tab") {c -(}
      if mi("`delimiter'") import delimited using "`path'", clear
      else import delimited using "`path'", clear delimiters("`delimiter'")
      {c )-}
    - else if inlist("`ext'", "txt") {c -(}
    = else if inlist("dta", "txt") {c -(}
      import delimited using "`path'", clear delim(" ")
      {c )-}
    - else if inlist("`ext'", "xlsx", "xls") {c -(}
    = else if inlist("dta", "xlsx", "xls") {c -(}
      import excel using "`path'", clear first
      {c )-}
    - else if inlist("`ext'", "dbf") {c -(}
    = else if inlist("dta", "dbf") {c -(}
      rload "`path'"
      {c )-}
    - else if inlist("`ext'", "sav") {c -(}
    = else if inlist("dta", "sav") {c -(}
      cap which usespss
      if _rc {c -(}
      net from http://radyakin.org/transfer/usespss/beta
      net install usespss
      {c )-}
      cap qui: usespss "`path'", clear
      if _rc {c -(}
      rload "`path'"
      {c )-}
      {c )-}
    - else if inlist("`ext'", "xpt") {c -(}
    = else if inlist("dta", "xpt") {c -(}
      clear
      fdause `path'
      {c )-}
    - else if inlist("`ext'", "da") {c -(}
    = else if inlist("dta", "da") {c -(}
      infile using "`file'.dct", using("`file'.da") clear
      {c )-}
    - else {c -(}
      di as error "`ext' not accepted"
      {c )-}
    - drop_dupe_vars
      {hline 68} begin drop_dupe_vars {hline}
      - syntax
      - qui: ds
        {hline 78} begin ds {hline}
        - version 9
        - local version : di "version " string(_caller()) ":"
        - if (_caller() <= 4) {c -(}
          `version' describe, simple
          exit
          {c )-}
        - else {c -(}
        - ds_util `0'
        = ds_util 
          {hline 71} begin ds_util {hline}
          - version 8
          - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detail Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
          - if "`varlist'" == "" {c -(}
          = if "province district sub_district village urban_rural census_block sls_number physical_building census_building hh_number death_occured deaths_total floor size2 lighting cooking drinking_water toilet septic_tank telephone internet tenure ownership jenis_surat_tanah weight" == "" {c -(}
            exit
            {c )-}
          - if !inrange(`indent',0,244) {c -(}
          = if !inrange(0,0,244) {c -(}
            di as err "indent() should be in the range 0..244"
            exit 198
            {c )-}
          - if !inrange(`varwidth',5,32) {c -(}
          = if !inrange(12,5,32) {c -(}
            di as err "varwidth() should be in the range 5..32"
            exit 198
            {c )-}
          - if !inrange(`skip',1,10) {c -(}
          = if !inrange(2,1,10) {c -(}
            di as err "skip() should be in the range 1..10"
            exit 198
            {c )-}
          - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
          = local nopts = (`""' != "") + (`""' != "") + ("" != "")
          - if `nopts' == 3 {c -(}
          = if 0 == 3 {c -(}
            di as err "may not combine options has(), not(), and not"
            exit 198
            {c )-}
          - else if `nopts' == 2 {c -(}
          = else if 0 == 2 {c -(}
            if (`"`has'"' == "") {c -(}
            di as err "may not combine options not() and not"
            exit 198
            {c )-}
            else if (`"`not'"' == "") {c -(}
            di as err "may not combine options has() and not"
            exit 198
            {c )-}
            else if (`"`not2'"' == "") {c -(}
            di as err "may not combine options has() and not()"
            exit 198
            {c )-}
            {c )-}
          - if `"`not'"' != "" {c -(}
          = if `""' != "" {c -(}
            local has `"`not'"'
            local opt "not"
            {c )-}
          - else if `"`has'"' != "" {c -(}
          = else if `""' != "" {c -(}
            local opt "has"
            {c )-}
          - local inse = "`insensitive'" != ""
          = local inse = "" != ""
          - if `"`has'"' != "" {c -(}
          = if `""' != "" {c -(}
            CheckHas `"`has'"' "`opt'" "`inse'"
            if "`what'" == "varl" | "`what'" == "vall" {c -(}
            VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
            {c )-}
            else if "`what'" == "f" {c -(}
            Format `"`which'"' "`varlist'" "`inse'"
            {c )-}
            else if "`what'" == "c" {c -(}
            Char `"`which'"' "`varlist'" "`inse'"
            {c )-}
            else if "`what'" == "t" {c -(}
            Type `"`which'"' "`varlist'"
            {c )-}
            if `"`not'"' != "" {c -(}
            local varlist : list varlist - vlist
            {c )-}
            else if `"`has'"' != "" {c -(}
            local varlist "`vlist'"
            {c )-}
            {c )-}
          - if `"`not2'"' != "" {c -(}
          = if `""' != "" {c -(}
            unab all : *
            local varlist : list all - varlist
            {c )-}
          - if "`varlist'" == "" {c -(}
          = if "province district sub_district village urban_rural census_block sls_number physical_building census_building hh_number death_occured deaths_total floor size2 lighting cooking drinking_water toilet septic_tank telephone internet tenure ownership jenis_surat_tanah weight" == "" {c -(}
            exit
            {c )-}
          - if "`alpha'" != "" {c -(}
          = if "" != "" {c -(}
            local varlist : list sort varlist
            {c )-}
          - if "`detail'" != "" {c -(}
          = if "" != "" {c -(}
            describe `varlist'
            {c )-}
          - else {c -(}
          - local nvar : word count `varlist'
          = local nvar : word count province district sub_district village urban_rural census_block sls_number physical_building census_building hh_number death_occured deaths_total floor size2 lighting cooking drinking_water toilet septic_tank telephone internet tenure ownership jenis_surat_tanah weight
          - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
          = local ncol = int((99 + 2) / (12 + 2))
          - local i 0
          - local vlist
          - foreach v of local varlist {c -(}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village urban_rural"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village urban_rural census_block"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village urban_rural census_block sls_number"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h"'
          - {c )-}
          - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
          = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight"'
          - {c )-}
          - DisplayInCols txt `indent' `skip' 0 `vlist'
          = DisplayInCols txt 0 2 0  province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            {hline 55} begin ds_util.DisplayInCols {hline}
            - gettoken sty 0 : 0
            - gettoken indent 0 : 0
            - gettoken pad 0 : 0
            - gettoken wid 0 : 0
            - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
            = local indent = cond(0==. | 0<0, 0, 0)
            - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
            = local pad = cond(2==. | 2<1, 2, 2)
            - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
            = local wid = cond(0==. | 0<0, 0, 0)
            - local n : list sizeof 0
            - if `n'==0 {c -(}
            = if 25==0 {c -(}
              exit
              {c )-}
            - foreach x of local 0 {c -(}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(0, length(`"province"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(8, length(`"district"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(8, length(`"sub_district"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"village"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"urban_rural"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"census_block"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"sls_number"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"physical_b~g"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"census_bui~g"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"hh_number"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"death_occu~d"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"deaths_total"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"floor"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"size2"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"lighting"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"cooking"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"drinking_w~r"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"toilet"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"septic_tank"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"telephone"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"internet"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"tenure"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"ownership"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"jenis_sura~h"'))
            - {c )-}
            - local wid = max(`wid', length(`"`x'"'))
            = local wid = max(12, length(`"weight"'))
            - {c )-}
            - local wid = `wid' + `pad'
            = local wid = 12 + 2
            - local cols = int((`c(linesize)'+1-`indent')/`wid')
            = local cols = int((99+1-0)/14)
            - if `cols' < 2 {c -(}
            = if 7 < 2 {c -(}
              if `indent' {c -(}
              local col "_column(`=`indent'+1')"
              {c )-}
              foreach x of local 0 {c -(}
              di as `sty' `col' `"`x'"'
              {c )-}
              exit
              {c )-}
            - local lines = `n'/`cols'
            = local lines = 25/7
            - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
            = local lines = int(cond(3.571428571428572>int(3.571428571428572), 3.571428571428572+1, 3.571428571428572))
            - forvalues i=1(1)`lines' {c -(}
            = forvalues i=1(1)4 {c -(}
            - local top = min((`cols')*`lines'+`i', `n')
            = local top = min((7)*4+1, 25)
            - local col = `indent' + 1
            = local col = 0 + 1
            - forvalues j=`i'(`lines')`top' {c -(}
            = forvalues j=1(4)25 {c -(}
            - local x : word `j' of `0'
            = local x : word 1 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(1) "province" _c
            - local col = `col' + `wid'
            = local col = 1 + 14
            - {c )-}
            - local x : word `j' of `0'
            = local x : word 5 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(15) "urban_rural" _c
            - local col = `col' + `wid'
            = local col = 15 + 14
            - {c )-}
            - local x : word `j' of `0'
            = local x : word 9 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(29) "census_bui~g" _c
            - local col = `col' + `wid'
            = local col = 29 + 14
            - {c )-}
            - local x : word `j' of `0'
            = local x : word 13 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(43) "floor" _c
            - local col = `col' + `wid'
            = local col = 43 + 14
            - {c )-}
            - local x : word `j' of `0'
            = local x : word 17 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(57) "drinking_w~r" _c
            - local col = `col' + `wid'
            = local col = 57 + 14
            - {c )-}
            - local x : word `j' of `0'
            = local x : word 21 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(71) "internet" _c
            - local col = `col' + `wid'
            = local col = 71 + 14
            - {c )-}
            - local x : word `j' of `0'
            = local x : word 25 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(85) "weight" _c
            - local col = `col' + `wid'
            = local col = 85 + 14
            - {c )-}
            - di as `sty'
            = di as txt
            - {c )-}
            - local top = min((`cols')*`lines'+`i', `n')
            = local top = min((7)*4+2, 25)
            - local col = `indent' + 1
            = local col = 0 + 1
            - forvalues j=`i'(`lines')`top' {c -(}
            = forvalues j=2(4)25 {c -(}
            - local x : word `j' of `0'
            = local x : word 2 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(1) "district" _c
            - local col = `col' + `wid'
            = local col = 1 + 14
            - {c )-}
            - local x : word `j' of `0'
            = local x : word 6 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(15) "census_block" _c
            - local col = `col' + `wid'
            = local col = 15 + 14
            - {c )-}
            - local x : word `j' of `0'
            = local x : word 10 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(29) "hh_number" _c
            - local col = `col' + `wid'
            = local col = 29 + 14
            - {c )-}
            - local x : word `j' of `0'
            = local x : word 14 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(43) "size2" _c
            - local col = `col' + `wid'
            = local col = 43 + 14
            - {c )-}
            - local x : word `j' of `0'
            = local x : word 18 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(57) "toilet" _c
            - local col = `col' + `wid'
            = local col = 57 + 14
            - {c )-}
            - local x : word `j' of `0'
            = local x : word 22 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(71) "tenure" _c
            - local col = `col' + `wid'
            = local col = 71 + 14
            - {c )-}
            - di as `sty'
            = di as txt
            - {c )-}
            - local top = min((`cols')*`lines'+`i', `n')
            = local top = min((7)*4+3, 25)
            - local col = `indent' + 1
            = local col = 0 + 1
            - forvalues j=`i'(`lines')`top' {c -(}
            = forvalues j=3(4)25 {c -(}
            - local x : word `j' of `0'
            = local x : word 3 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(1) "sub_district" _c
            - local col = `col' + `wid'
            = local col = 1 + 14
            - {c )-}
            - local x : word `j' of `0'
            = local x : word 7 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(15) "sls_number" _c
            - local col = `col' + `wid'
            = local col = 15 + 14
            - {c )-}
            - local x : word `j' of `0'
            = local x : word 11 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(29) "death_occu~d" _c
            - local col = `col' + `wid'
            = local col = 29 + 14
            - {c )-}
            - local x : word `j' of `0'
            = local x : word 15 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(43) "lighting" _c
            - local col = `col' + `wid'
            = local col = 43 + 14
            - {c )-}
            - local x : word `j' of `0'
            = local x : word 19 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(57) "septic_tank" _c
            - local col = `col' + `wid'
            = local col = 57 + 14
            - {c )-}
            - local x : word `j' of `0'
            = local x : word 23 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(71) "ownership" _c
            - local col = `col' + `wid'
            = local col = 71 + 14
            - {c )-}
            - di as `sty'
            = di as txt
            - {c )-}
            - local top = min((`cols')*`lines'+`i', `n')
            = local top = min((7)*4+4, 25)
            - local col = `indent' + 1
            = local col = 0 + 1
            - forvalues j=`i'(`lines')`top' {c -(}
            = forvalues j=4(4)25 {c -(}
            - local x : word `j' of `0'
            = local x : word 4 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(1) "village" _c
            - local col = `col' + `wid'
            = local col = 1 + 14
            - {c )-}
            - local x : word `j' of `0'
            = local x : word 8 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(15) "physical_b~g" _c
            - local col = `col' + `wid'
            = local col = 15 + 14
            - {c )-}
            - local x : word `j' of `0'
            = local x : word 12 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(29) "deaths_total" _c
            - local col = `col' + `wid'
            = local col = 29 + 14
            - {c )-}
            - local x : word `j' of `0'
            = local x : word 16 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(43) "cooking" _c
            - local col = `col' + `wid'
            = local col = 43 + 14
            - {c )-}
            - local x : word `j' of `0'
            = local x : word 20 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(57) "telephone" _c
            - local col = `col' + `wid'
            = local col = 57 + 14
            - {c )-}
            - local x : word `j' of `0'
            = local x : word 24 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number death_occu~d deaths_total floor size2 lighting cooking drinking_w~r toilet septic_tank telephone internet tenure ownership jenis_sura~h weight
            - di as `sty' _column(`col') "`x'" _c
            = di as txt _column(71) "jenis_sura~h" _c
            - local col = `col' + `wid'
            = local col = 71 + 14
            - {c )-}
            - di as `sty'
            = di as txt
            - {c )-}
            {hline 57} end ds_util.DisplayInCols {hline}
          - {c )-}
          - return local varlist `varlist'
          = return local varlist province district sub_district village urban_rural census_block sls_number physical_building census_building hh_number death_occured deaths_total floor size2 lighting cooking drinking_water toilet septic_tank telephone internet tenure ownership jenis_surat_tanah weight
          {hline 73} end ds_util {hline}
        - exit
        {hline 80} end ds {hline}
      - local vars `r(varlist)'
      = local vars province district sub_district village urban_rural census_block sls_number physical_building census_building hh_number death_occured deaths_total floor size2 lighting cooking drinking_water toilet septic_tank telephone internet tenure ownership jenis_surat_tanah weight
      - local lowervars = lower( `"`vars'"' )
      = local lowervars = lower( `"province district sub_district village urban_rural census_block sls_number physical_building census_building hh_number death_occured deaths_total floor size2 lighting cooking drinking_water toilet septic_tank telephone internet tenure ownership jenis_surat_tanah weight"' )
      - local dups : list dups lowervars
      - if "`dups'" != "" {c -(}
      = if "" != "" {c -(}
        foreach dup in `dups' {c -(}
        local pos : list posof `"`dup'"' in lowervars
        if `pos' != 0 {c -(}
        local drop : word `pos' of `vars'
        drop `drop'
        {c )-}
        {c )-}
        {c )-}
      {hline 70} end drop_dupe_vars {hline}
    - cap rename *, lower
      =struct rename_peldf {c -(}
      =        string scalar        element
      =        real scalar  elementtype
      =        real scalar            arg
      =        real scalar            match
      =struct rename_patterndf {c -(}
      =        real scalar  patterntype
      =        string scalar            original
      =        struct rename_peldf rowvector          ellist
      =        real rowvector            n_of
      =        string rowvector            varnames
      =        string matrix            pieces
      =struct rename_optiondf {c -(}
      =        real scalar       isrecase
      =        real scalar       isrecase_upper, isrecase_lower, isrecase_proper
      =        real scalar       isdryrun
      =        real scalar       isrenumber, isaddnumber
      =        real scalar            from
      =        real scalar       issort
      =        real scalar       isdebug
      =        real scalar       istest
      =        real scalar       isr
      =void rename_optiondf_init(struct rename_optiondf scalar option)
      =        option.isrecase = option.isdryrun = 0
      =                                option.isrecase_proper = 0
      =        option.isrenumber = option.isaddnumber = 0
      =        option.issort     = 0
      =        option.isdebug    = 0
      =        option.istest     = 0
      =        option.isr        = 0
      =struct rename_renamedf {c -(}
      =        struct rename_patterndf rowvector      oldplist
      =        struct rename_patterndf rowvector      newplist
      =        struct rename_optiondf scalar       option
      =void rename_cmd(string scalar thirdarg)
      =        string scalar    input
      =real scalar can_do_fast(string scalar input)
      =        string rowvector    token
      =        real scalar    rc
      =        if (length(token)!=2) return(0)
      =        if (!st_isname(token[1])) return(0)
      =        if (!st_isname(token[2])) return(0)
      =        if (token[1] == token[2]) return(0)
      =        return(1)
      =void rename_cmd_u(string scalar input)
      =        struct rename_renamedf scalar       ren
      =                dump_pattern(ren.oldplist, "old after parsing", 0)
      =                dump_pattern(ren.newplist, "new after parsing", 0)
      =void xeq_old_to_new(struct rename_renamedf scalar ren)
      =                dump_pattern(ren.oldplist, "old after linkage", 0)
      =                dump_pattern(ren.newplist, "new after linkage", 0)
      =                dump_pattern(ren.oldplist, "old final", 1)
      =                dump_pattern(ren.newplist, "new final", 1)
      =void xeq_recase(struct rename_renamedf scalar ren)
      =        fillin_old_varnames(ren.oldplist, ren.newplist, 0)
      =                dump_pattern(ren.oldplist, "old final", 1)
      =                dump_pattern(ren.newplist, "new final", 1)
      =void parse_cmd(struct rename_renamedf scalar ren, string scalar input)
      =        real scalar            c
      =        string scalar            lhs, ops
      =        string scalar            oldnames, newnames
      =        parse_cmd_pat_els(ren.oldplist, oldnames, 0)
      =                parse_cmd_pat_els(ren.newplist, newnames, 1)
      =real scalar parse_cmd_commaloc(string scalar s)
      =        real scalar    i, L
      =        real scalar    nestlev
      =        string scalar    c
      =void getarg(string scalar input, string scalar arg, string scalar rest)
      =        real scalar    L, npar, i
      =        string scalar    c
      =void parse_cmd_options(struct rename_optiondf scalar option, string scalar ops)
      =        string scalar            token
      =        transmorphic      t
      =        rename_optiondf_init(option)
      =void confirm_options_consistent(struct rename_optiondf scalar option)
      =        string rowvector    list
      =void parse_cmd_options_u(struct rename_optiondf scalar option, string scalar token, transmorphic t)
      =real scalar parse_cmd_options_u_std(struct rename_optiondf scalar option, string scalar source)
      =        real scalar    l
      =                option.isdebug = 1
      =                option.isdryrun = 1
      =                option.isrecase = option.isrecase_lower = 1
      =                option.isrecase = option.isrecase_proper= 1
      =                option.isr = 1
      =                option.issort = 1
      =                option.istest = 1
      =                option.isrecase = option.isrecase_upper = 1
      =        else    return(0)
      =        return(1)
      =real scalar parse_cmd_options_u_number(struct rename_optiondf scalar option, string scalar source,
      =                                                                transmorphic t)
      =        string scalar            token
      =        real scalar            from
      =        real scalar            l
      =        string scalar            op
      =        if (option.isrenumber | option.isaddnumber)  return(0)
      =                option.isrenumber = 1
      =                option.isaddnumber = 1
      =                return(1)
      =        return(1)
      =void parse_cmd_pat_els(struct rename_patterndf rowvector pat, string scalar toparse, real pattype)
      =        string scalar            token, curlist
      =        transmorphic      t
      =        real scalar       first
      =        first   = 1
      =                                first    = 1
      =                                first   = 0
      =void parse_cmd_pat_el(struct rename_patterndf rowvector pat, string scalar token, real pattype)
      =        string scalar            mytoken
      =        struct rename_patterndf scalar      mypat
      =        real scalar            i, j
      =        real matrix            found
      =        mypat.n_of        = J(1, (8), 0)
      =        confirm_not_empty(mytoken, pattype==0 ?
      =                if (i=strpos(mytoken, "*")) found = (found \ (i, (3)))
      =                if (i=strpos(mytoken, "?")) found = (found \ (i, (4) ))
      =                if (i=strpos(mytoken, "#")) found = (found \ (i, (5)))
      =                if (i=strpos(mytoken, "(")) found = (found \ (i, (6)))
      =                if (i=strpos(mytoken, "=")) found = (found \ (i, (7)))
      =                if (i=strpos(mytoken, ".")) found = (found \ (i, (8)))
      =                        if (i==(3)) {c -(}
      =                        else if (i==(4)) {c -(}
      =                        else if (i==(5)) {c -(}
      =                        else if (i==(6)) {c -(}
      =                        else if (i==(7)) {c -(}
      =                        else if (i==(8)) {c -(}
      =string scalar set_subscript(struct rename_patterndf scalar pat, string scalar token, real pt)
      =        real scalar    i
      =        string scalar    c
      =        if (pt != 1) {c -(}
      =        if (pt != 1)              return(token)
      =void set_pat_ETstrlist(struct rename_patterndf scalar pat, string scalar token)
      =        struct rename_peldf scalar          el
      =        el.elementtype = (1)
      =        pat.n_of[(1)] = pat.n_of[(1)] + 1
      =string scalar set_pat_str(struct rename_patterndf scalar pat, string scalar token)
      =        struct rename_peldf scalar          el
      =        el.elementtype = (2)
      =string scalar set_pat_ETstar(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar          el
      =        if (pat.patterntype == 0 && length(pat.ellist)) {c -(}
      =                if (pat.ellist[length(pat.ellist)].elementtype == (3)) {c -(}
      =        el.elementtype = (3)
      =string scalar set_pat_ETnum_v(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar          el
      =        if (pat.patterntype == 0 && length(pat.ellist)) {c -(}
      =                if (pat.ellist[length(pat.ellist)].elementtype == (5)) {c -(}
      =        el.elementtype = (5)
      =string scalar set_pat_ETeq(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar  el
      =        if (pat.patterntype == 0) {c -(}
      =        el.elementtype = (7)
      =string scalar set_pat_ETodot(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar  el
      =        if (pat.patterntype == 0) {c -(}
      =        el.elementtype = (8)
      =string scalar set_pat_ETqm(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar  el
      =        el.elementtype = (4)
      =string scalar set_pat_ETnum_f(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar          el
      =        real scalar            j
      =        el.elementtype = (6)
      =        if (el.arg > 10) {c -(}
      =void make_patternlist_lengths_equal(struct rename_renamedf scalar ren)
      =void build_recase_newpattern(struct rename_renamedf scalar ren)
      =        real scalar    i
      =        ren.newplist = rename_patterndf(length(ren.oldplist))
      =                ren.newplist[i].n_of        = J(1, (8), 0)
      =void link_patterns(struct rename_renamedf scalar ren)
      =        real scalar    i, jn
      =real scalar check_and_fix_ETnum(struct rename_patterndf scalar newp, struct rename_optiondf scalar option)
      =        real scalar            n, j, jn
      =        real scalar  tt
      =                if (tt==(5) | tt==(6)) {c -(}
      =                                (tt==(5) ? (9) : (10))
      =struct rename_linklocdf {c -(}
      =        real scalar    j_old, last_sequential_j_old
      =        real scalar    j_new
      =        real scalar    jn
      =        real rowvector    mapsub
      =void rename_linklocdf_init(struct rename_linklocdf scalar ll, real scalar jn)
      =void rename_linklocdf_next(struct rename_linklocdf scalar ll, struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp)
      =        real scalar subscr
      =real scalar map_subscript(real scalar subscr, real rowvector mapsub, struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp)
      =void link_patterns_u(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar jn)
      =        struct rename_linklocdf scalar      ll
      =        rename_linklocdf_init(ll, jn)
      =        rename_linklocdf_next(ll, oldp, newp)
      =                rename_linklocdf_next(ll, oldp, newp)
      =real rowvector pelidx_of_wcidx(struct rename_patterndf scalar oldp)
      =        real rowvector            toret
      =        real scalar            i
      =        real scalar  tt
      =                if (tt!=(1) & tt!=(2)) toret = (toret, i)
      =void confirm_wildcards_link(struct rename_patterndf scalar oldp, real scalar j_old,
      =                            struct rename_patterndf scalar newp, real scalar j_new)
      =        real scalar  tt_old, tt_new
      =        if (tt_new == (3)) return
      =        if (tt_new == (8))  return
      =        if (tt_new == (4)) {c -(}
      =                if (tt_old == (4)) return
      =        if (tt_new==(5) | tt_new==(6)) {c -(}
      =                if (tt_old==(5) | tt_old==(6)) return
      =string scalar printable_wildcard(struct rename_peldf scalar el)
      =        real scalar  tt
      =        if (tt == (3))  return("*")
      =        if (tt == (4))    return("?")
      =        if (tt == (8))  return(".")
      =        if (tt == (5)) return("#")
      =        if (tt == (6)) return("(" + el.arg*"*" + ")")
      =real scalar count_wildcards(struct rename_patterndf scalar pat)
      =        return(pat.n_of[(3)]  +
      =               pat.n_of[(4)]    +
      =               pat.n_of[(5)] +
      =               pat.n_of[(6)] +
      =               pat.n_of[(8)])
      =real scalar is_wildcard(real scalar tt)
      =        return( tt == (3)  |
      =                tt == (4)    |
      =                tt == (5) |
      =                tt == (6) |
      =                tt == (9) |
      =                tt == (10) |
      =                tt == (8)  )
      =real scalar find_next_wildcard(struct rename_peldf rowvector d, real scalar j0)
      =        real scalar    j
      =void fillin_old_varnames(struct rename_patterndf rowvector oldplist, struct rename_patterndf rowvector newplist,
      =                                                        real scalar issort)
      =        real scalar    i
      =        string scalar    tmpname
      =void fillin_old_varnames_u(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp,
      =                                        real scalar issort, string scalar tmpname)
      =        string rowvector            varnames, piece
      =        real scalar            i, n, nvars, nels
      =        string matrix            pieces
      =        real scalar  tt
      =        real scalar       filter_varlist, fillin_pieces
      =        filter_varlist = (oldp.n_of[(5)] + oldp.n_of[(6)] != 0)
      =        fillin_pieces  = (newp.n_of[(5)] + newp.n_of[(6)] +
      =                          newp.n_of[(3)]  + newp.n_of[(4)]    != 0)
      =        if (issort) fillin_pieces = 1
      =                        if (tt==(3) | tt==(4)) {c -(}
      =string scalar varlistpattern(struct rename_peldf rowvector ellist)
      =        real scalar    j
      =        string scalar    result
      =        if (ellist[1].elementtype == (1)) return(ellist[1].element)
      =string scalar varlist_el(struct rename_peldf scalar el)
      =        if (el.elementtype == (2))    return(el.element)
      =        if (el.elementtype == (3))   return("*")
      =        if (el.elementtype == (4))     return("?")
      =        if (el.elementtype == (5))  return("?*")
      =        if (el.elementtype == (6))  return(el.arg*"?")
      =struct rename_matchdf {c -(}
      =        real scalar    j0, j1
      =        real scalar    i0, i1
      =        string scalar    name
      =        string rowvector    pieces
      =real scalar matchvarname(string rowvector pieces, struct rename_peldf rowvector ellist, string scalar name)
      =        string scalar            ws
      =        struct rename_matchdf scalar        m
      =                if (ellist[1].elementtype==(1)) {c -(}
      =                        return(1)
      =        if (!match_step(m, ellist)) return(0)
      =        return(1)
      =void match_setup(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, string scalar name)
      =real scalar match_step(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        real scalar            lefttomatch
      =        real scalar      mr
      =        real scalar     r
      =                if ((r=match_query_done(m))!=(-1)) return(r)
      =                if (match_simplification(m, ellist)==-1) return(0)
      =                if ((r=match_query_done(m))!=(-1)) return(r)
      =                        if (match_step_1(m, ellist)==-1) return(0)
      =                        if ((r=match_query_done(m))!=(-1)) return(r)
      =                        return(0)
      =                        if (mr==-1 | mr==0) return(0)
      =                        if (mr==-1 | mr==0) return(0)
      =real scalar match_step_1(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        if (ellist[m.j0].elementtype==(5)) {c -(}
      =                return(match_ETnum_v(m, ellist, 1))
      =        if (ellist[m.j0].elementtype==(3)) {c -(}
      =        return(-1)
      =real scalar match_step_2(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        if (ellist[m.j0].elementtype==(5)) {c -(}
      =                return(match_ETnum_v(m, ellist, 1))
      =        if (ellist[m.j0+1].elementtype==(5)) {c -(}
      =                return(match_ETnum_v(m, ellist, 0))
      =        return(-1)
      =real scalar match_step_3p(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        real scalar    j
      =        if (ellist[m.j0].elementtype==(3)) {c -(}
      =                if (ellist[j].elementtype==(3)) {c -(}
      =                if (ellist[j].elementtype==(5)) {c -(}
      =                        return(match_ETnum_v(m, ellist, 0))
      =        if (ellist[m.j0].elementtype==(5)) {c -(}
      =                return(match_ETnum_v(m, ellist, 1))
      =        return(-1)
      =real scalar match_query_done(struct rename_matchdf scalar m)
      =                if (m.i0 < m.i1) return(0)
      =                return(1)
      =        return((-1))
      =real scalar match_simplification(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        real scalar      mr
      =        while ((m.i1 >m.i0 & m.j1> m.j0)) {c -(}
      =                mr = match_fixed(m, ellist, 1)
      =                if (mr==-1) return(-1)
      =                if (mr==0)   break
      =        while ((m.i1 >m.i0 & m.j1> m.j0)) {c -(}
      =                mr = match_fixed(m, ellist, 0)
      =                if (mr==-1) return(-1)
      =                if (mr==0)   break
      =real scalar match_fixed(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, real scalar s)
      =        real scalar    j
      =        j = (s==1 ? m.j0 : m.j1-1)
      =        if (ellist[j].elementtype==(2))   return(match_ETstr(m, ellist, s))
      =        if (ellist[j].elementtype==(6)) return(match_ETnum_f(m, ellist, s))
      =        if (ellist[j].elementtype==(4))    return(match_ETqm(m, ellist, s))
      =        return(0)
      =real scalar match_ETstr(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, real scalar s)
      =        real scalar    j, len
      =        j = (s==1 ? m.j0 : m.j1-1)
      =        if (ellist[j].elementtype != (2)) return(0)
      =        if ((s==1 ?  substr(m.name, m.i0, len) :
      =                return(-1)
      =        return(1)
      =real scalar match_ETnum_f(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, real scalar s)
      =        real scalar    j, i, len
      =        string scalar    str, c
      =        j = (s==1 ? m.j0 : m.j1-1)
      =        if (ellist[j].elementtype != (6)) return(0)
      =        str = (s==1 ?  substr(m.name, m.i0, len) : substr(m.name, -len, .))
      =        if (strlen(str)!=len) return(-1)
      =                if (c<"0" | c>"9") return(-1)
      =        return(1)
      =real scalar match_ETqm(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, real scalar s)
      =        if (ellist[s==1 ? m.j0 : m.j1-1].elementtype != (4)) {c -(}
      =                return(0)
      =        if (m.i0==m.i1) return(-1)
      =        return(1)
      =real scalar match_ETnum_v(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, real scalar s)
      =        real scalar            j, i0, i1, len
      =        string scalar            c
      =        struct rename_matchdf scalar        hold
      =        j = (s==1 ? m.j0 : m.j1-1)
      =        if (ellist[j].elementtype != (5)) return(0)
      =        if (s==1) {c -(}
      =                if (match_step(m, ellist)==1) return(1)
      =        return(-1)
      =real scalar match_ETstar_left(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        real scalar            len, newlen
      =        struct rename_matchdf scalar        hold
      =        real scalar       next_is_ETnum_v
      =        if (ellist[m.j0].elementtype != (3)) return(0)
      =                post_match_piece(m, 1, len)
      =                return(1)
      =        next_is_ETnum_v = (ellist[m.j0+1].elementtype==(5))
      =                post_match_piece(m, 1, len)
      =                if (match_step(m, ellist)==1) {c -(}
      =                                        post_match_piece(m, 1, newlen)
      =                        return(1)
      =        return(-1)
      =real scalar mstargiveback(string scalar s)
      =        real scalar    l
      =        string scalar    c
      =void post_match_piece(struct rename_matchdf scalar m, real scalar s, real scalar len)
      =        if (s==1) {c -(}
      =void sort_old_varnames(struct rename_renamedf scalar ren)
      =        real scalar i
      =void sort_appropriate_field(struct rename_patterndf rowvector oldplist, struct rename_patterndf rowvector newplist)
      =        real scalar            i
      =        real scalar            j
      =real scalar j_of_renumber(struct rename_patterndf scalar plist)
      =        real scalar            j
      =        real scalar  tt
      =                if (tt==(9) | tt==(10)) return(j)
      =real scalar j_of_number(struct rename_patterndf scalar plist)
      =        real scalar            j, jtoret
      =        real scalar  tt
      =                if (tt==(3) | tt==(4) | tt==(5) | tt==(6)) {c -(}
      =void sort_on_field(struct rename_patterndf scalar plist, real scalar j)
      =        real scalar  tt
      =        real colvector            o
      =        string colvector            vc
      =                if (tt==(5) | tt==(6)) {c -(}
      =void fillin_new_varnames_recase(struct rename_renamedf scalar ren)
      =        real scalar    i
      =void fillin_new_varnames(struct rename_patterndf rowvector oldplist, struct rename_patterndf rowvector newplist, real scalar from)
      =        real scalar    i
      =void fillin_new_varnames_u(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar from)
      =        real scalar    i
      =        if (newp.ellist[1].elementtype==(1)) {c -(}
      =void fillin_new_varnames_u_u(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar from, real scalar i)
      =        real scalar            j
      =        string scalar            name
      =        real scalar  tt
      =                if (tt==(2)) {c -(}
      =                else if (tt==(3)) {c -(}
      =                else if (tt==(4)) {c -(}
      =                else if (tt==(5)) {c -(}
      =                else if (tt==(6)) {c -(}
      =                else if (tt==(7)) {c -(}
      =                else if (tt==(9)) {c -(}
      =                else if (tt==(10)) {c -(}
      =                else if (tt != (8)) {c -(}
      =string scalar fmt_ETnum_f(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar i, real scalar j)
      =        real scalar    n, len
      =        string scalar    res, orig
      =string scalar fmt_ETnum_f_r(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar j, real scalar from)
      =        real scalar    n, len
      =        string scalar res
      =string matrix build_toren(struct rename_patterndf rowvector oldplist, struct rename_patterndf rowvector newplist)
      =        string matrix    toren
      =        real scalar    i, N, n, k, k2
      =        real colvector    toselect
      =        string rowvector    lastrow, newrow
      =        real scalar hasomissions
      =                                hasomissions = 1
      =void perform_renames(string matrix toren, struct rename_optiondf scalar option)
      =        real scalar       use_intermediary
      =        string matrix            toren_nonulls
      =                        perform_dryrun(toren, toren_nonulls, 0)
      =void confirm_newnames_new(string matrix toren)
      =        real scalar    i
      =        real rowvector    varnum
      =        string rowvector    tocheck, badvar
      =void perform_set_r(string matrix toren)
      =void perform_test(string matrix toren, real scalar use_intermediary)
      =        real scalar    i
      =void perform_rename_straight(string matrix toren)
      =        real scalar    i
      =        real scalar    breakstatus
      =void perform_rename_intermediary(string matrix toren)
      =        real scalar    i
      =        real scalar    breakstatus
      =        string rowvector    tmpname
      =void perform_dryrun(string matrix toren, string matrix toren_nonulls, real scalar use_intermediary)
      =        real scalar    i, nulls
      =        real scalar    maxlen
      =        string scalar    sfmt, sfmtit
      =void dryrun_note1(string matrix toren, string matrix toren_nonulls)
      =        real scalar    i
      =        real scalar    nulls
      =void dryrun_note2(string matrix toren, real scalar use_intermediary)
      =        string colvector    dupnames, newname, oldname
      =real scalar names_not_jointly_unique(string matrix toren)
      =        real scalar    n0, n1
      =        string colvector    fulllist
      =void confirm_names_unique(string matrix toren)
      =void confirm_names_unique_1(string matrix toren, real scalar j)
      =        string colvector    names, corresponding
      =        string scalar    s
      =        real scalar    i, n
      =string colvector corresponding_names(string matrix toren, string scalar name, real scalar js, real scalar jd)
      =        real scalar    i
      =        string colvector    dups
      =void confirm_new_varnames_valid(string matrix toren)
      =        real scalar    i, n
      =        real colvector    bad
      =void confirm_not_empty(string scalar str, string scalar expected)
      =void errprint_bf_list(string vector list , |real scalar USER_MAXEL)
      =        real scalar            MAXEL
      =        real scalar            i, top
      =        real scalar       chopped
      =                        chopped = 1
      =                        chopped = 0
      =void errprint_bf_string(string scalar user_s, |real scalar USER_MAXLEN)
      =        real scalar            MAXLEN
      =        real scalar            len, len_last, target_last
      =        real scalar            len_remaining
      =        real scalar            i
      =        string rowvector            els
      =        string scalar            s, first, last
      =        real scalar       cont
      =        cont = 1
      =                else            cont   = 0
      =        string scalar    indent
      =void error_preceding_dash( pattype)
      =                        (pattype==0 ? "oldname" : "newname" ) )
      =void error_following_dash( pattype, string scalar what)
      =                        (pattype==0 ? "oldname" : "newname" ) )
      =void option_not_allowed(string scalar option)
      =void option_number_misspecified(string scalar op)
      =void error_ETnum_f_too_long(real scalar n_digits)
      =        errprintf("the {c -(}bf:(###...#){c )-} pattern is %g.\n", 10)
      =void error_patternlengths_unequal(struct rename_patterndf rowvector oldplist, struct rename_patterndf rowvector newplist)
      =        string scalar    s_old, s_new
      =void error_too_many_renumbers(string scalar op, struct rename_patterndf scalar newp)
      =void error_strlist_length(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp)
      =        real scalar    n_old, n_new
      =        string scalar    s_old, s_new
      =void error_missing_ETnum(string scalar opname, struct rename_patterndf scalar newp)
      =void error_too_many_wildcards(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp,
      =                                                        real scalar isaddnumber)
      =void error_wildcardmatch_qm(struct rename_patterndf scalar oldp, real scalar j_old,
      =                            struct rename_patterndf scalar newp, real scalar j_new)
      =void error_wildcardmatch_hash(struct rename_patterndf scalar oldp, real scalar j_old,
      =                              struct rename_patterndf scalar newp, real scalar j_new)
      =void error_no_right_bracket(string scalar original)
      =void error_inside_brackets(string scalar original)
      =void error_newnumber_subscripted(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar j)
      =void error_subscript_invalid(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar subscr)
      =void error_subscripts_in_old(struct rename_patterndf scalar pat)
      =void dump_pattern(struct rename_patterndf rowvector pat, string scalar typ, real scalar incl_names)
      =        real scalar    i, j, n
      =        real scalar    nv, k, m
      =                        pat[i].n_of[(2)],
      =                        pat[i].n_of[(3)],
      =                        pat[i].n_of[(4)],
      =                        pat[i].n_of[(5)],
      =                        pat[i].n_of[(6)],
      =                        pat[i].n_of[(7)],
      =                        pat[i].n_of[(8)])
      =string scalar dump_xlate_tt(real scalar t)
      =        if (t==(1))     return("ETstrlist")
      =        if (t==(2))         return("ETstr")
      =        if (t==(3))        return("ETstar")
      =        if (t==(4))          return("ETqm")
      =        if (t==(5))       return("ETnum_v")
      =        if (t==(6))       return("ETnum_f")
      =        if (t==(7))          return("ETeq")
      =        if (t==(8))        return("ETodot")
      =        if (t==(9))     return("ETnum_v_r")
      =        if (t==(10))     return("ETnum_f_r")
      =void dump_options(struct rename_renamedf scalar ren)
      =void match_debug(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, string scalar msg)
      =string rowvector list_subtract(string rowvector a, string rowvector b)
      =        string rowvector result
      =string rowvector expand_varlist(string scalar pattern, string scalar tmpname)
      =        real scalar    rc
      =        string rowvector    result
      =string scalar ordinal_suffix(real scalar i)
      =        real scalar    lastdigit
      {hline 76} begin rename {hline}
      - version 12
      - mata: rename_cmd("`3'")
      = mata: rename_cmd("")
        {hline 76} begin unab {hline}
        - version 6
        - gettoken user 0: 0, parse(" :")
        - gettoken colon 0: 0, parse(" :")
        - if `"`colon'"' != ":" {c -(} error 198 {c )-}
        = if `":"' != ":" {c -(} error 198 {c )-}
        - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 32767) NAME(string)]
        - c_local `user' `varlist'
        = c_local __000000 province district sub_district village urban_rural census_block sls_number physical_building census_building hh_number death_occured deaths_total floor size2 lighting cooking drinking_water toilet septic_tank telephone internet tenure ownership jenis_surat_tanah weight
        - local n : word count `varlist'
        = local n : word count province district sub_district village urban_rural census_block sls_number physical_building census_building hh_number death_occured deaths_total floor size2 lighting cooking drinking_water toilet septic_tank telephone internet tenure ownership jenis_surat_tanah weight
        - if `n'>=`min' & `n'<=`max' {c -(} exit {c )-}
        = if 25>=1 & 25<=32767 {c -(} exit {c )-}
        {hline 78} end unab {hline}
      {hline 78} end rename {hline}
    {hline 82} end load {hline}
  - else load $file_path, delimiter($delimiter)
  = else load J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_HH_ALL_Y2013M05D28.DTA, delimiter()
  - label data "ubcov_id : `ubcov_id'"
  = label data "ubcov_id : 5622"
    {hline 79} begin label {hline}
    - version 10.0
    - gettoken val : 0
    - if (strpos("`val'", "val") > 0 ) {c -(}
    = if (strpos("data", "val") > 0 ) {c -(}
      gettoken val 0 : 0
      syntax anything [, nofix]
      if "`fix'" != "" {c -(}
      local fix ", nofix"
      {c )-}
      gettoken var rest : anything
      while `"`rest'"' != "" {c -(}
      gettoken lab rest : rest
      local label "`lab'"
      {c )-}
      local vlist : list anything - lab
      if "`lab'" == "." {c -(}
      local lab ""
      {c )-}
      foreach var of varlist `vlist' {c -(}
      _label `val' `var' `lab' `fix'
      {c )-}
      {c )-}
    - else {c -(}
    - _label `macval(0)'
    = _label data "ubcov_id : 5622"
    - {c )-}
    {hline 81} end label {hline}
  - if !mi("$reshape") {c -(}
  = if !mi("") {c -(}
    di as error "||||||||||||||||||||||||||||||||||||"
    di as error "|||||||||   RESHAPE FILES  |||||||||"
    di as error "||||||||||||||||||||||||||||||||||||"
    di as error "Reshaping $file_path"
    if "$reshape_stem" == "1" insert_stems
    reshape2, id($reshape) newid(reshapeid) time keep($reshape_keepid)
    {c )-}
  - if !mi("$subset") {c -(}
  = if !mi("") {c -(}
    di as error "||||||||||||||||||||||||||||||||||||"
    di as error "|||||||||   SUBSET  FILES  |||||||||"
    di as error "||||||||||||||||||||||||||||||||||||"
    di as error "Subsetting $file_path"
    $subset
    {c )-}
  - di as error "||||||||||||||||||||||||||||||||||||"
{err}||||||||||||||||||||||||||||||||||||
  {txt}- di as error "|||||||||   MERGING FILES  |||||||||"
{err}|||||||||   MERGING FILES  |||||||||
  {txt}- di as error "||||||||||||||||||||||||||||||||||||"
{err}||||||||||||||||||||||||||||||||||||
  {txt}- load_merges, topics($topics) threshold(0.1)
  = load_merges, topics(basic design demographics geography hap) threshold(0.1)
    {hline 73} begin load_merges {hline}
    - syntax, topics(str) threshold(str)
    - qui {c -(}
    - preserve
    - get, merges keep_key
      {hline 79} begin get {hline}
      - qui {c -(}
      - syntax, [vars codebook indicators labels merges] [keep_key]
      - clear
        {hline 75} begin clear {hline}
        - if _caller() < 10 {c -(}
          _clear_9 `0'
          exit
          {c )-}
        - version 10
        - syntax [anything]
        - tokenize `anything'
        = tokenize 
        - if `"`2'"' != "" {c -(}
        = if `""' != "" {c -(}
          display as err "`2' not allowed"
          exit 198
          {c )-}
        - if "`1'"=="" {c -(}
        = if ""=="" {c -(}
        - drop _all
        - label drop _all
          {hline 73} begin label {hline}
          - version 10.0
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - _label `macval(0)'
          = _label drop _all
          - {c )-}
          {hline 75} end label {hline}
        - {c )-}
        - else if "`1'"=="mata" {c -(}
        = else if ""=="mata" {c -(}
          mata: mata clear
          {c )-}
        - else if inlist("`1'", "results", "matrix") {c -(}
        = else if inlist("", "results", "matrix") {c -(}
          return clear
          clearreturn
          ereturn clear
          sreturn clear
          _return drop _all
          if ("`1'" == "matrix") {c -(}
          matrix drop _all
          _est drop _all
          {c )-}
          {c )-}
        - else if "`1'"=="programs" {c -(}
        = else if ""=="programs" {c -(}
          program drop _all
          {c )-}
        - else if "`1'"=="ado" {c -(}
        = else if ""=="ado" {c -(}
          program drop _allado
          {c )-}
        - else if "`1'"=="*" | "`1'"=="all" {c -(}
        = else if ""=="*" | ""=="all" {c -(}
          capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
          capture
          if (0`semmods') {c -(}
          display as err "-clear all- not allowed while an SEM Builder is open"
          exit 1
          {c )-}
          drop _all
          label drop _all
          matrix drop _all
          scalar drop _all
          constraint drop _all
          eq drop _all
          file close _all
          postutil clear
          _return drop _all
          discard
          program drop _all
          timer clear
          mata: mata clear
          {c )-}
        - else {c -(}
          display as err "`1' not allowed"
          exit 198
          {c )-}
        {hline 77} end clear {hline}
      - local arg `2'
      = local arg merges
      - getmata (${c -(}`arg'_cols{c )-}) = `arg'
      = getmata (user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path topic_name merge_file reshape master_vars using_vars type keep) = merges
        {hline 73} begin getmata {hline}
        - version 11
        - syntax [anything(name=getlist id="getlist" equalok)] [, DOUBLE FORCE ID(string) REPLACE UPdate]
        - mata: get()
        {hline 75} end getmata {hline}
      - if !inlist("`arg'", "labels", "merge") destring *, replace
      = if !inlist("merges", "labels", "merge") destring *, replace
        {hline 72} begin destring {hline}
        - version 7.0
        - syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(string)] [percent] [dpcomma]
        - if "`percent'" == "percent" {c -(}
        = if "" == "percent" {c -(}
          if !index(`"`ignore'"', "%") {c -(}
          local ignore `"`ignore'%"'
          {c )-}
          {c )-}
        - if "`generate'" != "" & "`replace'" != "" {c -(}
        = if "" != "" & "replace" != "" {c -(}
          di as err "options generate and replace are mutually exclusive"
          exit 198
          {c )-}
        - if "`generate'" == "" & "`replace'" == "" {c -(}
        = if "" == "" & "replace" == "" {c -(}
          di as err "must specify either generate or replace option"
          exit 198
          {c )-}
        - if "`generate'" != "" {c -(}
        = if "" != "" {c -(}
          local ct1: word count `varlist'
          local save "`varlist'"
          local 0 "`generate'"
          capture syntax newvarlist
          if _rc {c -(}
          di as err "generate(newvarlist) invalid"
          exit _rc
          {c )-}
          local generate "`varlist'"
          local varlist "`save'"
          local ct2: word count `generate'
          if `ct1' != `ct2' {c -(}
          di as err "number of variables in varlist must equal"
          di as err "number of variables in generate(newvarlist)"
          exit 198
          {c )-}
          {c )-}
        - local m 1
        - if `"`ignore'"' == "" {c -(}
        = if `""' == "" {c -(}
        - local ignore ""
        - {c )-}
        - local l = length(`"`ignore'"')
        = local l = length(`""')
        - while `m' <= `l' {c -(}
        = while 1 <= 0 {c -(}
          local char`m' = substr(`"`ignore'"', `m', 1)
          if substr(`"`ignore'"', `m', 1) == " " {c -(}
          local char`m' " "
          {c )-}
          local m = `m' + 1
          {c )-}
        - if "`generate'" != "" {c -(}
        = if "" != "" {c -(}
          tokenize `varlist'
          local flag 0
          local jj 1
          local yy 1
          local varno 0
          while "`1'" != "" {c -(}
          local varno = `varno' + 1
          capture confirm string variable `1'
          if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "generate"
          local newvar : word `varno' of `generate'
          mac shift
          {c )-}
          else {c -(}
          tempvar temp
          qui gen str1 `temp' = ""
          qui replace `temp' = `1'
          qui compress `temp'
          while `"`char`jj''"' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
          qui replace `temp' = trim(`temp')
          qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
          local r = r(N)
          qui count if real(`temp') >= .
          local s = r(N)
          if `r' != `s' {c -(}
          local flag 1
          {c )-}
          if `flag' == 1 & "`force'" == "" {c -(}
          if `"`ignore'"' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "generate"
          {c )-}
          else {c -(}
          di as txt "`1' contains " "nonnumeric characters; no " as res "generate"
          {c )-}
          local flag 0
          local jj 1
          mac shift
          {c )-}
          else {c -(}
          tempvar OLDVAR ind con
          qui gen str1 `OLDVAR' = ""
          qui replace `OLDVAR' = `1'
          qui gen byte `ind' = .
          qui gen byte `con' = 0
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`OLDVAR', `"`t'"') != 0
          qui count if `ind' == 1
          if r(N) > 0 {c -(}
          if `"`t'"' == " " {c -(}
          local b `"`b' space"'
          {c )-}
          else {c -(}
          local b `"`b' `t'"'
          {c )-}
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`OLDVAR', `"`t'"') != 0
          qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `OLDVAR' = subinstr(`OLDVAR', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          local newvar : word `varno' of `generate'
          local vl: variable label `1'
          if "`float'" == "" {c -(}
          qui gen double `newvar' = real(`OLDVAR')
          {c )-}
          else {c -(}
          qui gen float `newvar' = real(`OLDVAR')
          {c )-}
          move `newvar' `1'
          move `1' `newvar'
          Charcopy `1' `newvar'
          label variable `newvar' `"`vl'"'
          char `newvar'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) > 0 {c -(}
          qui replace `newvar' = `newvar'/100
          {c )-}
          qui compress `newvar'
          local type : type `newvar'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; `newvar' " as res "generated " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1': characters" as res `"`b'"' as txt " removed; `newvar' " as res "generated " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; `newvar' " as res "generated " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          drop `ind' `con' `OLDVAR'
          local jj 1
          local yy 1
          mac shift
          {c )-}
          drop `temp'
          {c )-}
          {c )-}
          {c )-}
        - else if "`replace'" != "" {c -(}
        = else if "replace" != "" {c -(}
        - tokenize `varlist'
        = tokenize user ubcov_id survey_name nid ihme_loc_id year_start year_end survey_module file_path topic_name merge_file reshape master_vars using_vars type keep
        - tempvar ind con
        - qui gen byte `con' = 0
        = qui gen byte __000001 = 0
        - qui gen byte `ind' = .
        = qui gen byte __000000 = .
        - local flag 0
        - local yy 1
        - local jj 1
        - while "`1'" != "" {c -(}
        = while "user" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable user
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000002 = ""
        - qui replace `temp' = `1'
        = qui replace __000002 = user
        - qui compress `temp'
        = qui compress __000002
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000002 = trim(__000002)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000002=="" | __000002=="." | (length(__000002)==2 & inrange(__000002,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000002) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 730 != 7351 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "user contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000002
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "ubcov_id" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable ubcov_id
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000003 = ""
        - qui replace `temp' = `1'
        = qui replace __000003 = ubcov_id
        - qui compress `temp'
        = qui compress __000003
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000003 = trim(__000003)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000003=="" | __000003=="." | (length(__000003)==2 & inrange(__000003,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000003) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 80 != 1668 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "ubcov_id contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000003
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "survey_name" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable survey_name
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000004 = ""
        - qui replace `temp' = `1'
        = qui replace __000004 = survey_name
        - qui compress `temp'
        = qui compress __000004
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000004 = trim(__000004)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000004=="" | __000004=="." | (length(__000004)==2 & inrange(__000004,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000004) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 11 != 7351 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "survey_name contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000004
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "nid" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable nid
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000005 = ""
        - qui replace `temp' = `1'
        = qui replace __000005 = nid
        - qui compress `temp'
        = qui compress __000005
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000005 = trim(__000005)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000005=="" | __000005=="." | (length(__000005)==2 & inrange(__000005,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000005) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 65 != 67 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "nid contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000005
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "ihme_loc_id" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable ihme_loc_id
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000006 = ""
        - qui replace `temp' = `1'
        = qui replace __000006 = ihme_loc_id
        - qui compress `temp'
        = qui compress __000006
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000006 = trim(__000006)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000006=="" | __000006=="." | (length(__000006)==2 & inrange(__000006,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000006) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 15 != 7351 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "ihme_loc_id contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000006
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "year_start" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable year_start
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000007 = ""
        - qui replace `temp' = `1'
        = qui replace __000007 = year_start
        - qui compress `temp'
        = qui compress __000007
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000007 = trim(__000007)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000007=="" | __000007=="." | (length(__000007)==2 & inrange(__000007,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000007) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 13 != 14 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "year_start contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000007
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "year_end" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable year_end
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000008 = ""
        - qui replace `temp' = `1'
        = qui replace __000008 = year_end
        - qui compress `temp'
        = qui compress __000008
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000008 = trim(__000008)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000008=="" | __000008=="." | (length(__000008)==2 & inrange(__000008,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000008) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 12 != 13 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "year_end contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000008
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "survey_module" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable survey_module
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __000009 = ""
        - qui replace `temp' = `1'
        = qui replace __000009 = survey_module
        - qui compress `temp'
        = qui compress __000009
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __000009 = trim(__000009)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __000009=="" | __000009=="." | (length(__000009)==2 & inrange(__000009,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__000009) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 125 != 7350 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "survey_module contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __000009
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "file_path" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable file_path
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000A = ""
        - qui replace `temp' = `1'
        = qui replace __00000A = file_path
        - qui compress `temp'
        = qui compress __00000A
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000A = trim(__00000A)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000A=="" | __00000A=="." | (length(__00000A)==2 & inrange(__00000A,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000A) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 17 != 7351 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "file_path contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000A
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "topic_name" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable topic_name
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000B = ""
        - qui replace `temp' = `1'
        = qui replace __00000B = topic_name
        - qui compress `temp'
        = qui compress __00000B
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000B = trim(__00000B)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000B=="" | __00000B=="." | (length(__00000B)==2 & inrange(__00000B,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000B) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 465 != 7351 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "topic_name contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000B
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "merge_file" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable merge_file
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000C = ""
        - qui replace `temp' = `1'
        = qui replace __00000C = merge_file
        - qui compress `temp'
        = qui compress __00000C
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000C = trim(__00000C)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000C=="" | __00000C=="." | (length(__00000C)==2 & inrange(__00000C,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000C) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 45 != 7351 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "merge_file contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000C
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "reshape" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable reshape
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000D = ""
        - qui replace `temp' = `1'
        = qui replace __00000D = reshape
        - qui compress `temp'
        = qui compress __00000D
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000D = trim(__00000D)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000D=="" | __00000D=="." | (length(__00000D)==2 & inrange(__00000D,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000D) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 7348 != 7351 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "reshape contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000D
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "master_vars" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable master_vars
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000E = ""
        - qui replace `temp' = `1'
        = qui replace __00000E = master_vars
        - qui compress `temp'
        = qui compress __00000E
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000E = trim(__00000E)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000E=="" | __00000E=="." | (length(__00000E)==2 & inrange(__00000E,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000E) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 52 != 7351 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "master_vars contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000E
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "using_vars" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable using_vars
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000F = ""
        - qui replace `temp' = `1'
        = qui replace __00000F = using_vars
        - qui compress `temp'
        = qui compress __00000F
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000F = trim(__00000F)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000F=="" | __00000F=="." | (length(__00000F)==2 & inrange(__00000F,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000F) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 55 != 7351 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "using_vars contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000F
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "type" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable type
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000G = ""
        - qui replace `temp' = `1'
        = qui replace __00000G = type
        - qui compress `temp'
        = qui compress __00000G
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000G = trim(__00000G)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000G=="" | __00000G=="." | (length(__00000G)==2 & inrange(__00000G,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000G) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 53 != 7351 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "type contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000G
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "keep" != "" {c -(}
        - capture confirm string variable `1'
        = capture confirm string variable keep
        - if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
        - else {c -(}
        - tempvar temp
        - qui gen str1 `temp' = ""
        = qui gen str1 __00000H = ""
        - qui replace `temp' = `1'
        = qui replace __00000H = keep
        - qui compress `temp'
        = qui compress __00000H
        - while `"`char`jj''"' != "" {c -(}
        = while `""' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
        - if ("`dpcomma'" != "") {c -(}
        = if ("" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
        - qui replace `temp' = trim(`temp')
        = qui replace __00000H = trim(__00000H)
        - qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        = qui count if __00000H=="" | __00000H=="." | (length(__00000H)==2 & inrange(__00000H,".a",".z"))
        - local r = r(N)
        - qui count if real(`temp') >= .
        = qui count if real(__00000H) >= .
        - local s = r(N)
        - if `r' != `s' {c -(}
        = if 3238 != 6388 {c -(}
        - local flag 1
        - {c )-}
        - if `flag' == 1 & "`force'" == "" {c -(}
        = if 1 == 1 & "" == "" {c -(}
        - if `"`ignore'"' != "" {c -(}
        = if `""' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
        - else {c -(}
        - di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        = di as txt "keep contains " "nonnumeric characters; no " as res "replace"
        - {c )-}
        - local flag 0
        - local jj 1
        - mac shift
        - {c )-}
        - else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
        - drop `temp'
        = drop __00000H
        - {c )-}
        - {c )-}
        - while "`1'" != "" {c -(}
        = while "" != "" {c -(}
          capture confirm string variable `1'
          if _rc != 0 {c -(}
          di as txt "`1' already numeric; no " as res "replace"
          mac shift
          {c )-}
          else {c -(}
          tempvar temp
          qui gen str1 `temp' = ""
          qui replace `temp' = `1'
          qui compress `temp'
          while `"`char`jj''"' != "" {c -(}
          local t `"`char`jj''"'
          qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
          local jj = `jj' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `temp' = subinstr(`temp', `","', ".", 1)
          {c )-}
          qui replace `temp' = trim(`temp')
          qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
          local r = r(N)
          qui count if real(`temp') >= .
          local s = r(N)
          if `r' != `s' {c -(}
          local flag 1
          {c )-}
          if `flag' == 1 & "`force'" == "" {c -(}
          if `"`ignore'"' != "" {c -(}
          di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
          {c )-}
          else {c -(}
          di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
          {c )-}
          local flag 0
          local jj 1
          mac shift
          {c )-}
          else {c -(}
          while `"`char`yy''"' != "" {c -(}
          local t `"`char`yy''"'
          qui replace `ind' = 1 if index(`1', `"`t'"')!=0
          qui count if `ind' == 1
          if `"`t'"' == " " & r(N) > 0 {c -(}
          local b `"`b' space"'
          {c )-}
          if r(N) > 0 {c -(}
          local b `"`b' `t'"'
          {c )-}
          qui replace `ind' = .
          qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
          qui replace `1' = subinstr(`1', `"`t'"', "", .)
          local yy = `yy' + 1
          {c )-}
          if ("`dpcomma'" != "") {c -(}
          qui replace `1' = subinstr(`1', `","', ".", 1)
          {c )-}
          local c Characters removed were: `b'
          tempvar switch
          local type = cond("`float'" == "float", "float", "double")
          qui gen `type' `switch' = real(`1')
          char rename `1' `switch'
          move `switch' `1'
          local vl: variable label `1'
          drop `1'
          if "`float'" == "" {c -(}
          qui gen double `1' = `switch'
          {c )-}
          else {c -(}
          qui gen float `1' = `switch'
          {c )-}
          move `1' `switch'
          label variable `1' `"`vl'"'
          char rename `switch' `1'
          char `1'[destring] `c'
          qui count if `con' == 1
          if "`percent'" != "" & r(N) != 0 {c -(}
          qui replace `1' = `1'/100
          {c )-}
          qui replace `con' = 0
          qui compress `1'
          local type : type `1'
          if "`force'" != "" {c -(}
          di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `"`b'"' != "" {c -(}
          di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          else if `"`b'"' == "" & "`force'" == "" {c -(}
          di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
          {c )-}
          if `s' != 0 {c -(}
          local valmsg = cond(`s' > 1, "values", "value")
          di as txt "(`s' missing `valmsg' generated)"
          {c )-}
          local b ""
          local c ""
          local jj 1
          local yy 1
          drop `switch'
          mac shift
          {c )-}
          drop `temp'
          {c )-}
          {c )-}
        - {c )-}
        {hline 74} end destring {hline}
      - if !mi("`keep_key'") keep_key
      = if !mi("keep_key") keep_key
        {hline 72} begin keep_key {hline}
        - syntax, [key(str)]
        - if mi("$key") & mi("`key'") di as error "Must provide key vars if $key not set"
        = if mi("nid ihme_loc_id year_start year_end survey_module file_path") & mi("") di as error "Must provide key vars if nid ihme_loc_id year_start year_end survey_module file_path not set"
        - foreach key in $key {c -(}
        = foreach key in nid ihme_loc_id year_start year_end survey_module file_path {c -(}
        - cap confirm string variable `key'
        = cap confirm string variable nid
        - if !_rc keep if `key' == "${c -(}`key'{c )-}"
        = if !_rc keep if nid == "91740"
        - else keep if `key' == ${c -(}`key'{c )-}
        = else keep if nid == 91740
        - {c )-}
        - cap confirm string variable `key'
        = cap confirm string variable ihme_loc_id
        - if !_rc keep if `key' == "${c -(}`key'{c )-}"
        = if !_rc keep if ihme_loc_id == "IDN"
        - else keep if `key' == ${c -(}`key'{c )-}
        = else keep if ihme_loc_id == IDN
        - {c )-}
        - cap confirm string variable `key'
        = cap confirm string variable year_start
        - if !_rc keep if `key' == "${c -(}`key'{c )-}"
        = if !_rc keep if year_start == "2010"
        - else keep if `key' == ${c -(}`key'{c )-}
        = else keep if year_start == 2010
        - {c )-}
        - cap confirm string variable `key'
        = cap confirm string variable year_end
        - if !_rc keep if `key' == "${c -(}`key'{c )-}"
        = if !_rc keep if year_end == "2010"
        - else keep if `key' == ${c -(}`key'{c )-}
        = else keep if year_end == 2010
        - {c )-}
        - cap confirm string variable `key'
        = cap confirm string variable survey_module
        - if !_rc keep if `key' == "${c -(}`key'{c )-}"
        = if !_rc keep if survey_module == "HH"
        - else keep if `key' == ${c -(}`key'{c )-}
        = else keep if survey_module == HH
        - {c )-}
        - cap confirm string variable `key'
        = cap confirm string variable file_path
        - if !_rc keep if `key' == "${c -(}`key'{c )-}"
        = if !_rc keep if file_path == "J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_HH_ALL_Y2013M05D28.DTA"
        - else keep if `key' == ${c -(}`key'{c )-}
        = else keep if file_path == J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_HH_ALL_Y2013M05D28.DTA
        - {c )-}
        {hline 74} end keep_key {hline}
      - {c )-}
      {hline 81} end get {hline}
    - if _N > 0 {c -(}
    - inlist2, obj(topic_name) vals(`topics') str(vals)
    = inlist2, obj(topic_name) vals(basic design demographics geography hap) str(vals)
      {hline 75} begin inlist2 {hline}
      - syntax, obj(str) vals(str) [cond(str) str(str) string]
      - if !mi("`cond'") {c -(}
      = if !mi("") {c -(}
        if !inlist("`cond'", "&", "|") {c -(}
        STOP
        {c )-}
        local cond `cond'
        {c )-}
      - else {c -(}
      - local cond |
      - {c )-}
      - local i 1
      - local cmd 1==0
      - foreach val in `vals' {c -(}
      = foreach val in basic design demographics geography hap {c -(}
      - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
      = if "vals" == "obj" local cmd 1==0 | "topic_name" == basic
      - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
      = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic"
      - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
      = else if !mi("") local cmd 1==0 | topic_name == "basic" | "topic_name" == "basic"
      - else {c -(}
        cap confirm numeric variable `obj'
        if !_rc local num_obj 1
        else local num_obj 0
        cap confirm number `val'
        if !_rc local num_val 1
        else local num_val 0
        if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
        else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
        else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
        {c )-}
      - local ++i
      - {c )-}
      - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
      = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | "topic_name" == design
      - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
      = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design"
      - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
      = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | "topic_name" == "design"
      - else {c -(}
        cap confirm numeric variable `obj'
        if !_rc local num_obj 1
        else local num_obj 0
        cap confirm number `val'
        if !_rc local num_val 1
        else local num_val 0
        if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
        else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
        else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
        {c )-}
      - local ++i
      - {c )-}
      - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
      = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | "topic_name" == demographics
      - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
      = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics"
      - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
      = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | "topic_name" == "demographics"
      - else {c -(}
        cap confirm numeric variable `obj'
        if !_rc local num_obj 1
        else local num_obj 0
        cap confirm number `val'
        if !_rc local num_val 1
        else local num_val 0
        if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
        else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
        else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
        {c )-}
      - local ++i
      - {c )-}
      - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
      = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | "topic_name" == geography
      - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
      = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography"
      - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
      = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | "topic_name" == "geography"
      - else {c -(}
        cap confirm numeric variable `obj'
        if !_rc local num_obj 1
        else local num_obj 0
        cap confirm number `val'
        if !_rc local num_val 1
        else local num_val 0
        if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
        else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
        else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
        {c )-}
      - local ++i
      - {c )-}
      - if "`str'" == "obj" local cmd `cmd' `cond' "`obj'" == `val'
      = if "vals" == "obj" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | "topic_name" == hap
      - else if "`str'" == "vals" local cmd `cmd' `cond' `obj' == "`val'"
      = else if "vals" == "vals" local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap"
      - else if !mi("`string'") local cmd `cmd' `cond' "`obj'" == "`val'"
      = else if !mi("") local cmd 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap" | "topic_name" == "hap"
      - else {c -(}
        cap confirm numeric variable `obj'
        if !_rc local num_obj 1
        else local num_obj 0
        cap confirm number `val'
        if !_rc local num_val 1
        else local num_val 0
        if `num_obj' == `num_val' & `num_val' == 0 local cmd `cmd' `cond' `obj' == "`val'"
        else if `num_obj' == 0 & `num_val' == 1 local cmd `cmd' `cond' `obj' == "`val'"
        else if `num_obj' == `num_val' & `num_val' == 1 local cmd `cmd' `cond' `obj' == `val'
        {c )-}
      - local ++i
      - {c )-}
      - return local cmd "`cmd'"
      = return local cmd "1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap""
      {hline 77} end inlist2 {hline}
    - keep if `r(cmd)'
    = keep if 1==0 | topic_name == "basic" | topic_name == "design" | topic_name == "demographics" | topic_name == "geography" | topic_name == "hap"
    - {c )-}
    - local n_merges = `=_N'
    = local n_merges = 1
    - if `n_merges' > 0 {c -(}
    = if 1 > 0 {c -(}
    - local vars topic_name merge_file reshape master_vars using_vars type keep
    - forvalues i = 1/`n_merges'{c -(}
    = forvalues i = 1/1{c -(}
    - foreach var in `vars' {c -(}
    = foreach var in topic_name merge_file reshape master_vars using_vars type keep {c -(}
    - local `var'_`i'
    = local topic_name_1
    - local `var'_`i' `=`var'[`i']'
    = local topic_name_1 hap
    - {c )-}
    - local `var'_`i'
    = local merge_file_1
    - local `var'_`i' `=`var'[`i']'
    = local merge_file_1 J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_POP_ALL_Y2013M05D28.DTA
    - {c )-}
    - local `var'_`i'
    = local reshape_1
    - local `var'_`i' `=`var'[`i']'
    = local reshape_1 
    - {c )-}
    - local `var'_`i'
    = local master_vars_1
    - local `var'_`i' `=`var'[`i']'
    = local master_vars_1 province, district, sub_district, village, census_block, sls_number, hh_number
    - {c )-}
    - local `var'_`i'
    = local using_vars_1
    - local `var'_`i' `=`var'[`i']'
    = local using_vars_1 province, district, sub_district, village, census_block, sls_number, hh_number
    - {c )-}
    - local `var'_`i'
    = local type_1
    - local `var'_`i' `=`var'[`i']'
    = local type_1 1:m
    - {c )-}
    - local `var'_`i'
    = local keep_1
    - local `var'_`i' `=`var'[`i']'
    = local keep_1 1 3
    - {c )-}
    - {c )-}
    - {c )-}
    - restore
    - {c )-}
    - if `n_merges' > 0 {c -(}
    = if 1 > 0 {c -(}
    - forvalues i = 1/`n_merges' {c -(}
    = forvalues i = 1/1 {c -(}
    - di as error "MERGE || `topic_name_`i''"
    = di as error "MERGE || hap"
{err}MERGE || hap
    {txt}- local keep
    - if !mi("`keep_`i''") {c -(}
    = if !mi("1 3") {c -(}
    - local nocomma = subinstr("`keep_`i''", ",", " ", .)
    = local nocomma = subinstr("1 3", ",", " ", .)
    - local keep keep(`nocomma')
    = local keep keep(1 3)
    - {c )-}
    - if !mi("`reshape_`i''") reshape2, id(`reshape_`i'') newid(reshapeid) time
    = if !mi("") reshape2, id() newid(reshapeid) time
    - mergexy, file(`merge_file_`i'') type(`type_`i'') master(`master_vars_`i'') using(`using_vars_`i'') gen(kittenmerge) `keep'
    = mergexy, file(J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_POP_ALL_Y2013M05D28.DTA) type(1:m) master(province, district, sub_district, village, census_block, sls_number, hh_number) using(province, district, sub_district, village, census_block, sls_number, hh_number) gen(kittenmerge) keep(1 3)
      {hline 75} begin mergexy {hline}
      - syntax, file(str) type(str) master(str) using(str) [rename(str) nogen gen(str) keep(str)]
      - foreach var in master using {c -(}
      - local `var' = subinstr("``var''", ",", " ", .)
      = local master = subinstr("province, district, sub_district, village, census_block, sls_number, hh_number", ",", " ", .)
      - {c )-}
      - local `var' = subinstr("``var''", ",", " ", .)
      = local using = subinstr("province, district, sub_district, village, census_block, sls_number, hh_number", ",", " ", .)
      - {c )-}
      - local same 0
      - if "`master'" == "`using'" {c -(}
      = if "province  district  sub_district  village  census_block  sls_number  hh_number" == "province  district  sub_district  village  census_block  sls_number  hh_number" {c -(}
      - local mergevars `master'
      = local mergevars province  district  sub_district  village  census_block  sls_number  hh_number
      - local same 1
      - local renametxt ""
      - {c )-}
      - else if !mi("`rename'") {c -(}
      = else if !mi("") {c -(}
        local mergevars ``rename''
        local renametxt "|| renamed `rename' vars"
        {c )-}
      - else if mi("`rename'") {c -(}
      = else if mi("") {c -(}
        local mergevars `master'
        local renametxt ""
        {c )-}
      - local var_num
      - foreach var in `master' {c -(}
      = foreach var in province  district  sub_district  village  census_block  sls_number  hh_number {c -(}
      - cap confirm numeric variable `var'
      = cap confirm numeric variable province
      - if !_rc {c -(}
      - local var_num `var_num' 1
      = local var_num  1
      - {c )-}
      - else {c -(}
        local var_num `var_num' 0
        {c )-}
      - {c )-}
      - cap confirm numeric variable `var'
      = cap confirm numeric variable district
      - if !_rc {c -(}
      - local var_num `var_num' 1
      = local var_num 1 1
      - {c )-}
      - else {c -(}
        local var_num `var_num' 0
        {c )-}
      - {c )-}
      - cap confirm numeric variable `var'
      = cap confirm numeric variable sub_district
      - if !_rc {c -(}
      - local var_num `var_num' 1
      = local var_num 1 1 1
      - {c )-}
      - else {c -(}
        local var_num `var_num' 0
        {c )-}
      - {c )-}
      - cap confirm numeric variable `var'
      = cap confirm numeric variable village
      - if !_rc {c -(}
      - local var_num `var_num' 1
      = local var_num 1 1 1 1
      - {c )-}
      - else {c -(}
        local var_num `var_num' 0
        {c )-}
      - {c )-}
      - cap confirm numeric variable `var'
      = cap confirm numeric variable census_block
      - if !_rc {c -(}
      - local var_num `var_num' 1
      = local var_num 1 1 1 1 1
      - {c )-}
      - else {c -(}
        local var_num `var_num' 0
        {c )-}
      - {c )-}
      - cap confirm numeric variable `var'
      = cap confirm numeric variable sls_number
      - if !_rc {c -(}
      - local var_num `var_num' 1
      = local var_num 1 1 1 1 1 1
      - {c )-}
      - else {c -(}
        local var_num `var_num' 0
        {c )-}
      - {c )-}
      - cap confirm numeric variable `var'
      = cap confirm numeric variable hh_number
      - if !_rc {c -(}
      - local var_num `var_num' 1
      = local var_num 1 1 1 1 1 1 1
      - {c )-}
      - else {c -(}
        local var_num `var_num' 0
        {c )-}
      - {c )-}
      - qui {c -(}
      - tokenize "`type'", p(":")
      = tokenize "1:m", p(":")
      - if "`1'" == "1" {c -(}
      = if "1" == "1" {c -(}
      - duplicates tag `mergevars', gen(kittendupe)
      = duplicates tag province  district  sub_district  village  census_block  sls_number  hh_number, gen(kittendupe)
        {hline 70} begin duplicates {hline}
        - version 8
        - gettoken cmd 0 : 0, parse(" ,")
        - local l = length("`cmd'")
        = local l = length("tag")
        - if `l' == 0 {c -(}
        = if 3 == 0 {c -(}
          di "{c -(}err{c )-}subcommand needed; see help on {c -(}help duplicates##|_new:duplicates{c )-}"
          exit 198
          {c )-}
        - if substr("report",1,max(1,`l')) == "`cmd'" {c -(}
        = if substr("report",1,max(1,3)) == "tag" {c -(}
          local cmd "report"
          {c )-}
        - else if substr("examples",1,max(1,`l')) == "`cmd'" {c -(}
        = else if substr("examples",1,max(1,3)) == "tag" {c -(}
          local cmd "examples"
          {c )-}
        - else if substr("list",1,max(1,`l')) == "`cmd'" {c -(}
        = else if substr("list",1,max(1,3)) == "tag" {c -(}
          local cmd "list"
          {c )-}
        - else if substr("browse",1,max(1,`l')) == "`cmd'" {c -(}
        = else if substr("browse",1,max(1,3)) == "tag" {c -(}
          local cmd "browse"
          di "{c -(}p 0 0 2{c )-}As of Stata 11.0, browse is " "no longer a valid subcommand.  {c -(}result{c )-}See " "{c -(}help duplicates##remarks:Remarks{c )-} " "under help {c -(}helpb duplicates{c )-} " "for an explanation.{c -(}p_end{c )-}"
          exit 198
          {c )-}
        - else if substr("tag",1,max(1,`l')) == "`cmd'" {c -(}
        = else if substr("tag",1,max(1,3)) == "tag" {c -(}
        - local cmd "tag"
        - {c )-}
        - else if "drop" == "`cmd'" {c -(}
        = else if "drop" == "tag" {c -(}
          {c )-}
        - else {c -(}
          di "{c -(}err{c )-}illegal {c -(}cmd{c )-}duplicates {c -(}err{c )-}subcommand"
          exit 198
          {c )-}
        - if "`cmd'" == "drop" {c -(}
        = if "tag" == "drop" {c -(}
          capture syntax varlist [if] [in]
          if _rc == 0 {c -(}
          di "{c -(}err{c )-}force option required with " "{c -(}cmd{c )-}duplicates drop {c -(}it{c )-}varlist{c -(}rm{c )-}"
          exit 198
          {c )-}
          capture syntax varlist [if] [in], force
          if _rc {c -(}
          syntax [if] [in]
          unab varlist : _all
          local varlist : subinstr local varlist "`_sortindex'" ""
          local vartext "{c -(}txt{c )-} all variables"
          {c )-}
          else local vartext "{c -(}res{c )-} `varlist'"
          {c )-}
        - else if "`cmd'" == "tag" {c -(}
        = else if "tag" == "tag" {c -(}
        - syntax [varlist(default=none)] [if] [in], Generate(str)
        - capture confirm new variable `generate'
        = capture confirm new variable kittendupe
        - if _rc {c -(}
          di as err "generate() must specify new variable"
          exit _rc
          {c )-}
        - if "`varlist'" == "" {c -(}
        = if "province district sub_district village census_block sls_number hh_number" == "" {c -(}
          unab varlist : _all
          local varlist : subinstr local varlist "`_sortindex'" ""
          local vartext "{c -(}txt{c )-} all variables"
          {c )-}
        - else local vartext "{c -(}res{c )-} `varlist'"
        = else local vartext "{c -(}res{c )-} province district sub_district village census_block sls_number hh_number"
        - {c )-}
        - else {c -(}
          syntax [varlist(default=none)] [if] [in] [ , * ]
          if "`varlist'" == "" {c -(}
          unab varlist : _all
          local varlist : subinstr local varlist "`_sortindex'" ""
          local vartext "{c -(}txt{c )-} all variables"
          {c )-}
          else local vartext "{c -(}res{c )-} `varlist'"
          {c )-}
        - marksample touse, novarlist
        - qui count if `touse'
        = qui count if __000001
        - return scalar N = r(N)
        - if r(N) == 0 {c -(}
          error 2000
          {c )-}
        - tempvar order dgroup Ngroup example freq surplus uniq
        - di _n "{c -(}p 0 4{c )-}{c -(}txt{c )-}Duplicates in terms of `vartext'{c -(}p_end{c )-}"
        = di _n "{c -(}p 0 4{c )-}{c -(}txt{c )-}Duplicates in terms of {c -(}res{c )-} province district sub_district village census_block sls_number hh_number{c -(}p_end{c )-}"
        - gen long `order' = _n
        = gen long __000002 = _n
        - bysort `touse' `varlist' : gen long `Ngroup' = _N
        = bysort __000001 province district sub_district village census_block sls_number hh_number : gen long __000004 = _N
        - qui if "`cmd'" == "tag" {c -(}
        = qui if "tag" == "tag" {c -(}
        - gen long `generate' = `Ngroup' - 1 if `touse'
        = gen long kittendupe = __000004 - 1 if __000001
        - compress `generate'
        = compress kittendupe
        - exit 0
        {hline 72} end duplicates {hline}
      - tab kittendupe if kittendupe > 0
      - local n = `r(N)'/2
      = local n = 52/2
      - if `r(N)'/`=_N'/2 < 0.05 & `r(N)' != 0 {c -(}
      = if 52/6085005/2 < 0.05 & 52 != 0 {c -(}
      - duplicates drop `mergevars', force
      = duplicates drop province  district  sub_district  village  census_block  sls_number  hh_number, force
        {hline 70} begin duplicates {hline}
        - version 8
        - gettoken cmd 0 : 0, parse(" ,")
        - local l = length("`cmd'")
        = local l = length("drop")
        - if `l' == 0 {c -(}
        = if 4 == 0 {c -(}
          di "{c -(}err{c )-}subcommand needed; see help on {c -(}help duplicates##|_new:duplicates{c )-}"
          exit 198
          {c )-}
        - if substr("report",1,max(1,`l')) == "`cmd'" {c -(}
        = if substr("report",1,max(1,4)) == "drop" {c -(}
          local cmd "report"
          {c )-}
        - else if substr("examples",1,max(1,`l')) == "`cmd'" {c -(}
        = else if substr("examples",1,max(1,4)) == "drop" {c -(}
          local cmd "examples"
          {c )-}
        - else if substr("list",1,max(1,`l')) == "`cmd'" {c -(}
        = else if substr("list",1,max(1,4)) == "drop" {c -(}
          local cmd "list"
          {c )-}
        - else if substr("browse",1,max(1,`l')) == "`cmd'" {c -(}
        = else if substr("browse",1,max(1,4)) == "drop" {c -(}
          local cmd "browse"
          di "{c -(}p 0 0 2{c )-}As of Stata 11.0, browse is " "no longer a valid subcommand.  {c -(}result{c )-}See " "{c -(}help duplicates##remarks:Remarks{c )-} " "under help {c -(}helpb duplicates{c )-} " "for an explanation.{c -(}p_end{c )-}"
          exit 198
          {c )-}
        - else if substr("tag",1,max(1,`l')) == "`cmd'" {c -(}
        = else if substr("tag",1,max(1,4)) == "drop" {c -(}
          local cmd "tag"
          {c )-}
        - else if "drop" == "`cmd'" {c -(}
        = else if "drop" == "drop" {c -(}
        - {c )-}
        - else {c -(}
          di "{c -(}err{c )-}illegal {c -(}cmd{c )-}duplicates {c -(}err{c )-}subcommand"
          exit 198
          {c )-}
        - if "`cmd'" == "drop" {c -(}
        = if "drop" == "drop" {c -(}
        - capture syntax varlist [if] [in]
        - if _rc == 0 {c -(}
          di "{c -(}err{c )-}force option required with " "{c -(}cmd{c )-}duplicates drop {c -(}it{c )-}varlist{c -(}rm{c )-}"
          exit 198
          {c )-}
        - capture syntax varlist [if] [in], force
        - if _rc {c -(}
          syntax [if] [in]
          unab varlist : _all
          local varlist : subinstr local varlist "`_sortindex'" ""
          local vartext "{c -(}txt{c )-} all variables"
          {c )-}
        - else local vartext "{c -(}res{c )-} `varlist'"
        = else local vartext "{c -(}res{c )-} province district sub_district village census_block sls_number hh_number"
        - {c )-}
        - else if "`cmd'" == "tag" {c -(}
        = else if "drop" == "tag" {c -(}
          syntax [varlist(default=none)] [if] [in], Generate(str)
          capture confirm new variable `generate'
          if _rc {c -(}
          di as err "generate() must specify new variable"
          exit _rc
          {c )-}
          if "`varlist'" == "" {c -(}
          unab varlist : _all
          local varlist : subinstr local varlist "`_sortindex'" ""
          local vartext "{c -(}txt{c )-} all variables"
          {c )-}
          else local vartext "{c -(}res{c )-} `varlist'"
          {c )-}
        - else {c -(}
          syntax [varlist(default=none)] [if] [in] [ , * ]
          if "`varlist'" == "" {c -(}
          unab varlist : _all
          local varlist : subinstr local varlist "`_sortindex'" ""
          local vartext "{c -(}txt{c )-} all variables"
          {c )-}
          else local vartext "{c -(}res{c )-} `varlist'"
          {c )-}
        - marksample touse, novarlist
        - qui count if `touse'
        = qui count if __000001
        - return scalar N = r(N)
        - if r(N) == 0 {c -(}
          error 2000
          {c )-}
        - tempvar order dgroup Ngroup example freq surplus uniq
        - di _n "{c -(}p 0 4{c )-}{c -(}txt{c )-}Duplicates in terms of `vartext'{c -(}p_end{c )-}"
        = di _n "{c -(}p 0 4{c )-}{c -(}txt{c )-}Duplicates in terms of {c -(}res{c )-} province district sub_district village census_block sls_number hh_number{c -(}p_end{c )-}"
        - gen long `order' = _n
        = gen long __000002 = _n
        - bysort `touse' `varlist' : gen long `Ngroup' = _N
        = bysort __000001 province district sub_district village census_block sls_number hh_number : gen long __000004 = _N
        - qui if "`cmd'" == "tag" {c -(}
        = qui if "drop" == "tag" {c -(}
          gen long `generate' = `Ngroup' - 1 if `touse'
          compress `generate'
          exit 0
          {c )-}
        - if "`cmd'" == "report" {c -(}
        = if "drop" == "report" {c -(}
          bysort `touse' `Ngroup' : gen long `freq' = _N
          by `touse' `Ngroup' : gen long `surplus' = _N - _N / `Ngroup'
          label var `Ngroup' "copies"
          label var `freq' "observations"
          label var `surplus' "surplus"
          tabdisp `Ngroup' if `touse', cell(`freq' `surplus')
          local varcount: word count `varlist'
          qui bysort `touse' `varlist' (`order'): gen byte `uniq' = 1 if _n==1 & `touse'
          char `order'[varname] "obs:"
          qui count if `uniq'==1
          local uniqcnttol = r(N)
          return scalar unique_value = `uniqcnttol'
          exit 0
          {c )-}
        - bysort `touse' `varlist' (`order') : gen byte `example' = (_N > 1) * (_n == 1) * `touse'
        = bysort __000001 province district sub_district village census_block sls_number hh_number (__000002) : gen byte __000005 = (_N > 1) * (_n == 1) * __000001
        - qui by `touse' `varlist' : gen `dgroup' = `example'[1]
        = qui by __000001 province district sub_district village census_block sls_number hh_number : gen __000003 = __000005[1]
        - qui replace `dgroup' = `dgroup' * sum(`example')
        = qui replace __000003 = __000003 * sum(__000005)
        - char `dgroup'[varname] "group:"
        = char __000003[varname] "group:"
        - sort `dgroup' `order'
        = sort __000003 __000002
        - su `dgroup', meanonly
        = su __000003, meanonly
        - if `r(max)' == 0 {c -(}
        = if 26 == 0 {c -(}
          di _n as txt "(0 observations are duplicates)"
          exit 0
          {c )-}
        - if "`cmd'" == "examples" {c -(}
        = if "drop" == "examples" {c -(}
          char `order'[varname] "e.g. obs:"
          char `Ngroup'[varname] "#"
          if `r(max)' > 1 {c -(}
          list `dgroup' `Ngroup' `order' `varlist' if `example', subvarname noobs `options'
          {c )-}
          else {c -(}
          list `Ngroup' `order' `varlist' if `example', subvarname noobs `options'
          {c )-}
          {c )-}
        - else if "`cmd'" == "list" {c -(}
        = else if "drop" == "list" {c -(}
          char `order'[varname] "obs:"
          if `r(max)' > 1 {c -(}
          list `dgroup' `order' `varlist' if `dgroup', subvarname noobs `options'
          {c )-}
          else {c -(}
          list `order' `varlist' if `dgroup', subvarname noobs `options'
          {c )-}
          {c )-}
        - else if "`cmd'" == "drop" {c -(}
        = else if "drop" == "drop" {c -(}
        - di
        - noisily drop if !`example' & `dgroup'
        = noisily drop if !__000005 & __000003
        - {c )-}
        {hline 72} end duplicates {hline}
      - noisily: di as error "Dropping duplicates (n = `n') in master (`mergevars'). Number of dupes < 5% of n_obs"
      = noisily: di as error "Dropping duplicates (n = 26) in master (province  district  sub_district  village  census_block  sls_number  hh_number). Number of dupes < 5% of n_obs"
{err}Dropping duplicates (n = 26) in master (province  district  sub_district  village  census_block  sls_number  hh_number). Number of dupes < 5% of n_obs
      {txt}- {c )-}
      - else if `n' != 0 {c -(}
      = else if 26 != 0 {c -(}
        noisily: di as error "Merge vars in master (`master') aren't uniquely identifying. `n' duplicates out of `=_N' obs"
        STOP
        {c )-}
      - drop kittendupe
      - {c )-}
      - {c )-}
      - preserve
      - load `file'
      = load J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_POP_ALL_Y2013M05D28.DTA
        {hline 76} begin load {hline}
        - syntax anything, [delimiter(str)]
        - local path `anything'
        = local path J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_POP_ALL_Y2013M05D28.DTA
        - if c(os) == "Unix" | c(os) == "MacOSX" {c -(}
        - local path = subinstr("`path'", "J:", "$j", .)
        = local path = subinstr("J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_POP_ALL_Y2013M05D28.DTA", "J:", "/home/j", .)
        - {c )-}
        - else if c(os) == "Windows" {c -(}
          local path = subinstr("`path'", "/home/j", "$j", .)
          {c )-}
        - tokenize `path', p(".")
        = tokenize /home/j/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_POP_ALL_Y2013M05D28.DTA, p(".")
        - local file = "`1'"
        = local file = "/home/j/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_POP_ALL_Y2013M05D28"
        - local ext = lower("`3'")
        = local ext = lower("DTA")
        - if "`ext'" == "" {c -(}
        = if "dta" == "" {c -(}
          di as error "Path needs a file extension"
          STOP
          {c )-}
        - if "`ext'" == "dta" {c -(}
        = if "dta" == "dta" {c -(}
        - use "`path'", clear
        = use "/home/j/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_POP_ALL_Y2013M05D28.DTA", clear
(Written by R.              )
        - {c )-}
        - else if inlist("`ext'", "csv", "tab") {c -(}
        = else if inlist("dta", "csv", "tab") {c -(}
          if mi("`delimiter'") import delimited using "`path'", clear
          else import delimited using "`path'", clear delimiters("`delimiter'")
          {c )-}
        - else if inlist("`ext'", "txt") {c -(}
        = else if inlist("dta", "txt") {c -(}
          import delimited using "`path'", clear delim(" ")
          {c )-}
        - else if inlist("`ext'", "xlsx", "xls") {c -(}
        = else if inlist("dta", "xlsx", "xls") {c -(}
          import excel using "`path'", clear first
          {c )-}
        - else if inlist("`ext'", "dbf") {c -(}
        = else if inlist("dta", "dbf") {c -(}
          rload "`path'"
          {c )-}
        - else if inlist("`ext'", "sav") {c -(}
        = else if inlist("dta", "sav") {c -(}
          cap which usespss
          if _rc {c -(}
          net from http://radyakin.org/transfer/usespss/beta
          net install usespss
          {c )-}
          cap qui: usespss "`path'", clear
          if _rc {c -(}
          rload "`path'"
          {c )-}
          {c )-}
        - else if inlist("`ext'", "xpt") {c -(}
        = else if inlist("dta", "xpt") {c -(}
          clear
          fdause `path'
          {c )-}
        - else if inlist("`ext'", "da") {c -(}
        = else if inlist("dta", "da") {c -(}
          infile using "`file'.dct", using("`file'.da") clear
          {c )-}
        - else {c -(}
          di as error "`ext' not accepted"
          {c )-}
        - drop_dupe_vars
          {hline 64} begin drop_dupe_vars {hline}
          - syntax
          - qui: ds
            {hline 74} begin ds {hline}
            - version 9
            - local version : di "version " string(_caller()) ":"
            - if (_caller() <= 4) {c -(}
              `version' describe, simple
              exit
              {c )-}
            - else {c -(}
            - ds_util `0'
            = ds_util 
              {hline 67} begin ds_util {hline}
              - version 8
              - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detail Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
              - if "`varlist'" == "" {c -(}
              = if "province district sub_district village urban_rural census_block sls_number physical_building census_building hh_number persnum relat sex yearborn age birthprovince birthdistrict religion seeing hearing hand_and_foot concentrating selfcare ethnicity foreigner prov5 district5 daily_language speak_indonesian school_attendance education latin_literacy otherliteracy marstat econactive temporarynotworking seekingwork willingtowork industry econstatus pernah_melahirkan mceb_in_house fceb_in_house mceb_out fceb_out mceb_death fceb_death melahirkan_1jan2009 weight district50 birthdate dateborn monthborn" == "" {c -(}
                exit
                {c )-}
              - if !inrange(`indent',0,244) {c -(}
              = if !inrange(0,0,244) {c -(}
                di as err "indent() should be in the range 0..244"
                exit 198
                {c )-}
              - if !inrange(`varwidth',5,32) {c -(}
              = if !inrange(12,5,32) {c -(}
                di as err "varwidth() should be in the range 5..32"
                exit 198
                {c )-}
              - if !inrange(`skip',1,10) {c -(}
              = if !inrange(2,1,10) {c -(}
                di as err "skip() should be in the range 1..10"
                exit 198
                {c )-}
              - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
              = local nopts = (`""' != "") + (`""' != "") + ("" != "")
              - if `nopts' == 3 {c -(}
              = if 0 == 3 {c -(}
                di as err "may not combine options has(), not(), and not"
                exit 198
                {c )-}
              - else if `nopts' == 2 {c -(}
              = else if 0 == 2 {c -(}
                if (`"`has'"' == "") {c -(}
                di as err "may not combine options not() and not"
                exit 198
                {c )-}
                else if (`"`not'"' == "") {c -(}
                di as err "may not combine options has() and not"
                exit 198
                {c )-}
                else if (`"`not2'"' == "") {c -(}
                di as err "may not combine options has() and not()"
                exit 198
                {c )-}
                {c )-}
              - if `"`not'"' != "" {c -(}
              = if `""' != "" {c -(}
                local has `"`not'"'
                local opt "not"
                {c )-}
              - else if `"`has'"' != "" {c -(}
              = else if `""' != "" {c -(}
                local opt "has"
                {c )-}
              - local inse = "`insensitive'" != ""
              = local inse = "" != ""
              - if `"`has'"' != "" {c -(}
              = if `""' != "" {c -(}
                CheckHas `"`has'"' "`opt'" "`inse'"
                if "`what'" == "varl" | "`what'" == "vall" {c -(}
                VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
                {c )-}
                else if "`what'" == "f" {c -(}
                Format `"`which'"' "`varlist'" "`inse'"
                {c )-}
                else if "`what'" == "c" {c -(}
                Char `"`which'"' "`varlist'" "`inse'"
                {c )-}
                else if "`what'" == "t" {c -(}
                Type `"`which'"' "`varlist'"
                {c )-}
                if `"`not'"' != "" {c -(}
                local varlist : list varlist - vlist
                {c )-}
                else if `"`has'"' != "" {c -(}
                local varlist "`vlist'"
                {c )-}
                {c )-}
              - if `"`not2'"' != "" {c -(}
              = if `""' != "" {c -(}
                unab all : *
                local varlist : list all - varlist
                {c )-}
              - if "`varlist'" == "" {c -(}
              = if "province district sub_district village urban_rural census_block sls_number physical_building census_building hh_number persnum relat sex yearborn age birthprovince birthdistrict religion seeing hearing hand_and_foot concentrating selfcare ethnicity foreigner prov5 district5 daily_language speak_indonesian school_attendance education latin_literacy otherliteracy marstat econactive temporarynotworking seekingwork willingtowork industry econstatus pernah_melahirkan mceb_in_house fceb_in_house mceb_out fceb_out mceb_death fceb_death melahirkan_1jan2009 weight district50 birthdate dateborn monthborn" == "" {c -(}
                exit
                {c )-}
              - if "`alpha'" != "" {c -(}
              = if "" != "" {c -(}
                local varlist : list sort varlist
                {c )-}
              - if "`detail'" != "" {c -(}
              = if "" != "" {c -(}
                describe `varlist'
                {c )-}
              - else {c -(}
              - local nvar : word count `varlist'
              = local nvar : word count province district sub_district village urban_rural census_block sls_number physical_building census_building hh_number persnum relat sex yearborn age birthprovince birthdistrict religion seeing hearing hand_and_foot concentrating selfcare ethnicity foreigner prov5 district5 daily_language speak_indonesian school_attendance education latin_literacy otherliteracy marstat econactive temporarynotworking seekingwork willingtowork industry econstatus pernah_melahirkan mceb_in_house fceb_in_house mceb_out fceb_out mceb_death fceb_death melahirkan_1jan2009 weight district50 birthdate dateborn monthborn
              - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
              = local ncol = int((99 + 2) / (12 + 2))
              - local i 0
              - local vlist
              - foreach v of local varlist {c -(}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn"'
              - {c )-}
              - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
              = local vlist `" province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn"'
              - {c )-}
              - DisplayInCols txt `indent' `skip' 0 `vlist'
              = DisplayInCols txt 0 2 0  province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                {hline 51} begin ds_util.DisplayInCols {hline}
                - gettoken sty 0 : 0
                - gettoken indent 0 : 0
                - gettoken pad 0 : 0
                - gettoken wid 0 : 0
                - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
                = local indent = cond(0==. | 0<0, 0, 0)
                - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
                = local pad = cond(2==. | 2<1, 2, 2)
                - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
                = local wid = cond(0==. | 0<0, 0, 0)
                - local n : list sizeof 0
                - if `n'==0 {c -(}
                = if 53==0 {c -(}
                  exit
                  {c )-}
                - foreach x of local 0 {c -(}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(0, length(`"province"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(8, length(`"district"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(8, length(`"sub_district"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"village"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"urban_rural"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"census_block"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"sls_number"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"physical_b~g"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"census_bui~g"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"hh_number"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"persnum"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"relat"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"sex"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"yearborn"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"age"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"birthprovi~e"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"birthdistr~t"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"religion"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"seeing"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"hearing"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"hand_and_f~t"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"concentrat~g"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"selfcare"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"ethnicity"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"foreigner"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"prov5"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"district5"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"daily_lang~e"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"speak_indo~n"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"school_att~e"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"education"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"latin_lite~y"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"otherliter~y"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"marstat"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"econactive"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"temporaryn~g"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"seekingwork"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"willingtow~k"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"industry"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"econstatus"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"pernah_mel~n"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"mceb_in_ho~e"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"fceb_in_ho~e"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"mceb_out"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"fceb_out"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"mceb_death"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"fceb_death"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"melahir~2009"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"weight"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"district50"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"birthdate"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"dateborn"'))
                - {c )-}
                - local wid = max(`wid', length(`"`x'"'))
                = local wid = max(12, length(`"monthborn"'))
                - {c )-}
                - local wid = `wid' + `pad'
                = local wid = 12 + 2
                - local cols = int((`c(linesize)'+1-`indent')/`wid')
                = local cols = int((99+1-0)/14)
                - if `cols' < 2 {c -(}
                = if 7 < 2 {c -(}
                  if `indent' {c -(}
                  local col "_column(`=`indent'+1')"
                  {c )-}
                  foreach x of local 0 {c -(}
                  di as `sty' `col' `"`x'"'
                  {c )-}
                  exit
                  {c )-}
                - local lines = `n'/`cols'
                = local lines = 53/7
                - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
                = local lines = int(cond(7.571428571428571>int(7.571428571428571), 7.571428571428571+1, 7.571428571428571))
                - forvalues i=1(1)`lines' {c -(}
                = forvalues i=1(1)8 {c -(}
                - local top = min((`cols')*`lines'+`i', `n')
                = local top = min((7)*8+1, 53)
                - local col = `indent' + 1
                = local col = 0 + 1
                - forvalues j=`i'(`lines')`top' {c -(}
                = forvalues j=1(8)53 {c -(}
                - local x : word `j' of `0'
                = local x : word 1 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(1) "province" _c
                - local col = `col' + `wid'
                = local col = 1 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 9 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(15) "census_bui~g" _c
                - local col = `col' + `wid'
                = local col = 15 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 17 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(29) "birthdistr~t" _c
                - local col = `col' + `wid'
                = local col = 29 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 25 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(43) "foreigner" _c
                - local col = `col' + `wid'
                = local col = 43 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 33 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(57) "otherliter~y" _c
                - local col = `col' + `wid'
                = local col = 57 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 41 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(71) "pernah_mel~n" _c
                - local col = `col' + `wid'
                = local col = 71 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 49 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(85) "weight" _c
                - local col = `col' + `wid'
                = local col = 85 + 14
                - {c )-}
                - di as `sty'
                = di as txt
                - {c )-}
                - local top = min((`cols')*`lines'+`i', `n')
                = local top = min((7)*8+2, 53)
                - local col = `indent' + 1
                = local col = 0 + 1
                - forvalues j=`i'(`lines')`top' {c -(}
                = forvalues j=2(8)53 {c -(}
                - local x : word `j' of `0'
                = local x : word 2 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(1) "district" _c
                - local col = `col' + `wid'
                = local col = 1 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 10 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(15) "hh_number" _c
                - local col = `col' + `wid'
                = local col = 15 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 18 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(29) "religion" _c
                - local col = `col' + `wid'
                = local col = 29 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 26 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(43) "prov5" _c
                - local col = `col' + `wid'
                = local col = 43 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 34 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(57) "marstat" _c
                - local col = `col' + `wid'
                = local col = 57 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 42 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(71) "mceb_in_ho~e" _c
                - local col = `col' + `wid'
                = local col = 71 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 50 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(85) "district50" _c
                - local col = `col' + `wid'
                = local col = 85 + 14
                - {c )-}
                - di as `sty'
                = di as txt
                - {c )-}
                - local top = min((`cols')*`lines'+`i', `n')
                = local top = min((7)*8+3, 53)
                - local col = `indent' + 1
                = local col = 0 + 1
                - forvalues j=`i'(`lines')`top' {c -(}
                = forvalues j=3(8)53 {c -(}
                - local x : word `j' of `0'
                = local x : word 3 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(1) "sub_district" _c
                - local col = `col' + `wid'
                = local col = 1 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 11 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(15) "persnum" _c
                - local col = `col' + `wid'
                = local col = 15 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 19 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(29) "seeing" _c
                - local col = `col' + `wid'
                = local col = 29 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 27 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(43) "district5" _c
                - local col = `col' + `wid'
                = local col = 43 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 35 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(57) "econactive" _c
                - local col = `col' + `wid'
                = local col = 57 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 43 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(71) "fceb_in_ho~e" _c
                - local col = `col' + `wid'
                = local col = 71 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 51 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(85) "birthdate" _c
                - local col = `col' + `wid'
                = local col = 85 + 14
                - {c )-}
                - di as `sty'
                = di as txt
                - {c )-}
                - local top = min((`cols')*`lines'+`i', `n')
                = local top = min((7)*8+4, 53)
                - local col = `indent' + 1
                = local col = 0 + 1
                - forvalues j=`i'(`lines')`top' {c -(}
                = forvalues j=4(8)53 {c -(}
                - local x : word `j' of `0'
                = local x : word 4 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(1) "village" _c
                - local col = `col' + `wid'
                = local col = 1 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 12 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(15) "relat" _c
                - local col = `col' + `wid'
                = local col = 15 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 20 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(29) "hearing" _c
                - local col = `col' + `wid'
                = local col = 29 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 28 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(43) "daily_lang~e" _c
                - local col = `col' + `wid'
                = local col = 43 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 36 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(57) "temporaryn~g" _c
                - local col = `col' + `wid'
                = local col = 57 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 44 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(71) "mceb_out" _c
                - local col = `col' + `wid'
                = local col = 71 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 52 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(85) "dateborn" _c
                - local col = `col' + `wid'
                = local col = 85 + 14
                - {c )-}
                - di as `sty'
                = di as txt
                - {c )-}
                - local top = min((`cols')*`lines'+`i', `n')
                = local top = min((7)*8+5, 53)
                - local col = `indent' + 1
                = local col = 0 + 1
                - forvalues j=`i'(`lines')`top' {c -(}
                = forvalues j=5(8)53 {c -(}
                - local x : word `j' of `0'
                = local x : word 5 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(1) "urban_rural" _c
                - local col = `col' + `wid'
                = local col = 1 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 13 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(15) "sex" _c
                - local col = `col' + `wid'
                = local col = 15 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 21 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(29) "hand_and_f~t" _c
                - local col = `col' + `wid'
                = local col = 29 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 29 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(43) "speak_indo~n" _c
                - local col = `col' + `wid'
                = local col = 43 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 37 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(57) "seekingwork" _c
                - local col = `col' + `wid'
                = local col = 57 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 45 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(71) "fceb_out" _c
                - local col = `col' + `wid'
                = local col = 71 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 53 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(85) "monthborn" _c
                - local col = `col' + `wid'
                = local col = 85 + 14
                - {c )-}
                - di as `sty'
                = di as txt
                - {c )-}
                - local top = min((`cols')*`lines'+`i', `n')
                = local top = min((7)*8+6, 53)
                - local col = `indent' + 1
                = local col = 0 + 1
                - forvalues j=`i'(`lines')`top' {c -(}
                = forvalues j=6(8)53 {c -(}
                - local x : word `j' of `0'
                = local x : word 6 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(1) "census_block" _c
                - local col = `col' + `wid'
                = local col = 1 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 14 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(15) "yearborn" _c
                - local col = `col' + `wid'
                = local col = 15 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 22 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(29) "concentrat~g" _c
                - local col = `col' + `wid'
                = local col = 29 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 30 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(43) "school_att~e" _c
                - local col = `col' + `wid'
                = local col = 43 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 38 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(57) "willingtow~k" _c
                - local col = `col' + `wid'
                = local col = 57 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 46 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(71) "mceb_death" _c
                - local col = `col' + `wid'
                = local col = 71 + 14
                - {c )-}
                - di as `sty'
                = di as txt
                - {c )-}
                - local top = min((`cols')*`lines'+`i', `n')
                = local top = min((7)*8+7, 53)
                - local col = `indent' + 1
                = local col = 0 + 1
                - forvalues j=`i'(`lines')`top' {c -(}
                = forvalues j=7(8)53 {c -(}
                - local x : word `j' of `0'
                = local x : word 7 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(1) "sls_number" _c
                - local col = `col' + `wid'
                = local col = 1 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 15 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(15) "age" _c
                - local col = `col' + `wid'
                = local col = 15 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 23 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(29) "selfcare" _c
                - local col = `col' + `wid'
                = local col = 29 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 31 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(43) "education" _c
                - local col = `col' + `wid'
                = local col = 43 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 39 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(57) "industry" _c
                - local col = `col' + `wid'
                = local col = 57 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 47 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(71) "fceb_death" _c
                - local col = `col' + `wid'
                = local col = 71 + 14
                - {c )-}
                - di as `sty'
                = di as txt
                - {c )-}
                - local top = min((`cols')*`lines'+`i', `n')
                = local top = min((7)*8+8, 53)
                - local col = `indent' + 1
                = local col = 0 + 1
                - forvalues j=`i'(`lines')`top' {c -(}
                = forvalues j=8(8)53 {c -(}
                - local x : word `j' of `0'
                = local x : word 8 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(1) "physical_b~g" _c
                - local col = `col' + `wid'
                = local col = 1 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 16 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(15) "birthprovi~e" _c
                - local col = `col' + `wid'
                = local col = 15 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 24 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(29) "ethnicity" _c
                - local col = `col' + `wid'
                = local col = 29 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 32 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(43) "latin_lite~y" _c
                - local col = `col' + `wid'
                = local col = 43 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 40 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(57) "econstatus" _c
                - local col = `col' + `wid'
                = local col = 57 + 14
                - {c )-}
                - local x : word `j' of `0'
                = local x : word 48 of   province district sub_district village urban_rural census_block sls_number physical_b~g census_bui~g hh_number persnum relat sex yearborn age birthprovi~e birthdistr~t religion seeing hearing hand_and_f~t concentrat~g selfcare ethnicity foreigner prov5 district5 daily_lang~e speak_indo~n school_att~e education latin_lite~y otherliter~y marstat econactive temporaryn~g seekingwork willingtow~k industry econstatus pernah_mel~n mceb_in_ho~e fceb_in_ho~e mceb_out fceb_out mceb_death fceb_death melahir~2009 weight district50 birthdate dateborn monthborn
                - di as `sty' _column(`col') "`x'" _c
                = di as txt _column(71) "melahir~2009" _c
                - local col = `col' + `wid'
                = local col = 71 + 14
                - {c )-}
                - di as `sty'
                = di as txt
                - {c )-}
                {hline 53} end ds_util.DisplayInCols {hline}
              - {c )-}
              - return local varlist `varlist'
              = return local varlist province district sub_district village urban_rural census_block sls_number physical_building census_building hh_number persnum relat sex yearborn age birthprovince birthdistrict religion seeing hearing hand_and_foot concentrating selfcare ethnicity foreigner prov5 district5 daily_language speak_indonesian school_attendance education latin_literacy otherliteracy marstat econactive temporarynotworking seekingwork willingtowork industry econstatus pernah_melahirkan mceb_in_house fceb_in_house mceb_out fceb_out mceb_death fceb_death melahirkan_1jan2009 weight district50 birthdate dateborn monthborn
              {hline 69} end ds_util {hline}
            - exit
            {hline 76} end ds {hline}
          - local vars `r(varlist)'
          = local vars province district sub_district village urban_rural census_block sls_number physical_building census_building hh_number persnum relat sex yearborn age birthprovince birthdistrict religion seeing hearing hand_and_foot concentrating selfcare ethnicity foreigner prov5 district5 daily_language speak_indonesian school_attendance education latin_literacy otherliteracy marstat econactive temporarynotworking seekingwork willingtowork industry econstatus pernah_melahirkan mceb_in_house fceb_in_house mceb_out fceb_out mceb_death fceb_death melahirkan_1jan2009 weight district50 birthdate dateborn monthborn
          - local lowervars = lower( `"`vars'"' )
          = local lowervars = lower( `"province district sub_district village urban_rural census_block sls_number physical_building census_building hh_number persnum relat sex yearborn age birthprovince birthdistrict religion seeing hearing hand_and_foot concentrating selfcare ethnicity foreigner prov5 district5 daily_language speak_indonesian school_attendance education latin_literacy otherliteracy marstat econactive temporarynotworking seekingwork willingtowork industry econstatus pernah_melahirkan mceb_in_house fceb_in_house mceb_out fceb_out mceb_death fceb_death melahirkan_1jan2009 weight district50 birthdate dateborn monthborn"' )
          - local dups : list dups lowervars
          - if "`dups'" != "" {c -(}
          = if "" != "" {c -(}
            foreach dup in `dups' {c -(}
            local pos : list posof `"`dup'"' in lowervars
            if `pos' != 0 {c -(}
            local drop : word `pos' of `vars'
            drop `drop'
            {c )-}
            {c )-}
            {c )-}
          {hline 66} end drop_dupe_vars {hline}
        - cap rename *, lower
          {hline 72} begin rename {hline}
          - version 12
          - mata: rename_cmd("`3'")
          = mata: rename_cmd("")
            {hline 72} begin unab {hline}
            - version 6
            - gettoken user 0: 0, parse(" :")
            - gettoken colon 0: 0, parse(" :")
            - if `"`colon'"' != ":" {c -(} error 198 {c )-}
            = if `":"' != ":" {c -(} error 198 {c )-}
            - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 32767) NAME(string)]
            - c_local `user' `varlist'
            = c_local __000000 province district sub_district village urban_rural census_block sls_number physical_building census_building hh_number persnum relat sex yearborn age birthprovince birthdistrict religion seeing hearing hand_and_foot concentrating selfcare ethnicity foreigner prov5 district5 daily_language speak_indonesian school_attendance education latin_literacy otherliteracy marstat econactive temporarynotworking seekingwork willingtowork industry econstatus pernah_melahirkan mceb_in_house fceb_in_house mceb_out fceb_out mceb_death fceb_death melahirkan_1jan2009 weight district50 birthdate dateborn monthborn
            - local n : word count `varlist'
            = local n : word count province district sub_district village urban_rural census_block sls_number physical_building census_building hh_number persnum relat sex yearborn age birthprovince birthdistrict religion seeing hearing hand_and_foot concentrating selfcare ethnicity foreigner prov5 district5 daily_language speak_indonesian school_attendance education latin_literacy otherliteracy marstat econactive temporarynotworking seekingwork willingtowork industry econstatus pernah_melahirkan mceb_in_house fceb_in_house mceb_out fceb_out mceb_death fceb_death melahirkan_1jan2009 weight district50 birthdate dateborn monthborn
            - if `n'>=`min' & `n'<=`max' {c -(} exit {c )-}
            = if 53>=1 & 53<=32767 {c -(} exit {c )-}
            {hline 74} end unab {hline}
          {hline 74} end rename {hline}
        {hline 78} end load {hline}
      - foreach var in `using' {c -(}
      = foreach var in province  district  sub_district  village  census_block  sls_number  hh_number {c -(}
      - gettoken is_var_num var_num: var_num
      - cap confirm numeric variable `var'
      = cap confirm numeric variable province
      - if `is_var_num' == 1 & _rc {c -(}
      = if 1 == 1 & _rc {c -(}
        destring `var', replace
        {c )-}
      - cap confirm string variable `var'
      = cap confirm string variable province
      - if `is_var_num' == 0 & _rc {c -(}
      = if 1 == 0 & _rc {c -(}
        tostring `var', replace format(%50.0f)
        {c )-}
      - {c )-}
      - gettoken is_var_num var_num: var_num
      - cap confirm numeric variable `var'
      = cap confirm numeric variable district
      - if `is_var_num' == 1 & _rc {c -(}
      = if 1 == 1 & _rc {c -(}
        destring `var', replace
        {c )-}
      - cap confirm string variable `var'
      = cap confirm string variable district
      - if `is_var_num' == 0 & _rc {c -(}
      = if 1 == 0 & _rc {c -(}
        tostring `var', replace format(%50.0f)
        {c )-}
      - {c )-}
      - gettoken is_var_num var_num: var_num
      - cap confirm numeric variable `var'
      = cap confirm numeric variable sub_district
      - if `is_var_num' == 1 & _rc {c -(}
      = if 1 == 1 & _rc {c -(}
        destring `var', replace
        {c )-}
      - cap confirm string variable `var'
      = cap confirm string variable sub_district
      - if `is_var_num' == 0 & _rc {c -(}
      = if 1 == 0 & _rc {c -(}
        tostring `var', replace format(%50.0f)
        {c )-}
      - {c )-}
      - gettoken is_var_num var_num: var_num
      - cap confirm numeric variable `var'
      = cap confirm numeric variable village
      - if `is_var_num' == 1 & _rc {c -(}
      = if 1 == 1 & _rc {c -(}
        destring `var', replace
        {c )-}
      - cap confirm string variable `var'
      = cap confirm string variable village
      - if `is_var_num' == 0 & _rc {c -(}
      = if 1 == 0 & _rc {c -(}
        tostring `var', replace format(%50.0f)
        {c )-}
      - {c )-}
      - gettoken is_var_num var_num: var_num
      - cap confirm numeric variable `var'
      = cap confirm numeric variable census_block
      - if `is_var_num' == 1 & _rc {c -(}
      = if 1 == 1 & _rc {c -(}
        destring `var', replace
        {c )-}
      - cap confirm string variable `var'
      = cap confirm string variable census_block
      - if `is_var_num' == 0 & _rc {c -(}
      = if 1 == 0 & _rc {c -(}
        tostring `var', replace format(%50.0f)
        {c )-}
      - {c )-}
      - gettoken is_var_num var_num: var_num
      - cap confirm numeric variable `var'
      = cap confirm numeric variable sls_number
      - if `is_var_num' == 1 & _rc {c -(}
      = if 1 == 1 & _rc {c -(}
        destring `var', replace
        {c )-}
      - cap confirm string variable `var'
      = cap confirm string variable sls_number
      - if `is_var_num' == 0 & _rc {c -(}
      = if 1 == 0 & _rc {c -(}
        tostring `var', replace format(%50.0f)
        {c )-}
      - {c )-}
      - gettoken is_var_num var_num: var_num
      - cap confirm numeric variable `var'
      = cap confirm numeric variable hh_number
      - if `is_var_num' == 1 & _rc {c -(}
      = if 1 == 1 & _rc {c -(}
        destring `var', replace
        {c )-}
      - cap confirm string variable `var'
      = cap confirm string variable hh_number
      - if `is_var_num' == 0 & _rc {c -(}
      = if 1 == 0 & _rc {c -(}
        tostring `var', replace format(%50.0f)
        {c )-}
      - {c )-}
      - if !`same' {c -(}
      = if !1 {c -(}
        if "`rename'" == "master" {c -(}
        foreach var in `using' {c -(}
        cap confirm variable `var'
        if !_rc gen `var'_orig = `var'
        {c )-}
        rename (`master') (`using')
        {c )-}
        else if inlist("`rename'", "using", "") {c -(}
        foreach var in `master' {c -(}
        cap confirm variable `var'
        if !_rc gen `var'_orig = `var'
        {c )-}
        rename (`using') (`master')
        {c )-}
        {c )-}
      - egen kittenmissing = rowmiss(`mergevars')
      = egen kittenmissing = rowmiss(province  district  sub_district  village  census_block  sls_number  hh_number)
        {hline 76} begin egen {hline}
        - version 6, missing
        - local cvers = _caller()
        - gettoken type 0 : 0, parse(" =(")
        - gettoken name 0 : 0, parse(" =(")
        - if `"`name'"'=="=" {c -(}
        = if `"="'=="=" {c -(}
        - local name `"`type'"'
        = local name `"kittenmissing"'
        - local type : set type
        - {c )-}
        - else {c -(}
          gettoken eqsign 0 : 0, parse(" =(")
          if `"`eqsign'"' != "=" {c -(}
          error 198
          {c )-}
          {c )-}
        - confirm new variable `name'
        = confirm new variable kittenmissing
        - gettoken fcn 0 : 0, parse(" =(")
        - gettoken args 0 : 0, parse(" ,") match(par)
        - if "`c(adoarchive)'"=="1" {c -(}
        = if ""=="1" {c -(}
          capture qui _stfilearchive find _g`fcn'.ado
          if _rc {c -(}
          di as error "unknown egen function `fcn'()"
          exit 133
          {c )-}
          {c )-}
        - else {c -(}
        - capture qui findfile _g`fcn'.ado
        = capture qui findfile _growmiss.ado
          {hline 70} begin findfile {hline}
          - version 8
          - gettoken fn 0 : 0, parse(" ,")
          - syntax [, ALL noDEScend PATH(string)]
          - if `"`path'"'=="" {c -(}
          = if `""'=="" {c -(}
          - local path `"`c(adopath)'"'
          = local path `"`"BASE"';`"SITE"';`"."';`"PERSONAL"';`"PLUS"';`"OLDPLACE"';`"modules/extract/core/addons/"'"'
          - {c )-}
          - local n 0
          - local subdir : adosubdir `"`fn'"'
          = local subdir : adosubdir `"_growmiss.ado"'
          - if `"`subdir'"' != "" {c -(}
          = if `"_"' != "" {c -(}
          - gettoken d path : path, parse(";")
          - while `"`d'"'!="" {c -(}
          = while `"BASE"'!="" {c -(}
          - if `"`d'"' != ";" {c -(}
          = if `"BASE"' != ";" {c -(}
          - local d : sysdir `"`d'"'
          = local d : sysdir `"BASE"'
          - local ffn `"`d'`fn'"'
          = local ffn `"/opt/stata13/ado/base/_growmiss.ado"'
          - capture confirm file `"`ffn'"'
          = capture confirm file `"/opt/stata13/ado/base/_growmiss.ado"'
          - if _rc==0 {c -(}
            di as txt `"`ffn'"'
            if "`all'"=="" {c -(}
            ret local fn `"`ffn'"'
            exit
            {c )-}
            if `n' {c -(}
            ret local fn `"`return(fn)' "`ffn'""'
            {c )-}
            else ret local fn `""`ffn'""'
            local n 1
            {c )-}
          - if "`descend'"=="" {c -(}
          = if ""=="" {c -(}
          - local ffn `"`d'`subdir'`c(dirsep)'`fn'"'
          = local ffn `"/opt/stata13/ado/base/_/_growmiss.ado"'
          - capture confirm file `"`ffn'"'
          = capture confirm file `"/opt/stata13/ado/base/_/_growmiss.ado"'
          - if _rc==0 {c -(}
          - di as txt `"`ffn'"'
          = di as txt `"/opt/stata13/ado/base/_/_growmiss.ado"'
          - if "`all'"=="" {c -(}
          = if ""=="" {c -(}
          - ret local fn `"`ffn'"'
          = ret local fn `"/opt/stata13/ado/base/_/_growmiss.ado"'
          - exit
          {hline 72} end findfile {hline}
        - if (`"`r(fn)'"' == "") {c -(}
        = if (`"/opt/stata13/ado/base/_/_growmiss.ado"' == "") {c -(}
          di as error "unknown egen function `fcn'()"
          exit 133
          {c )-}
        - {c )-}
        - if `"`par'"' != "(" {c -(}
        = if `"("' != "(" {c -(}
          exit 198
          {c )-}
        - if `"`args'"' == "_all" | `"`args'"' == "*" {c -(}
        = if `"province  district  sub_district  village  census_block  sls_number  hh_number"' == "_all" | `"province  district  sub_district  village  census_block  sls_number  hh_number"' == "*" {c -(}
          version 7.0, missing
          unab args : _all
          local args : subinstr local args "`_sortindex'" "", all word
          version 6.0, missing
          {c )-}
        - syntax [if] [in] [, *]
        - if _by() {c -(}
          local byopt "by(`_byvars')"
          local cma ","
          {c )-}
        - else if `"`options'"' != "" {c -(}
        = else if `""' != "" {c -(}
          local cma ","
          {c )-}
        - tempvar dummy
        - global EGEN_Varname `name'
        = global EGEN_Varname kittenmissing
        - version 7.0, missing
        - global EGEN_SVarname `_sortindex'
        = global EGEN_SVarname __000000
        - version 6.0, missing
        - if ("`fcn'" == "mode" | "`fcn'" == "concat") {c -(}
        = if ("rowmiss" == "mode" | "rowmiss" == "concat") {c -(}
          local vv : display "version " string(`cvers') ", missing:"
          {c )-}
        - capture noisily `vv' _g`fcn' `type' `dummy' = (`args') `if' `in' `cma' `byopt' `options'
        = capture noisily  _growmiss float __000001 = (province  district  sub_district  village  census_block  sls_number  hh_number)     
          {hline 69} begin _growmiss {hline}
          - version 6, missing
          - gettoken type 0 : 0
          - gettoken g 0 : 0
          - gettoken eqs 0 : 0
          - syntax varlist [if] [in] [, BY(string)]
          - if `"`by'"' != "" {c -(}
          = if `""' != "" {c -(}
            _egennoby rowmiss() `"`by'"'
            {c )-}
          - quietly {c -(}
          - tokenize `varlist'
          = tokenize province district sub_district village census_block sls_number hh_number
          - gen `type' `g' = missing(`1') `if' `in'
          = gen float __000001 = missing(province)  
          - mac shift
          - while "`1'"!="" {c -(}
          = while "district"!="" {c -(}
          - replace `g' = `g' + missing(`1') `if' `in'
          = replace __000001 = __000001 + missing(district)  
          - mac shift
          - {c )-}
          - while "`1'"!="" {c -(}
          = while "sub_district"!="" {c -(}
          - replace `g' = `g' + missing(`1') `if' `in'
          = replace __000001 = __000001 + missing(sub_district)  
          - mac shift
          - {c )-}
          - while "`1'"!="" {c -(}
          = while "village"!="" {c -(}
          - replace `g' = `g' + missing(`1') `if' `in'
          = replace __000001 = __000001 + missing(village)  
          - mac shift
          - {c )-}
          - while "`1'"!="" {c -(}
          = while "census_block"!="" {c -(}
          - replace `g' = `g' + missing(`1') `if' `in'
          = replace __000001 = __000001 + missing(census_block)  
          - mac shift
          - {c )-}
          - while "`1'"!="" {c -(}
          = while "sls_number"!="" {c -(}
          - replace `g' = `g' + missing(`1') `if' `in'
          = replace __000001 = __000001 + missing(sls_number)  
          - mac shift
          - {c )-}
          - while "`1'"!="" {c -(}
          = while "hh_number"!="" {c -(}
          - replace `g' = `g' + missing(`1') `if' `in'
          = replace __000001 = __000001 + missing(hh_number)  
          - mac shift
          - {c )-}
          - while "`1'"!="" {c -(}
          = while ""!="" {c -(}
            replace `g' = `g' + missing(`1') `if' `in'
            mac shift
            {c )-}
          - {c )-}
          {hline 71} end _growmiss {hline}
        - global EGEN_SVarname
        - global EGEN_Varname
        - if _rc {c -(} exit _rc {c )-}
        - quietly count if missing(`dummy')
        = quietly count if missing(__000001)
        - if r(N) {c -(}
          local s = cond(r(N)>1,"s","")
          di in bl "(" r(N) " missing value`s' generated)"
          {c )-}
        - rename `dummy' `name'
        = rename __000001 kittenmissing
        {hline 78} end egen {hline}
      - qui: tab kittenmissing if kittenmissing > 0
      - local n = `r(N)'
      = local n = 651
      - if `r(N)' > 0 {c -(}
      = if 651 > 0 {c -(}
      - drop if kittenmissing > 0
(651 observations deleted)
      - di as error "Dropping `r(N)' obs in using that are missing one or more of the mergevars (`mergevars')"
      = di as error "Dropping 651 obs in using that are missing one or more of the mergevars (province  district  sub_district  village  census_block  sls_number  hh_number)"
{err}Dropping 651 obs in using that are missing one or more of the mergevars (province  district  sub_district  village  census_block  sls_number  hh_number)
      {txt}- {c )-}
      - drop kittenmissing
      - qui {c -(}
      - tokenize "`type'", p(":")
      = tokenize "1:m", p(":")
      - if "`3'" == "1" {c -(}
      = if "m" == "1" {c -(}
        duplicates tag `mergevars', gen(kittendupe)
        tab kittendupe if kittendupe > 0
        local n = `r(N)'/2
        if `r(N)'/`=_N'/2 < 0.05 & `r(N)' != 0 {c -(}
        duplicates drop `mergevars', force
        di as error "Dropping duplicates (n = `n') in using (`mergevars'). Number of dupes < 1% of n_obs"
        {c )-}
        else if `n' != 0 {c -(}
        noisily: di as error "Merge vars in using (`using') aren't uniquely identifying. `n' duplicates out of `=_N' obs"
        STOP
        {c )-}
        drop kittendupe
        {c )-}
      - {c )-}
      - qui: tempfile mergefile
      - qui: save `mergefile', replace
      = qui: save /tmp/St48035.000003, replace
      - restore
      - di as error "Merging `type' master(`master') using(`using') file(`file') `renametxt'"
      = di as error "Merging 1:m master(province  district  sub_district  village  census_block  sls_number  hh_number) using(province  district  sub_district  village  census_block  sls_number  hh_number) file(J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_POP_ALL_Y2013M05D28.DTA) "
{err}Merging 1:m master(province  district  sub_district  village  census_block  sls_number  hh_number) using(province  district  sub_district  village  census_block  sls_number  hh_number) file(J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_POP_ALL_Y2013M05D28.DTA) 
      {txt}- local options
      - if !mi("`gen'") | !mi("`keep'"){c -(}
      = if !mi("kittenmerge") | !mi("1 3"){c -(}
      - local options ,
      - if !mi("`gen'") {c -(}
      = if !mi("kittenmerge") {c -(}
      - if "`gen'" == "nogen" local options `options' nogen
      = if "kittenmerge" == "nogen" local options , nogen
      - else local options `options' gen(`gen')
      = else local options , gen(kittenmerge)
      - {c )-}
      - if !mi("`keep'") & "`keep'" != "." {c -(}
      = if !mi("1 3") & "1 3" != "." {c -(}
      - local options `options' keep(`keep')
      = local options , gen(kittenmerge) keep(1 3)
      - {c )-}
      - {c )-}
      - cap merge `type' `mergevars' using `mergefile' `options'
      = cap merge 1:m province  district  sub_district  village  census_block  sls_number  hh_number using /tmp/St48035.000003 , gen(kittenmerge) keep(1 3)
        {hline 75} begin merge {hline}
        - version 11
        - gettoken mtype 0 : 0, parse(" ,")
        - if (!strpos("`mtype'", ":") & "`mtype'"!="") {c -(}
        = if (!strpos("1:m", ":") & "1:m"!="") {c -(}
          if (_caller()>=11) {c -(}
          di as smcl as txt "{c -(}p{c )-}"
          di as smcl "(note: you are using old"
          di as smcl "{c -(}bf:merge{c )-} syntax; see"
          di as smcl "{c -(}bf:{c -(}help merge:[D] merge{c )-}{c )-} for new syntax)"
          di as smcl "{c -(}p_end{c )-}"
          {c )-}
          merge_10 `mtype' `0'
          exit
          {c )-}
        - local origmtype `"`mtype'"'
        = local origmtype `"1:m"'
        - mata: map_mtype(`"mtype"')
        - gettoken token : 0, parse(" ,")
        - if ("`token'"=="_n") {c -(}
        = if ("province"=="_n") {c -(}
          if ("`mtype'"!="1:1") {c -(}
          error_seq_not11 "`mtype'" "`origmtype'"
          {c )-}
          gettoken token 0 : 0, parse(" ,")
          local mtype "_n"
          {c )-}
        - syntax [varlist(default=none)] using/ [, ASSERT(string) DEBUG GENerate(name) FORCE KEEP(string) KEEPUSing(string) noLabel NOGENerate noNOTEs REPLACE noREPort SORTED UPDATE ]
        - if ("`mtype'"!="_n") {c -(}
        = if ("1:m"!="_n") {c -(}
        - local origmtype `"`mtype'"'
        = local origmtype `"1:m"'
        - mata: map_mtype(`"mtype"')
        - if ("`varlist'"=="") {c -(}
        = if ("province district sub_district village census_block sls_number hh_number"=="") {c -(}
          error_mat_varlist "`mtype'" "`origmtype'"
          {c )-}
        - {c )-}
        - else {c -(}
          if ("`mtype'"=="_n") {c -(}
          if ("`varlist'"!="") {c -(}
          error_seq_varlist
          {c )-}
          {c )-}
          {c )-}
        - mata: fullfilename("using", "usingfull", "using")
        - mata: resultlist("assert")
        - mata: resultlist("keep")
        - if ("`generate'"!="") {c -(}
        = if ("kittenmerge"!="") {c -(}
        - if ("`nogenerate'"!="") {c -(}
        = if (""!="") {c -(}
          di as smcl err "{c -(}p{c )-}"
          di as smcl "options -generate()- and -nogenerate-"
          di as smcl "may not be specified together."
          di as smcl err "{c -(}p_end{c )-}"
          {c )-}
        - confirm new var `generate'
        = confirm new var kittenmerge
        - {c )-}
        - if ("`replace'"!="") {c -(}
        = if (""!="") {c -(}
          if ("`update'"=="") {c -(}
          error_replace
          {c )-}
          {c )-}
        - if ("`sorted'"=="" & "`mtype'"!="_n") {c -(}
        = if (""=="" & "1:m"!="_n") {c -(}
        - local sortedby : sortedby
        - checksort "`sortedby'" "`varlist'"
        = checksort "" "province district sub_district village census_block sls_number hh_number"
          {hline 63} begin merge.checksort {hline}
          - args is should
          - local i 0
          - return scalar sorted = 1
          - foreach v1 of local should {c -(}
          - local ++i
          - local v2 : word `i' of `is'
          = local v2 : word 1 of 
          - if ("`v1'"!="`v2'") {c -(}
          = if ("province"!="") {c -(}
          - return scalar sorted = 0
          - continue, break
            {c )-}
            {c )-}
          {hline 65} end merge.checksort {hline}
        - if (!r(sorted)) {c -(}
        - sort `varlist'
        = sort province district sub_district village census_block sls_number hh_number
        - {c )-}
        - quietly describe using "`using'", varlist short
        = quietly describe using "/tmp/St48035.000003", varlist short
          {hline 70} begin describe {hline}
          - version 9
          - local version : di "version " string(_caller()) ":"
          - syntax [anything] [using] [, SImple REPLACE *]
          - if ("`replace'"!="") {c -(}
          = if (""!="") {c -(}
            describe_mk `0'
            return add
            exit
            {c )-}
          - local varlist `"`anything'"'
          = local varlist `""'
          - if ("`simple'" == "") {c -(}
          = if ("" == "") {c -(}
          - `version' _describe `0'
          = version 11: _describe using "/tmp/St48035.000003", varlist short
          - return add
          - {c )-}
          - else {c -(}
            if (`"`options'"' != "") {c -(}
            di as err "simple may not be combined with other options"
            exit 198
            {c )-}
            if (`"`using'"' != "") {c -(}
            qui `version' describe `varlist' `using', varlist
            if "`varlist'" == "" {c -(}
            local vars "`r(varlist)'"
            {c )-}
            else {c -(}
            local vars "`varlist'"
            {c )-}
            local wid = 2
            local n : list sizeof vars
            if `n'==0 {c -(}
            exit
            {c )-}
            foreach x of local vars {c -(}
            local wid = max(`wid', length(`"`x'"'))
            {c )-}
            local wid = `wid' + 2
            local cols = int((`c(linesize)'+1)/`wid')
            if `cols' < 2 {c -(}
            foreach x of local `vars' {c -(}
            di as txt `col' `"`x'"'
            {c )-}
            exit
            {c )-}
            local lines = `n'/`cols'
            local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
            forvalues i=1(1)`lines' {c -(}
            local top = min((`cols')*`lines'+`i', `n')
            local col = 1
            forvalues j=`i'(`lines')`top' {c -(}
            local x : word `j' of `vars'
            di as txt _column(`col') "`x'" _c
            local col = `col' + `wid'
            {c )-}
            di as txt
            {c )-}
            qui `version' describe `varlist' `using', short
            return add
            {c )-}
            else {c -(}
            ds `varlist'
            qui `version' _describe `varlist', short
            return add
            {c )-}
            {c )-}
          {hline 72} end describe {hline}
        - local sortedby "`r(sortlist)'"
        = local sortedby ""
        - checksort "`sortedby'" "`varlist'"
        = checksort "" "province district sub_district village census_block sls_number hh_number"
          {hline 63} begin merge.checksort {hline}
          - args is should
          - local i 0
          - return scalar sorted = 1
          - foreach v1 of local should {c -(}
          - local ++i
          - local v2 : word `i' of `is'
          = local v2 : word 1 of 
          - if ("`v1'"!="`v2'") {c -(}
          = if ("province"!="") {c -(}
          - return scalar sorted = 0
          - continue, break
            {c )-}
            {c )-}
          {hline 65} end merge.checksort {hline}
        - if (!r(sorted)) {c -(}
        - preserve
        - qui use "`using'", clear
        = qui use "/tmp/St48035.000003", clear
        - sort `varlist'
        = sort province district sub_district village census_block sls_number hh_number
        - tempfile using
        - qui save "`using'", replace
        = qui save "/tmp/St48035.000005", replace
        - restore
        - {c )-}
        - {c )-}
        - if ("`nogenerate'"!="") {c -(}
        = if (""!="") {c -(}
          tempvar mergevar
          local mergevaristemp 1
          {c )-}
        - else {c -(}
        - local mergevar = cond("`generate'"!="", "`generate'", "_merge")
        = local mergevar = cond("kittenmerge"!="", "kittenmerge", "_merge")
        - local mergevaristemp 0
        - {c )-}
        - local options `update' `replace' `notes' `label' _merge(`mergevar') `force'
        = local options     _merge(kittenmerge) 
        - if (substr("`mtype'", 1, 1)=="1") {c -(}
        = if (substr("1:m", 1, 1)=="1") {c -(}
        - local options `options' uniqmaster
        = local options _merge(kittenmerge) uniqmaster
        - {c )-}
        - if (substr("`mtype'", 3, 1)=="1") {c -(}
        = if (substr("1:m", 3, 1)=="1") {c -(}
          local options `options' uniqusing
          {c )-}
        - if ("`keepusing'"!="") {c -(}
        = if (""!="") {c -(}
          local options `options' keep(`keepusing')
          {c )-}
        - if ("`keep'" !="" & !strpos("`keep'" , "2")) {c -(}
        = if ("1 3" !="" & !strpos("1 3" , "2")) {c -(}
        - local options `options' nokeep
        = local options _merge(kittenmerge) uniqmaster nokeep
        - {c )-}
        - local _merge `"_merge `varlist' using "`using'", nowarn `options'"'
        = local _merge `"_merge province district sub_district village census_block sls_number hh_number using "/tmp/St48035.000005", nowarn _merge(kittenmerge) uniqmaster nokeep"'
        - local _merge `"`_merge' tabulate(mresults)"'
        = local _merge `"_merge province district sub_district village census_block sls_number hh_number using "/tmp/St48035.000005", nowarn _merge(kittenmerge) uniqmaster nokeep tabulate(mresults)"'
        - if ("`debug'"!="") {c -(}
        = if (""!="") {c -(}
          di as txt _n "command is"
          di `"`_merge'"' _n
          {c )-}
        - `_merge'
        = _merge province district sub_district village census_block sls_number hh_number using "/tmp/St48035.000005", nowarn _merge(kittenmerge) uniqmaster nokeep tabulate(mresults)
        - if (!`mergevaristemp') {c -(}
        = if (!0) {c -(}
        - capture label list _merge
          {hline 73} begin label {hline}
          - version 10.0
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("list", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - _label `macval(0)'
          = _label list _merge
            {c )-}
          {hline 75} end label {hline}
        - if (_rc) {c -(}
        - label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)" 4 "missing updated (4)" 5 "nonmissing conflict (5)"
          {hline 73} begin label {hline}
          - version 10.0
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("define", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - _label `macval(0)'
          = _label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)" 4 "missing updated (4)" 5 "nonmissing conflict (5)"
          - {c )-}
          {hline 75} end label {hline}
        - {c )-}
        - label values `mergevar' _merge
        = label values kittenmerge _merge
          {hline 73} begin label {hline}
          - version 10.0
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("values", "val") > 0 ) {c -(}
          - gettoken val 0 : 0
          - syntax anything [, nofix]
          - if "`fix'" != "" {c -(}
          = if "" != "" {c -(}
            local fix ", nofix"
            {c )-}
          - gettoken var rest : anything
          - while `"`rest'"' != "" {c -(}
          = while `" _merge"' != "" {c -(}
          - gettoken lab rest : rest
          - local label "`lab'"
          = local label "_merge"
          - {c )-}
          - while `"`rest'"' != "" {c -(}
          = while `""' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
          - local vlist : list anything - lab
          - if "`lab'" == "." {c -(}
          = if "_merge" == "." {c -(}
            local lab ""
            {c )-}
          - foreach var of varlist `vlist' {c -(}
          = foreach var of varlist kittenmerge {c -(}
          - _label `val' `var' `lab' `fix'
          = _label values kittenmerge _merge 
          - {c )-}
          - {c )-}
          - else {c -(}
            _label `macval(0)'
            {c )-}
          {hline 75} end label {hline}
        - {c )-}
        - if ("`assert'"!="") {c -(}
        = if (""!="") {c -(}
          if (_caller() < 13) {c -(}
          buildexpr expr : `mergevar' "`assert'"
          capture assert `expr'
          if (_rc) {c -(}
          error_assert `mergevar' "`assert'"
          {c )-}
          {c )-}
          else {c -(}
          capture checkmresults "`mresults'" "`assert'"
          if (_rc) {c -(}
          error_assert `mergevar' "`assert'"
          {c )-}
          {c )-}
          {c )-}
        - if ("`keep'"!="") {c -(}
        = if ("1 3"!="") {c -(}
        - buildexpr expr : `mergevar' "`keep'"
        = buildexpr expr : kittenmerge "1 3"
          {hline 63} begin merge.buildexpr {hline}
          - args userexpr colon varname numbers
          - gettoken first numbers : numbers
          - local list `varname'==`first'
          = local list kittenmerge==1
          - foreach el of local numbers {c -(}
          - local list `list' | `varname'==`el'
          = local list kittenmerge==1 | kittenmerge==3
          - {c )-}
          - c_local `userexpr' "(`list')"
          = c_local expr "(kittenmerge==1 | kittenmerge==3)"
          {hline 65} end merge.buildexpr {hline}
        - quietly keep if `expr'
        = quietly keep if (kittenmerge==1 | kittenmerge==3)
        - {c )-}
        - if ("`mtype'"=="1:1") {c -(}
        = if ("1:m"=="1:1") {c -(}
          qui count if `mergevar'==2
          if (r(N)==0) {c -(}
          sort `varlist'
          {c )-}
          {c )-}
        - if (c(noisily) & "`report'"=="") {c -(}
        = if (c(noisily) & ""=="") {c -(}
          local isupdate = ("`replace'"!="" | "`update'"!="")
          present_table `isupdate' `mergevar' `mergevaristemp'
          {c )-}
        {hline 77} end merge {hline}
      - if _rc merge `type' `mergevars' using `mergefile' `options' force
      = if _rc merge 1:m province  district  sub_district  village  census_block  sls_number  hh_number using /tmp/St48035.000003 , gen(kittenmerge) keep(1 3) force
      {hline 77} end mergexy {hline}
    - qui: tab kittenmerge if inlist(kittenmerge, 1)
    - if (`r(N)'/`=_N') > `threshold' {c -(}
    = if (16869/23565897) > 0.1 {c -(}
      forvalues butts = 1/3 {c -(}
      di "More than `threshold' not merged on!!!"
      {c )-}
      sleep 3000
      {c )-}
    - drop kittenmerge
    - qui: label_vars, file_path(`merge_file_`i'')
    = qui: label_vars, file_path(J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_POP_ALL_Y2013M05D28.DTA)
      {hline 72} begin label_vars {hline}
      - syntax, file_path(str) [labelvars(str)]
      - preserve
      - get, labels
        {hline 77} begin get {hline}
        - qui {c -(}
        - syntax, [vars codebook indicators labels merges] [keep_key]
        - clear
          {hline 73} begin clear {hline}
          - if _caller() < 10 {c -(}
            _clear_9 `0'
            exit
            {c )-}
          - version 10
          - syntax [anything]
          - tokenize `anything'
          = tokenize 
          - if `"`2'"' != "" {c -(}
          = if `""' != "" {c -(}
            display as err "`2' not allowed"
            exit 198
            {c )-}
          - if "`1'"=="" {c -(}
          = if ""=="" {c -(}
          - drop _all
          - label drop _all
            {hline 71} begin label {hline}
            - version 10.0
            - gettoken val : 0
            - if (strpos("`val'", "val") > 0 ) {c -(}
            = if (strpos("drop", "val") > 0 ) {c -(}
              gettoken val 0 : 0
              syntax anything [, nofix]
              if "`fix'" != "" {c -(}
              local fix ", nofix"
              {c )-}
              gettoken var rest : anything
              while `"`rest'"' != "" {c -(}
              gettoken lab rest : rest
              local label "`lab'"
              {c )-}
              local vlist : list anything - lab
              if "`lab'" == "." {c -(}
              local lab ""
              {c )-}
              foreach var of varlist `vlist' {c -(}
              _label `val' `var' `lab' `fix'
              {c )-}
              {c )-}
            - else {c -(}
            - _label `macval(0)'
            = _label drop _all
            - {c )-}
            {hline 73} end label {hline}
          - {c )-}
          - else if "`1'"=="mata" {c -(}
          = else if ""=="mata" {c -(}
            mata: mata clear
            {c )-}
          - else if inlist("`1'", "results", "matrix") {c -(}
          = else if inlist("", "results", "matrix") {c -(}
            return clear
            clearreturn
            ereturn clear
            sreturn clear
            _return drop _all
            if ("`1'" == "matrix") {c -(}
            matrix drop _all
            _est drop _all
            {c )-}
            {c )-}
          - else if "`1'"=="programs" {c -(}
          = else if ""=="programs" {c -(}
            program drop _all
            {c )-}
          - else if "`1'"=="ado" {c -(}
          = else if ""=="ado" {c -(}
            program drop _allado
            {c )-}
          - else if "`1'"=="*" | "`1'"=="all" {c -(}
          = else if ""=="*" | ""=="all" {c -(}
            capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
            capture
            if (0`semmods') {c -(}
            display as err "-clear all- not allowed while an SEM Builder is open"
            exit 1
            {c )-}
            drop _all
            label drop _all
            matrix drop _all
            scalar drop _all
            constraint drop _all
            eq drop _all
            file close _all
            postutil clear
            _return drop _all
            discard
            program drop _all
            timer clear
            mata: mata clear
            {c )-}
          - else {c -(}
            display as err "`1' not allowed"
            exit 198
            {c )-}
          {hline 75} end clear {hline}
        - local arg `2'
        = local arg labels
        - getmata (${c -(}`arg'_cols{c )-}) = `arg'
        = getmata (user file_path variable variable_label value_num value_str v7 v8 v9 v10 v11 v12) = labels
          {hline 71} begin getmata {hline}
          - version 11
          - syntax [anything(name=getlist id="getlist" equalok)] [, DOUBLE FORCE ID(string) REPLACE UPdate]
          - mata: get()
          {hline 73} end getmata {hline}
        - if !inlist("`arg'", "labels", "merge") destring *, replace
        = if !inlist("labels", "labels", "merge") destring *, replace
        - if !mi("`keep_key'") keep_key
        = if !mi("") keep_key
        - {c )-}
        {hline 79} end get {hline}
      - keep if file_path == "`file_path'" & !mi(variable_label)
      = keep if file_path == "J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_POP_ALL_Y2013M05D28.DTA" & !mi(variable_label)
      - local n = _N
      - if `n' > 0 {c -(}
      = if 0 > 0 {c -(}
        tempfile temp
        save `temp', replace
        levelsof variable, l(vars) clean
        foreach var in `vars' {c -(}
        use `temp', clear
        keep if variable == "`var'"
        local lab_`var' `=variable_label[1]'
        {c )-}
        {c )-}
      - restore
      - if `n' > 0 {c -(}
      = if 0 > 0 {c -(}
        foreach var in `vars' {c -(}
        cap confirm variable `var'
        if !_rc {c -(}
        label var `var' `"`lab_`var''"'
        di as error "Label Variable || Labeling variable (`var')"
        {c )-}
        else {c -(}
        di as error "Label Variable || Variable (`var') not in label database for file (`file_path')"
        {c )-}
        {c )-}
        {c )-}
      {hline 74} end label_vars {hline}
    - qui: label_vals, file_path(`merge_file_`i'')
    = qui: label_vals, file_path(J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_POP_ALL_Y2013M05D28.DTA)
      {hline 72} begin label_vals {hline}
      - syntax, file_path(str) [labelvars(str)]
      - preserve
      - get, labels
        {hline 77} begin get {hline}
        - qui {c -(}
        - syntax, [vars codebook indicators labels merges] [keep_key]
        - clear
          {hline 73} begin clear {hline}
          - if _caller() < 10 {c -(}
            _clear_9 `0'
            exit
            {c )-}
          - version 10
          - syntax [anything]
          - tokenize `anything'
          = tokenize 
          - if `"`2'"' != "" {c -(}
          = if `""' != "" {c -(}
            display as err "`2' not allowed"
            exit 198
            {c )-}
          - if "`1'"=="" {c -(}
          = if ""=="" {c -(}
          - drop _all
          - label drop _all
            {hline 71} begin label {hline}
            - version 10.0
            - gettoken val : 0
            - if (strpos("`val'", "val") > 0 ) {c -(}
            = if (strpos("drop", "val") > 0 ) {c -(}
              gettoken val 0 : 0
              syntax anything [, nofix]
              if "`fix'" != "" {c -(}
              local fix ", nofix"
              {c )-}
              gettoken var rest : anything
              while `"`rest'"' != "" {c -(}
              gettoken lab rest : rest
              local label "`lab'"
              {c )-}
              local vlist : list anything - lab
              if "`lab'" == "." {c -(}
              local lab ""
              {c )-}
              foreach var of varlist `vlist' {c -(}
              _label `val' `var' `lab' `fix'
              {c )-}
              {c )-}
            - else {c -(}
            - _label `macval(0)'
            = _label drop _all
            - {c )-}
            {hline 73} end label {hline}
          - {c )-}
          - else if "`1'"=="mata" {c -(}
          = else if ""=="mata" {c -(}
            mata: mata clear
            {c )-}
          - else if inlist("`1'", "results", "matrix") {c -(}
          = else if inlist("", "results", "matrix") {c -(}
            return clear
            clearreturn
            ereturn clear
            sreturn clear
            _return drop _all
            if ("`1'" == "matrix") {c -(}
            matrix drop _all
            _est drop _all
            {c )-}
            {c )-}
          - else if "`1'"=="programs" {c -(}
          = else if ""=="programs" {c -(}
            program drop _all
            {c )-}
          - else if "`1'"=="ado" {c -(}
          = else if ""=="ado" {c -(}
            program drop _allado
            {c )-}
          - else if "`1'"=="*" | "`1'"=="all" {c -(}
          = else if ""=="*" | ""=="all" {c -(}
            capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
            capture
            if (0`semmods') {c -(}
            display as err "-clear all- not allowed while an SEM Builder is open"
            exit 1
            {c )-}
            drop _all
            label drop _all
            matrix drop _all
            scalar drop _all
            constraint drop _all
            eq drop _all
            file close _all
            postutil clear
            _return drop _all
            discard
            program drop _all
            timer clear
            mata: mata clear
            {c )-}
          - else {c -(}
            display as err "`1' not allowed"
            exit 198
            {c )-}
          {hline 75} end clear {hline}
        - local arg `2'
        = local arg labels
        - getmata (${c -(}`arg'_cols{c )-}) = `arg'
        = getmata (user file_path variable variable_label value_num value_str v7 v8 v9 v10 v11 v12) = labels
          {hline 71} begin getmata {hline}
          - version 11
          - syntax [anything(name=getlist id="getlist" equalok)] [, DOUBLE FORCE ID(string) REPLACE UPdate]
          - mata: get()
          {hline 73} end getmata {hline}
        - if !inlist("`arg'", "labels", "merge") destring *, replace
        = if !inlist("labels", "labels", "merge") destring *, replace
        - if !mi("`keep_key'") keep_key
        = if !mi("") keep_key
        - {c )-}
        {hline 79} end get {hline}
      - keep if file_path == "`file_path'" & !mi(value_num)
      = keep if file_path == "J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_POP_ALL_Y2013M05D28.DTA" & !mi(value_num)
      - local n = _N
      - if `n' > 0 {c -(}
      = if 0 > 0 {c -(}
        tempfile temp
        save `temp', replace
        levelsof variable, l(vars) clean
        foreach var in `vars' {c -(}
        use `temp', clear
        keep if variable == "`var'"
        local lab_`var'
        forvalues i = 1/`=_N' {c -(}
        local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
        {c )-}
        {c )-}
        {c )-}
      - restore
      - if `n' > 0 {c -(}
      = if 0 > 0 {c -(}
        foreach var in `vars' {c -(}
        cap confirm variable `var'
        if !_rc {c -(}
        destring `var', replace force
        cap label drop lab
        label define lab_`var' `lab_`var''
        label values `var' lab_`var'
        di as error "Label Values || Labeling values for variable (`var')"
        {c )-}
        else {c -(}
        di as error "Label Values || Variable (`var') not in label database for file (`file_path')"
        {c )-}
        {c )-}
        {c )-}
      {hline 74} end label_vals {hline}
    - {c )-}
    - {c )-}
    {hline 75} end load_merges {hline}
  - di as error "||||||||||||||||||||||||||||||||||||"
{err}||||||||||||||||||||||||||||||||||||
  {txt}- di as error "|||||||||   LABEL VARS     |||||||||"
{err}|||||||||   LABEL VARS     |||||||||
  {txt}- di as error "||||||||||||||||||||||||||||||||||||"
{err}||||||||||||||||||||||||||||||||||||
  {txt}- qui: label_vars, file_path($file_path)
  = qui: label_vars, file_path(J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_HH_ALL_Y2013M05D28.DTA)
    {hline 74} begin label_vars {hline}
    - syntax, file_path(str) [labelvars(str)]
    - preserve
    - get, labels
      {hline 79} begin get {hline}
      - qui {c -(}
      - syntax, [vars codebook indicators labels merges] [keep_key]
      - clear
        {hline 75} begin clear {hline}
        - if _caller() < 10 {c -(}
          _clear_9 `0'
          exit
          {c )-}
        - version 10
        - syntax [anything]
        - tokenize `anything'
        = tokenize 
        - if `"`2'"' != "" {c -(}
        = if `""' != "" {c -(}
          display as err "`2' not allowed"
          exit 198
          {c )-}
        - if "`1'"=="" {c -(}
        = if ""=="" {c -(}
        - drop _all
        - label drop _all
          {hline 73} begin label {hline}
          - version 10.0
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - _label `macval(0)'
          = _label drop _all
          - {c )-}
          {hline 75} end label {hline}
        - {c )-}
        - else if "`1'"=="mata" {c -(}
        = else if ""=="mata" {c -(}
          mata: mata clear
          {c )-}
        - else if inlist("`1'", "results", "matrix") {c -(}
        = else if inlist("", "results", "matrix") {c -(}
          return clear
          clearreturn
          ereturn clear
          sreturn clear
          _return drop _all
          if ("`1'" == "matrix") {c -(}
          matrix drop _all
          _est drop _all
          {c )-}
          {c )-}
        - else if "`1'"=="programs" {c -(}
        = else if ""=="programs" {c -(}
          program drop _all
          {c )-}
        - else if "`1'"=="ado" {c -(}
        = else if ""=="ado" {c -(}
          program drop _allado
          {c )-}
        - else if "`1'"=="*" | "`1'"=="all" {c -(}
        = else if ""=="*" | ""=="all" {c -(}
          capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
          capture
          if (0`semmods') {c -(}
          display as err "-clear all- not allowed while an SEM Builder is open"
          exit 1
          {c )-}
          drop _all
          label drop _all
          matrix drop _all
          scalar drop _all
          constraint drop _all
          eq drop _all
          file close _all
          postutil clear
          _return drop _all
          discard
          program drop _all
          timer clear
          mata: mata clear
          {c )-}
        - else {c -(}
          display as err "`1' not allowed"
          exit 198
          {c )-}
        {hline 77} end clear {hline}
      - local arg `2'
      = local arg labels
      - getmata (${c -(}`arg'_cols{c )-}) = `arg'
      = getmata (user file_path variable variable_label value_num value_str v7 v8 v9 v10 v11 v12) = labels
        {hline 73} begin getmata {hline}
        - version 11
        - syntax [anything(name=getlist id="getlist" equalok)] [, DOUBLE FORCE ID(string) REPLACE UPdate]
        - mata: get()
        {hline 75} end getmata {hline}
      - if !inlist("`arg'", "labels", "merge") destring *, replace
      = if !inlist("labels", "labels", "merge") destring *, replace
      - if !mi("`keep_key'") keep_key
      = if !mi("") keep_key
      - {c )-}
      {hline 81} end get {hline}
    - keep if file_path == "`file_path'" & !mi(variable_label)
    = keep if file_path == "J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_HH_ALL_Y2013M05D28.DTA" & !mi(variable_label)
    - local n = _N
    - if `n' > 0 {c -(}
    = if 0 > 0 {c -(}
      tempfile temp
      save `temp', replace
      levelsof variable, l(vars) clean
      foreach var in `vars' {c -(}
      use `temp', clear
      keep if variable == "`var'"
      local lab_`var' `=variable_label[1]'
      {c )-}
      {c )-}
    - restore
    - if `n' > 0 {c -(}
    = if 0 > 0 {c -(}
      foreach var in `vars' {c -(}
      cap confirm variable `var'
      if !_rc {c -(}
      label var `var' `"`lab_`var''"'
      di as error "Label Variable || Labeling variable (`var')"
      {c )-}
      else {c -(}
      di as error "Label Variable || Variable (`var') not in label database for file (`file_path')"
      {c )-}
      {c )-}
      {c )-}
    {hline 76} end label_vars {hline}
  - qui: label_vals, file_path($file_path)
  = qui: label_vals, file_path(J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_HH_ALL_Y2013M05D28.DTA)
    {hline 74} begin label_vals {hline}
    - syntax, file_path(str) [labelvars(str)]
    - preserve
    - get, labels
      {hline 79} begin get {hline}
      - qui {c -(}
      - syntax, [vars codebook indicators labels merges] [keep_key]
      - clear
        {hline 75} begin clear {hline}
        - if _caller() < 10 {c -(}
          _clear_9 `0'
          exit
          {c )-}
        - version 10
        - syntax [anything]
        - tokenize `anything'
        = tokenize 
        - if `"`2'"' != "" {c -(}
        = if `""' != "" {c -(}
          display as err "`2' not allowed"
          exit 198
          {c )-}
        - if "`1'"=="" {c -(}
        = if ""=="" {c -(}
        - drop _all
        - label drop _all
          {hline 73} begin label {hline}
          - version 10.0
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - _label `macval(0)'
          = _label drop _all
          - {c )-}
          {hline 75} end label {hline}
        - {c )-}
        - else if "`1'"=="mata" {c -(}
        = else if ""=="mata" {c -(}
          mata: mata clear
          {c )-}
        - else if inlist("`1'", "results", "matrix") {c -(}
        = else if inlist("", "results", "matrix") {c -(}
          return clear
          clearreturn
          ereturn clear
          sreturn clear
          _return drop _all
          if ("`1'" == "matrix") {c -(}
          matrix drop _all
          _est drop _all
          {c )-}
          {c )-}
        - else if "`1'"=="programs" {c -(}
        = else if ""=="programs" {c -(}
          program drop _all
          {c )-}
        - else if "`1'"=="ado" {c -(}
        = else if ""=="ado" {c -(}
          program drop _allado
          {c )-}
        - else if "`1'"=="*" | "`1'"=="all" {c -(}
        = else if ""=="*" | ""=="all" {c -(}
          capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
          capture
          if (0`semmods') {c -(}
          display as err "-clear all- not allowed while an SEM Builder is open"
          exit 1
          {c )-}
          drop _all
          label drop _all
          matrix drop _all
          scalar drop _all
          constraint drop _all
          eq drop _all
          file close _all
          postutil clear
          _return drop _all
          discard
          program drop _all
          timer clear
          mata: mata clear
          {c )-}
        - else {c -(}
          display as err "`1' not allowed"
          exit 198
          {c )-}
        {hline 77} end clear {hline}
      - local arg `2'
      = local arg labels
      - getmata (${c -(}`arg'_cols{c )-}) = `arg'
      = getmata (user file_path variable variable_label value_num value_str v7 v8 v9 v10 v11 v12) = labels
        {hline 73} begin getmata {hline}
        - version 11
        - syntax [anything(name=getlist id="getlist" equalok)] [, DOUBLE FORCE ID(string) REPLACE UPdate]
        - mata: get()
        {hline 75} end getmata {hline}
      - if !inlist("`arg'", "labels", "merge") destring *, replace
      = if !inlist("labels", "labels", "merge") destring *, replace
      - if !mi("`keep_key'") keep_key
      = if !mi("") keep_key
      - {c )-}
      {hline 81} end get {hline}
    - keep if file_path == "`file_path'" & !mi(value_num)
    = keep if file_path == "J:/DATA/IDN/CENSUS/2010/IDN_CENSUS_2010_HH_ALL_Y2013M05D28.DTA" & !mi(value_num)
    - local n = _N
    - if `n' > 0 {c -(}
    = if 35 > 0 {c -(}
    - tempfile temp
    - save `temp', replace
    = save /tmp/St48035.000002, replace
    - levelsof variable, l(vars) clean
      {hline 74} begin levelsof {hline}
      - version 9
      - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
      - if (_N==0) {c -(}
        error 2000
        {c )-}
      - if "`separate'" == "" local sep " "
      = if "" == "" local sep " "
      - else local sep "`separate'"
      = else local sep ""
      - if "`missing'" != "" local novarlist "novarlist"
      = if "" != "" local novarlist "novarlist"
      - marksample touse, strok `novarlist'
      = marksample touse, strok 
      - capture confirm numeric variable `varlist'
      = capture confirm numeric variable variable
      - local isnum = _rc != 7
      - local maclen 0
      - if `isnum' {c -(}
      = if 0 {c -(}
        tempname Vals
        qui capture tab `varlist' if `touse', `missing' matrow(`Vals')
        if !(_rc) {c -(}
        local nvals = r(r)
        forval i = 1 / `nvals' {c -(}
        local val = `Vals'[`i',1]
        if `i' < `nvals' local vals "`vals'`val'`sep'"
        else local vals "`vals'`val'"
        {c )-}
        {c )-}
        else {c -(}
        tempvar select counter
        bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
        generate `counter' = sum(`select') * (`select' == 1)
        sort `counter'
        qui count if `counter' == 0
        local j = 1 + r(N)
        local nvals = _N
        forval i = `j' / `nvals' {c -(}
        local val = `varlist'[`i']
        if (`i' < `nvals') {c -(}
        local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""')
        local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""'
        {c )-}
        else {c -(}
        local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'""')
        local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'""'
        {c )-}
        local maclen = `maclen' + `:length local val' + `:length local sep'
        if ((`maclen' + `cmdlen') > `c(macrolen)') {c -(}
        di as err "macro length exceeded"
        exit 1000
        {c )-}
        else `cmd'
        {c )-}
        {c )-}
        {c )-}
      - else {c -(}
      - tempvar select counter
      - bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
      = bysort __000001 variable : gen byte __000002 = (_n == 1) * __000001
      - generate `counter' = sum(`select') * (`select' == 1)
      = generate __000003 = sum(__000002) * (__000002 == 1)
      - sort `counter'
      = sort __000003
      - qui count if `counter' == 0
      = qui count if __000003 == 0
      - local j = 1 + r(N)
      - local nvals = _N
      - if "`clean'" != "" {c -(}
      = if "clean" != "" {c -(}
      - forval i = `j' / `nvals' {c -(}
      = forval i = 30 / 35 {c -(}
      - if (`i' < `nvals') {c -(}
      = if (30 < 35) {c -(}
      - local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""')
      = local cmdlen = length(`"local vals "`vals'`=`varlist'[`i']'`sep'""')
      - local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""'
      = local cmd `"local vals "`vals'`=`varlist'[`i']'`sep'""'
      - {c )-}
      - else {c -(}
        local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'""')
        local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'""'
        {c )-}
      - local maclen = `maclen' + length(`"`=`varlist'[`i']'"') + length(`"`sep'"')
      = local maclen = 0 + length(`"cooking"') + length(`" "')
      - if ((`maclen' + `cmdlen') > `c(macrolen)') {c -(}
      = if ((8 + 41) > 165200) {c -(}
        di as err "macro length exceeded"
        exit 1000
        {c )-}
      - else `cmd'
      = else local vals "cooking "
      - {c )-}
      - if (`i' < `nvals') {c -(}
      = if (31 < 35) {c -(}
      - local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""')
      = local cmdlen = length(`"local vals "`vals'`=`varlist'[`i']'`sep'""')
      - local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""'
      = local cmd `"local vals "`vals'`=`varlist'[`i']'`sep'""'
      - {c )-}
      - else {c -(}
        local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'""')
        local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'""'
        {c )-}
      - local maclen = `maclen' + length(`"`=`varlist'[`i']'"') + length(`"`sep'"')
      = local maclen = 8 + length(`"drinking_water"') + length(`" "')
      - if ((`maclen' + `cmdlen') > `c(macrolen)') {c -(}
      = if ((23 + 41) > 165200) {c -(}
        di as err "macro length exceeded"
        exit 1000
        {c )-}
      - else `cmd'
      = else local vals "cooking drinking_water "
      - {c )-}
      - if (`i' < `nvals') {c -(}
      = if (32 < 35) {c -(}
      - local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""')
      = local cmdlen = length(`"local vals "`vals'`=`varlist'[`i']'`sep'""')
      - local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""'
      = local cmd `"local vals "`vals'`=`varlist'[`i']'`sep'""'
      - {c )-}
      - else {c -(}
        local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'""')
        local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'""'
        {c )-}
      - local maclen = `maclen' + length(`"`=`varlist'[`i']'"') + length(`"`sep'"')
      = local maclen = 23 + length(`"floor"') + length(`" "')
      - if ((`maclen' + `cmdlen') > `c(macrolen)') {c -(}
      = if ((29 + 41) > 165200) {c -(}
        di as err "macro length exceeded"
        exit 1000
        {c )-}
      - else `cmd'
      = else local vals "cooking drinking_water floor "
      - {c )-}
      - if (`i' < `nvals') {c -(}
      = if (33 < 35) {c -(}
      - local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""')
      = local cmdlen = length(`"local vals "`vals'`=`varlist'[`i']'`sep'""')
      - local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""'
      = local cmd `"local vals "`vals'`=`varlist'[`i']'`sep'""'
      - {c )-}
      - else {c -(}
        local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'""')
        local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'""'
        {c )-}
      - local maclen = `maclen' + length(`"`=`varlist'[`i']'"') + length(`"`sep'"')
      = local maclen = 29 + length(`"lighting "') + length(`" "')
      - if ((`maclen' + `cmdlen') > `c(macrolen)') {c -(}
      = if ((39 + 41) > 165200) {c -(}
        di as err "macro length exceeded"
        exit 1000
        {c )-}
      - else `cmd'
      = else local vals "cooking drinking_water floor lighting  "
      - {c )-}
      - if (`i' < `nvals') {c -(}
      = if (34 < 35) {c -(}
      - local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""')
      = local cmdlen = length(`"local vals "`vals'`=`varlist'[`i']'`sep'""')
      - local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""'
      = local cmd `"local vals "`vals'`=`varlist'[`i']'`sep'""'
      - {c )-}
      - else {c -(}
        local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'""')
        local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'""'
        {c )-}
      - local maclen = `maclen' + length(`"`=`varlist'[`i']'"') + length(`"`sep'"')
      = local maclen = 39 + length(`"septic_tank"') + length(`" "')
      - if ((`maclen' + `cmdlen') > `c(macrolen)') {c -(}
      = if ((51 + 41) > 165200) {c -(}
        di as err "macro length exceeded"
        exit 1000
        {c )-}
      - else `cmd'
      = else local vals "cooking drinking_water floor lighting  septic_tank "
      - {c )-}
      - if (`i' < `nvals') {c -(}
      = if (35 < 35) {c -(}
        local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""')
        local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'\`sep'""'
        {c )-}
      - else {c -(}
      - local cmdlen = length(`"local vals "\`vals'\`=\`varlist'[\`i']'""')
      = local cmdlen = length(`"local vals "`vals'`=`varlist'[`i']'""')
      - local cmd `"local vals "\`vals'\`=\`varlist'[\`i']'""'
      = local cmd `"local vals "`vals'`=`varlist'[`i']'""'
      - {c )-}
      - local maclen = `maclen' + length(`"`=`varlist'[`i']'"') + length(`"`sep'"')
      = local maclen = 51 + length(`"toilet"') + length(`" "')
      - if ((`maclen' + `cmdlen') > `c(macrolen)') {c -(}
      = if ((58 + 36) > 165200) {c -(}
        di as err "macro length exceeded"
        exit 1000
        {c )-}
      - else `cmd'
      = else local vals "cooking drinking_water floor lighting  septic_tank toilet"
      - {c )-}
      - {c )-}
      - else {c -(}
        forval i = `j' / `nvals' {c -(}
        if (`i' < `nvals') {c -(}
        local cmdlen = length(`"local vals `"\`vals'\`"\`=\`varlist'[\`i']'"'\`sep'"'"')
        local cmd `"local vals `"\`vals'\`"\`=\`varlist'[\`i']'"'\`sep'"'"'
        {c )-}
        else {c -(}
        local cmdlen = length(`"local vals \`"\`vals'\`"\`=\`varlist'[\`i']'"'"'"')
        local cmd `"local vals \`"\`vals'\`"\`=\`varlist'[\`i']'"'"'"'
        {c )-}
        local maclen = `maclen' + length(`"`=`varlist'[`i']'"') + length(`"`sep'"') + 4
        if ((`maclen' + `cmdlen') > `c(macrolen)') {c -(}
        di as err "macro length exceeded"
        exit 1000
        {c )-}
        else `cmd'
        {c )-}
        {c )-}
      - {c )-}
      - di as txt `"`vals'"'
      = di as txt `"cooking drinking_water floor lighting  septic_tank toilet"'
      - return local levels `"`vals'"'
      = return local levels `"cooking drinking_water floor lighting  septic_tank toilet"'
      - if "`local'" != "" {c -(}
      = if "vars" != "" {c -(}
      - c_local `local' `"`vals'"'
      = c_local vars `"cooking drinking_water floor lighting  septic_tank toilet"'
      - {c )-}
      {hline 76} end levelsof {hline}
    - foreach var in `vars' {c -(}
    = foreach var in cooking drinking_water floor lighting  septic_tank toilet {c -(}
    - use `temp', clear
    = use /tmp/St48035.000002, clear
    - keep if variable == "`var'"
    = keep if variable == "cooking"
    - local lab_`var'
    = local lab_cooking
    - forvalues i = 1/`=_N' {c -(}
    = forvalues i = 1/7 {c -(}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_cooking  1 "electricity "
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_cooking 1 "electricity " 2 "gas"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_cooking 1 "electricity " 2 "gas" 3 "kerosene"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_cooking 1 "electricity " 2 "gas" 3 "kerosene" 4 "charcoal"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_cooking 1 "electricity " 2 "gas" 3 "kerosene" 4 "charcoal" 5 "wood"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_cooking 1 "electricity " 2 "gas" 3 "kerosene" 4 "charcoal" 5 "wood" 6 "other"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_cooking 1 "electricity " 2 "gas" 3 "kerosene" 4 "charcoal" 5 "wood" 6 "other" 7 "does not cook "
    - {c )-}
    - {c )-}
    - use `temp', clear
    = use /tmp/St48035.000002, clear
    - keep if variable == "`var'"
    = keep if variable == "drinking_water"
    - local lab_`var'
    = local lab_drinking_water
    - forvalues i = 1/`=_N' {c -(}
    = forvalues i = 1/10 {c -(}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_drinking_water  2 "blast until home"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_drinking_water 2 "blast until home" 3 "retail plumbing"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_drinking_water 2 "blast until home" 3 "retail plumbing" 4 "pump"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_drinking_water 2 "blast until home" 3 "retail plumbing" 4 "pump" 5 "protected well"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_drinking_water 2 "blast until home" 3 "retail plumbing" 4 "pump" 5 "protected well" 6 "unprotected well"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_drinking_water 2 "blast until home" 3 "retail plumbing" 4 "pump" 5 "protected well" 6 "unprotected well" 7 "protected spring"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_drinking_water 2 "blast until home" 3 "retail plumbing" 4 "pump" 5 "protected well" 6 "unprotected well" 7 "protected spring" 8 "unprotect spring"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_drinking_water 2 "blast until home" 3 "retail plumbing" 4 "pump" 5 "protected well" 6 "unprotected well" 7 "protected spring" 8 "unprotect spring" 9 "river"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_drinking_water 2 "blast until home" 3 "retail plumbing" 4 "pump" 5 "protected well" 6 "unprotected well" 7 "protected spring" 8 "unprotect spring" 9 "river" 10 "rainwater"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_drinking_water 2 "blast until home" 3 "retail plumbing" 4 "pump" 5 "protected well" 6 "unprotected well" 7 "protected spring" 8 "unprotect spring" 9 "river" 10 "rainwater" 11 "other"
    - {c )-}
    - {c )-}
    - use `temp', clear
    = use /tmp/St48035.000002, clear
    - keep if variable == "`var'"
    = keep if variable == "floor"
    - local lab_`var'
    = local lab_floor
    - forvalues i = 1/`=_N' {c -(}
    = forvalues i = 1/7 {c -(}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_floor  1 "ceramic/marble/granite"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_floor 1 "ceramic/marble/granite" 2 "tile"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_floor 1 "ceramic/marble/granite" 2 "tile" 3 "cement/red brick"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_floor 1 "ceramic/marble/granite" 2 "tile" 3 "cement/red brick" 4 "wood"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_floor 1 "ceramic/marble/granite" 2 "tile" 3 "cement/red brick" 4 "wood" 5 "bamboo"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_floor 1 "ceramic/marble/granite" 2 "tile" 3 "cement/red brick" 4 "wood" 5 "bamboo" 6 "soil"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_floor 1 "ceramic/marble/granite" 2 "tile" 3 "cement/red brick" 4 "wood" 5 "bamboo" 6 "soil" 7 "other "
    - {c )-}
    - {c )-}
    - use `temp', clear
    = use /tmp/St48035.000002, clear
    - keep if variable == "`var'"
    = keep if variable == "lighting"
    - local lab_`var'
    = local lab_lighting
    - forvalues i = 1/`=_N' {c -(}
    = forvalues i = 1/0 {c -(}
      local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
      {c )-}
    - {c )-}
    - use `temp', clear
    = use /tmp/St48035.000002, clear
    - keep if variable == "`var'"
    = keep if variable == "septic_tank"
    - local lab_`var'
    = local lab_septic_tank
    - forvalues i = 1/`=_N' {c -(}
    = forvalues i = 1/3 {c -(}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_septic_tank  1 "septic tank"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_septic_tank 1 "septic tank" 2 "without septic tank"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_septic_tank 1 "septic tank" 2 "without septic tank" 3 "dont have one"
    - {c )-}
    - {c )-}
    - use `temp', clear
    = use /tmp/St48035.000002, clear
    - keep if variable == "`var'"
    = keep if variable == "toilet"
    - local lab_`var'
    = local lab_toilet
    - forvalues i = 1/`=_N' {c -(}
    = forvalues i = 1/4 {c -(}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_toilet  1 "own toilet"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_toilet 1 "own toilet" 2 "shared latrines"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_toilet 1 "own toilet" 2 "shared latrines" 3 "public toilets"
    - {c )-}
    - local lab_`var' `lab_`var'' `=value_num[`i']' "`=value_str[`i']'"
    = local lab_toilet 1 "own toilet" 2 "shared latrines" 3 "public toilets" 4 "none"
    - {c )-}
    - {c )-}
    - {c )-}
    - restore
    - if `n' > 0 {c -(}
    = if 35 > 0 {c -(}
    - foreach var in `vars' {c -(}
    = foreach var in cooking drinking_water floor lighting  septic_tank toilet {c -(}
    - cap confirm variable `var'
    = cap confirm variable cooking
    - if !_rc {c -(}
    - destring `var', replace force
    = destring cooking, replace force
      {hline 74} begin destring {hline}
      - version 7.0
      - syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(string)] [percent] [dpcomma]
      - if "`percent'" == "percent" {c -(}
      = if "" == "percent" {c -(}
        if !index(`"`ignore'"', "%") {c -(}
        local ignore `"`ignore'%"'
        {c )-}
        {c )-}
      - if "`generate'" != "" & "`replace'" != "" {c -(}
      = if "" != "" & "replace" != "" {c -(}
        di as err "options generate and replace are mutually exclusive"
        exit 198
        {c )-}
      - if "`generate'" == "" & "`replace'" == "" {c -(}
      = if "" == "" & "replace" == "" {c -(}
        di as err "must specify either generate or replace option"
        exit 198
        {c )-}
      - if "`generate'" != "" {c -(}
      = if "" != "" {c -(}
        local ct1: word count `varlist'
        local save "`varlist'"
        local 0 "`generate'"
        capture syntax newvarlist
        if _rc {c -(}
        di as err "generate(newvarlist) invalid"
        exit _rc
        {c )-}
        local generate "`varlist'"
        local varlist "`save'"
        local ct2: word count `generate'
        if `ct1' != `ct2' {c -(}
        di as err "number of variables in varlist must equal"
        di as err "number of variables in generate(newvarlist)"
        exit 198
        {c )-}
        {c )-}
      - local m 1
      - if `"`ignore'"' == "" {c -(}
      = if `""' == "" {c -(}
      - local ignore ""
      - {c )-}
      - local l = length(`"`ignore'"')
      = local l = length(`""')
      - while `m' <= `l' {c -(}
      = while 1 <= 0 {c -(}
        local char`m' = substr(`"`ignore'"', `m', 1)
        if substr(`"`ignore'"', `m', 1) == " " {c -(}
        local char`m' " "
        {c )-}
        local m = `m' + 1
        {c )-}
      - if "`generate'" != "" {c -(}
      = if "" != "" {c -(}
        tokenize `varlist'
        local flag 0
        local jj 1
        local yy 1
        local varno 0
        while "`1'" != "" {c -(}
        local varno = `varno' + 1
        capture confirm string variable `1'
        if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "generate"
        local newvar : word `varno' of `generate'
        mac shift
        {c )-}
        else {c -(}
        tempvar temp
        qui gen str1 `temp' = ""
        qui replace `temp' = `1'
        qui compress `temp'
        while `"`char`jj''"' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
        qui replace `temp' = trim(`temp')
        qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        local r = r(N)
        qui count if real(`temp') >= .
        local s = r(N)
        if `r' != `s' {c -(}
        local flag 1
        {c )-}
        if `flag' == 1 & "`force'" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "generate"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "generate"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
        else {c -(}
        tempvar OLDVAR ind con
        qui gen str1 `OLDVAR' = ""
        qui replace `OLDVAR' = `1'
        qui gen byte `ind' = .
        qui gen byte `con' = 0
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`OLDVAR', `"`t'"') != 0
        qui count if `ind' == 1
        if r(N) > 0 {c -(}
        if `"`t'"' == " " {c -(}
        local b `"`b' space"'
        {c )-}
        else {c -(}
        local b `"`b' `t'"'
        {c )-}
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`OLDVAR', `"`t'"') != 0
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `OLDVAR' = subinstr(`OLDVAR', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        local newvar : word `varno' of `generate'
        local vl: variable label `1'
        if "`float'" == "" {c -(}
        qui gen double `newvar' = real(`OLDVAR')
        {c )-}
        else {c -(}
        qui gen float `newvar' = real(`OLDVAR')
        {c )-}
        move `newvar' `1'
        move `1' `newvar'
        Charcopy `1' `newvar'
        label variable `newvar' `"`vl'"'
        char `newvar'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) > 0 {c -(}
        qui replace `newvar' = `newvar'/100
        {c )-}
        qui compress `newvar'
        local type : type `newvar'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; `newvar' " as res "generated " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1': characters" as res `"`b'"' as txt " removed; `newvar' " as res "generated " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; `newvar' " as res "generated " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        drop `ind' `con' `OLDVAR'
        local jj 1
        local yy 1
        mac shift
        {c )-}
        drop `temp'
        {c )-}
        {c )-}
        {c )-}
      - else if "`replace'" != "" {c -(}
      = else if "replace" != "" {c -(}
      - tokenize `varlist'
      = tokenize cooking
      - tempvar ind con
      - qui gen byte `con' = 0
      = qui gen byte __000001 = 0
      - qui gen byte `ind' = .
      = qui gen byte __000000 = .
      - local flag 0
      - local yy 1
      - local jj 1
      - while "`1'" != "" {c -(}
      = while "cooking" != "" {c -(}
      - capture confirm string variable `1'
      = capture confirm string variable cooking
      - if _rc != 0 {c -(}
      - di as txt "`1' already numeric; no " as res "replace"
      = di as txt "cooking already numeric; no " as res "replace"
      - mac shift
      - {c )-}
      - else {c -(}
        tempvar temp
        qui gen str1 `temp' = ""
        qui replace `temp' = `1'
        qui compress `temp'
        while `"`char`jj''"' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
        qui replace `temp' = trim(`temp')
        qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        local r = r(N)
        qui count if real(`temp') >= .
        local s = r(N)
        if `r' != `s' {c -(}
        local flag 1
        {c )-}
        if `flag' == 1 & "`force'" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
        else {c -(}
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        tempvar switch
        local type = cond("`float'" == "float", "float", "double")
        qui gen `type' `switch' = real(`1')
        char rename `1' `switch'
        move `switch' `1'
        local vl: variable label `1'
        drop `1'
        if "`float'" == "" {c -(}
        qui gen double `1' = `switch'
        {c )-}
        else {c -(}
        qui gen float `1' = `switch'
        {c )-}
        move `1' `switch'
        label variable `1' `"`vl'"'
        char rename `switch' `1'
        char `1'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
        qui replace `con' = 0
        qui compress `1'
        local type : type `1'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        local jj 1
        local yy 1
        drop `switch'
        mac shift
        {c )-}
        drop `temp'
        {c )-}
      - {c )-}
      - while "`1'" != "" {c -(}
      = while "" != "" {c -(}
        capture confirm string variable `1'
        if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
        else {c -(}
        tempvar temp
        qui gen str1 `temp' = ""
        qui replace `temp' = `1'
        qui compress `temp'
        while `"`char`jj''"' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
        qui replace `temp' = trim(`temp')
        qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        local r = r(N)
        qui count if real(`temp') >= .
        local s = r(N)
        if `r' != `s' {c -(}
        local flag 1
        {c )-}
        if `flag' == 1 & "`force'" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
        else {c -(}
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        tempvar switch
        local type = cond("`float'" == "float", "float", "double")
        qui gen `type' `switch' = real(`1')
        char rename `1' `switch'
        move `switch' `1'
        local vl: variable label `1'
        drop `1'
        if "`float'" == "" {c -(}
        qui gen double `1' = `switch'
        {c )-}
        else {c -(}
        qui gen float `1' = `switch'
        {c )-}
        move `1' `switch'
        label variable `1' `"`vl'"'
        char rename `switch' `1'
        char `1'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
        qui replace `con' = 0
        qui compress `1'
        local type : type `1'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        local jj 1
        local yy 1
        drop `switch'
        mac shift
        {c )-}
        drop `temp'
        {c )-}
        {c )-}
      - {c )-}
      {hline 76} end destring {hline}
    - cap label drop lab
      {hline 77} begin label {hline}
      - version 10.0
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("drop", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - _label `macval(0)'
      = _label drop lab
        {c )-}
      {hline 79} end label {hline}
    - label define lab_`var' `lab_`var''
    = label define lab_cooking 1 "electricity " 2 "gas" 3 "kerosene" 4 "charcoal" 5 "wood" 6 "other" 7 "does not cook "
      {hline 77} begin label {hline}
      - version 10.0
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - _label `macval(0)'
      = _label define lab_cooking 1 "electricity " 2 "gas" 3 "kerosene" 4 "charcoal" 5 "wood" 6 "other" 7 "does not cook "
      - {c )-}
      {hline 79} end label {hline}
    - label values `var' lab_`var'
    = label values cooking lab_cooking
      {hline 77} begin label {hline}
      - version 10.0
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("values", "val") > 0 ) {c -(}
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {c -(}
      = if "" != "" {c -(}
        local fix ", nofix"
        {c )-}
      - gettoken var rest : anything
      - while `"`rest'"' != "" {c -(}
      = while `" lab_cooking"' != "" {c -(}
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "lab_cooking"
      - {c )-}
      - while `"`rest'"' != "" {c -(}
      = while `""' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
      - local vlist : list anything - lab
      - if "`lab'" == "." {c -(}
      = if "lab_cooking" == "." {c -(}
        local lab ""
        {c )-}
      - foreach var of varlist `vlist' {c -(}
      = foreach var of varlist cooking {c -(}
      - _label `val' `var' `lab' `fix'
      = _label values cooking lab_cooking 
      - {c )-}
      - {c )-}
      - else {c -(}
        _label `macval(0)'
        {c )-}
      {hline 79} end label {hline}
    - di as error "Label Values || Labeling values for variable (`var')"
    = di as error "Label Values || Labeling values for variable (cooking)"
{err}Label Values || Labeling values for variable (cooking)
    {txt}- {c )-}
    - else {c -(}
      di as error "Label Values || Variable (`var') not in label database for file (`file_path')"
      {c )-}
    - {c )-}
    - cap confirm variable `var'
    = cap confirm variable drinking_water
    - if !_rc {c -(}
    - destring `var', replace force
    = destring drinking_water, replace force
      {hline 74} begin destring {hline}
      - version 7.0
      - syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(string)] [percent] [dpcomma]
      - if "`percent'" == "percent" {c -(}
      = if "" == "percent" {c -(}
        if !index(`"`ignore'"', "%") {c -(}
        local ignore `"`ignore'%"'
        {c )-}
        {c )-}
      - if "`generate'" != "" & "`replace'" != "" {c -(}
      = if "" != "" & "replace" != "" {c -(}
        di as err "options generate and replace are mutually exclusive"
        exit 198
        {c )-}
      - if "`generate'" == "" & "`replace'" == "" {c -(}
      = if "" == "" & "replace" == "" {c -(}
        di as err "must specify either generate or replace option"
        exit 198
        {c )-}
      - if "`generate'" != "" {c -(}
      = if "" != "" {c -(}
        local ct1: word count `varlist'
        local save "`varlist'"
        local 0 "`generate'"
        capture syntax newvarlist
        if _rc {c -(}
        di as err "generate(newvarlist) invalid"
        exit _rc
        {c )-}
        local generate "`varlist'"
        local varlist "`save'"
        local ct2: word count `generate'
        if `ct1' != `ct2' {c -(}
        di as err "number of variables in varlist must equal"
        di as err "number of variables in generate(newvarlist)"
        exit 198
        {c )-}
        {c )-}
      - local m 1
      - if `"`ignore'"' == "" {c -(}
      = if `""' == "" {c -(}
      - local ignore ""
      - {c )-}
      - local l = length(`"`ignore'"')
      = local l = length(`""')
      - while `m' <= `l' {c -(}
      = while 1 <= 0 {c -(}
        local char`m' = substr(`"`ignore'"', `m', 1)
        if substr(`"`ignore'"', `m', 1) == " " {c -(}
        local char`m' " "
        {c )-}
        local m = `m' + 1
        {c )-}
      - if "`generate'" != "" {c -(}
      = if "" != "" {c -(}
        tokenize `varlist'
        local flag 0
        local jj 1
        local yy 1
        local varno 0
        while "`1'" != "" {c -(}
        local varno = `varno' + 1
        capture confirm string variable `1'
        if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "generate"
        local newvar : word `varno' of `generate'
        mac shift
        {c )-}
        else {c -(}
        tempvar temp
        qui gen str1 `temp' = ""
        qui replace `temp' = `1'
        qui compress `temp'
        while `"`char`jj''"' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
        qui replace `temp' = trim(`temp')
        qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        local r = r(N)
        qui count if real(`temp') >= .
        local s = r(N)
        if `r' != `s' {c -(}
        local flag 1
        {c )-}
        if `flag' == 1 & "`force'" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "generate"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "generate"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
        else {c -(}
        tempvar OLDVAR ind con
        qui gen str1 `OLDVAR' = ""
        qui replace `OLDVAR' = `1'
        qui gen byte `ind' = .
        qui gen byte `con' = 0
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`OLDVAR', `"`t'"') != 0
        qui count if `ind' == 1
        if r(N) > 0 {c -(}
        if `"`t'"' == " " {c -(}
        local b `"`b' space"'
        {c )-}
        else {c -(}
        local b `"`b' `t'"'
        {c )-}
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`OLDVAR', `"`t'"') != 0
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `OLDVAR' = subinstr(`OLDVAR', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        local newvar : word `varno' of `generate'
        local vl: variable label `1'
        if "`float'" == "" {c -(}
        qui gen double `newvar' = real(`OLDVAR')
        {c )-}
        else {c -(}
        qui gen float `newvar' = real(`OLDVAR')
        {c )-}
        move `newvar' `1'
        move `1' `newvar'
        Charcopy `1' `newvar'
        label variable `newvar' `"`vl'"'
        char `newvar'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) > 0 {c -(}
        qui replace `newvar' = `newvar'/100
        {c )-}
        qui compress `newvar'
        local type : type `newvar'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; `newvar' " as res "generated " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1': characters" as res `"`b'"' as txt " removed; `newvar' " as res "generated " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; `newvar' " as res "generated " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        drop `ind' `con' `OLDVAR'
        local jj 1
        local yy 1
        mac shift
        {c )-}
        drop `temp'
        {c )-}
        {c )-}
        {c )-}
      - else if "`replace'" != "" {c -(}
      = else if "replace" != "" {c -(}
      - tokenize `varlist'
      = tokenize drinking_water
      - tempvar ind con
      - qui gen byte `con' = 0
      = qui gen byte __000001 = 0
      - qui gen byte `ind' = .
      = qui gen byte __000000 = .
      - local flag 0
      - local yy 1
      - local jj 1
      - while "`1'" != "" {c -(}
      = while "drinking_water" != "" {c -(}
      - capture confirm string variable `1'
      = capture confirm string variable drinking_water
      - if _rc != 0 {c -(}
      - di as txt "`1' already numeric; no " as res "replace"
      = di as txt "drinking_water already numeric; no " as res "replace"
      - mac shift
      - {c )-}
      - else {c -(}
        tempvar temp
        qui gen str1 `temp' = ""
        qui replace `temp' = `1'
        qui compress `temp'
        while `"`char`jj''"' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
        qui replace `temp' = trim(`temp')
        qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        local r = r(N)
        qui count if real(`temp') >= .
        local s = r(N)
        if `r' != `s' {c -(}
        local flag 1
        {c )-}
        if `flag' == 1 & "`force'" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
        else {c -(}
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        tempvar switch
        local type = cond("`float'" == "float", "float", "double")
        qui gen `type' `switch' = real(`1')
        char rename `1' `switch'
        move `switch' `1'
        local vl: variable label `1'
        drop `1'
        if "`float'" == "" {c -(}
        qui gen double `1' = `switch'
        {c )-}
        else {c -(}
        qui gen float `1' = `switch'
        {c )-}
        move `1' `switch'
        label variable `1' `"`vl'"'
        char rename `switch' `1'
        char `1'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
        qui replace `con' = 0
        qui compress `1'
        local type : type `1'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        local jj 1
        local yy 1
        drop `switch'
        mac shift
        {c )-}
        drop `temp'
        {c )-}
      - {c )-}
      - while "`1'" != "" {c -(}
      = while "" != "" {c -(}
        capture confirm string variable `1'
        if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
        else {c -(}
        tempvar temp
        qui gen str1 `temp' = ""
        qui replace `temp' = `1'
        qui compress `temp'
        while `"`char`jj''"' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
        qui replace `temp' = trim(`temp')
        qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        local r = r(N)
        qui count if real(`temp') >= .
        local s = r(N)
        if `r' != `s' {c -(}
        local flag 1
        {c )-}
        if `flag' == 1 & "`force'" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
        else {c -(}
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        tempvar switch
        local type = cond("`float'" == "float", "float", "double")
        qui gen `type' `switch' = real(`1')
        char rename `1' `switch'
        move `switch' `1'
        local vl: variable label `1'
        drop `1'
        if "`float'" == "" {c -(}
        qui gen double `1' = `switch'
        {c )-}
        else {c -(}
        qui gen float `1' = `switch'
        {c )-}
        move `1' `switch'
        label variable `1' `"`vl'"'
        char rename `switch' `1'
        char `1'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
        qui replace `con' = 0
        qui compress `1'
        local type : type `1'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        local jj 1
        local yy 1
        drop `switch'
        mac shift
        {c )-}
        drop `temp'
        {c )-}
        {c )-}
      - {c )-}
      {hline 76} end destring {hline}
    - cap label drop lab
      {hline 77} begin label {hline}
      - version 10.0
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("drop", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - _label `macval(0)'
      = _label drop lab
        {c )-}
      {hline 79} end label {hline}
    - label define lab_`var' `lab_`var''
    = label define lab_drinking_water 2 "blast until home" 3 "retail plumbing" 4 "pump" 5 "protected well" 6 "unprotected well" 7 "protected spring" 8 "unprotect spring" 9 "river" 10 "rainwater" 11 "other"
      {hline 77} begin label {hline}
      - version 10.0
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - _label `macval(0)'
      = _label define lab_drinking_water 2 "blast until home" 3 "retail plumbing" 4 "pump" 5 "protected well" 6 "unprotected well" 7 "protected spring" 8 "unprotect spring" 9 "river" 10 "rainwater" 11 "other"
      - {c )-}
      {hline 79} end label {hline}
    - label values `var' lab_`var'
    = label values drinking_water lab_drinking_water
      {hline 77} begin label {hline}
      - version 10.0
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("values", "val") > 0 ) {c -(}
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {c -(}
      = if "" != "" {c -(}
        local fix ", nofix"
        {c )-}
      - gettoken var rest : anything
      - while `"`rest'"' != "" {c -(}
      = while `" lab_drinking_water"' != "" {c -(}
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "lab_drinking_water"
      - {c )-}
      - while `"`rest'"' != "" {c -(}
      = while `""' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
      - local vlist : list anything - lab
      - if "`lab'" == "." {c -(}
      = if "lab_drinking_water" == "." {c -(}
        local lab ""
        {c )-}
      - foreach var of varlist `vlist' {c -(}
      = foreach var of varlist drinking_water {c -(}
      - _label `val' `var' `lab' `fix'
      = _label values drinking_water lab_drinking_water 
      - {c )-}
      - {c )-}
      - else {c -(}
        _label `macval(0)'
        {c )-}
      {hline 79} end label {hline}
    - di as error "Label Values || Labeling values for variable (`var')"
    = di as error "Label Values || Labeling values for variable (drinking_water)"
{err}Label Values || Labeling values for variable (drinking_water)
    {txt}- {c )-}
    - else {c -(}
      di as error "Label Values || Variable (`var') not in label database for file (`file_path')"
      {c )-}
    - {c )-}
    - cap confirm variable `var'
    = cap confirm variable floor
    - if !_rc {c -(}
    - destring `var', replace force
    = destring floor, replace force
      {hline 74} begin destring {hline}
      - version 7.0
      - syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(string)] [percent] [dpcomma]
      - if "`percent'" == "percent" {c -(}
      = if "" == "percent" {c -(}
        if !index(`"`ignore'"', "%") {c -(}
        local ignore `"`ignore'%"'
        {c )-}
        {c )-}
      - if "`generate'" != "" & "`replace'" != "" {c -(}
      = if "" != "" & "replace" != "" {c -(}
        di as err "options generate and replace are mutually exclusive"
        exit 198
        {c )-}
      - if "`generate'" == "" & "`replace'" == "" {c -(}
      = if "" == "" & "replace" == "" {c -(}
        di as err "must specify either generate or replace option"
        exit 198
        {c )-}
      - if "`generate'" != "" {c -(}
      = if "" != "" {c -(}
        local ct1: word count `varlist'
        local save "`varlist'"
        local 0 "`generate'"
        capture syntax newvarlist
        if _rc {c -(}
        di as err "generate(newvarlist) invalid"
        exit _rc
        {c )-}
        local generate "`varlist'"
        local varlist "`save'"
        local ct2: word count `generate'
        if `ct1' != `ct2' {c -(}
        di as err "number of variables in varlist must equal"
        di as err "number of variables in generate(newvarlist)"
        exit 198
        {c )-}
        {c )-}
      - local m 1
      - if `"`ignore'"' == "" {c -(}
      = if `""' == "" {c -(}
      - local ignore ""
      - {c )-}
      - local l = length(`"`ignore'"')
      = local l = length(`""')
      - while `m' <= `l' {c -(}
      = while 1 <= 0 {c -(}
        local char`m' = substr(`"`ignore'"', `m', 1)
        if substr(`"`ignore'"', `m', 1) == " " {c -(}
        local char`m' " "
        {c )-}
        local m = `m' + 1
        {c )-}
      - if "`generate'" != "" {c -(}
      = if "" != "" {c -(}
        tokenize `varlist'
        local flag 0
        local jj 1
        local yy 1
        local varno 0
        while "`1'" != "" {c -(}
        local varno = `varno' + 1
        capture confirm string variable `1'
        if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "generate"
        local newvar : word `varno' of `generate'
        mac shift
        {c )-}
        else {c -(}
        tempvar temp
        qui gen str1 `temp' = ""
        qui replace `temp' = `1'
        qui compress `temp'
        while `"`char`jj''"' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
        qui replace `temp' = trim(`temp')
        qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        local r = r(N)
        qui count if real(`temp') >= .
        local s = r(N)
        if `r' != `s' {c -(}
        local flag 1
        {c )-}
        if `flag' == 1 & "`force'" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "generate"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "generate"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
        else {c -(}
        tempvar OLDVAR ind con
        qui gen str1 `OLDVAR' = ""
        qui replace `OLDVAR' = `1'
        qui gen byte `ind' = .
        qui gen byte `con' = 0
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`OLDVAR', `"`t'"') != 0
        qui count if `ind' == 1
        if r(N) > 0 {c -(}
        if `"`t'"' == " " {c -(}
        local b `"`b' space"'
        {c )-}
        else {c -(}
        local b `"`b' `t'"'
        {c )-}
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`OLDVAR', `"`t'"') != 0
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `OLDVAR' = subinstr(`OLDVAR', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        local newvar : word `varno' of `generate'
        local vl: variable label `1'
        if "`float'" == "" {c -(}
        qui gen double `newvar' = real(`OLDVAR')
        {c )-}
        else {c -(}
        qui gen float `newvar' = real(`OLDVAR')
        {c )-}
        move `newvar' `1'
        move `1' `newvar'
        Charcopy `1' `newvar'
        label variable `newvar' `"`vl'"'
        char `newvar'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) > 0 {c -(}
        qui replace `newvar' = `newvar'/100
        {c )-}
        qui compress `newvar'
        local type : type `newvar'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; `newvar' " as res "generated " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1': characters" as res `"`b'"' as txt " removed; `newvar' " as res "generated " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; `newvar' " as res "generated " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        drop `ind' `con' `OLDVAR'
        local jj 1
        local yy 1
        mac shift
        {c )-}
        drop `temp'
        {c )-}
        {c )-}
        {c )-}
      - else if "`replace'" != "" {c -(}
      = else if "replace" != "" {c -(}
      - tokenize `varlist'
      = tokenize floor
      - tempvar ind con
      - qui gen byte `con' = 0
      = qui gen byte __000001 = 0
      - qui gen byte `ind' = .
      = qui gen byte __000000 = .
      - local flag 0
      - local yy 1
      - local jj 1
      - while "`1'" != "" {c -(}
      = while "floor" != "" {c -(}
      - capture confirm string variable `1'
      = capture confirm string variable floor
      - if _rc != 0 {c -(}
      - di as txt "`1' already numeric; no " as res "replace"
      = di as txt "floor already numeric; no " as res "replace"
      - mac shift
      - {c )-}
      - else {c -(}
        tempvar temp
        qui gen str1 `temp' = ""
        qui replace `temp' = `1'
        qui compress `temp'
        while `"`char`jj''"' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
        qui replace `temp' = trim(`temp')
        qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        local r = r(N)
        qui count if real(`temp') >= .
        local s = r(N)
        if `r' != `s' {c -(}
        local flag 1
        {c )-}
        if `flag' == 1 & "`force'" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
        else {c -(}
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        tempvar switch
        local type = cond("`float'" == "float", "float", "double")
        qui gen `type' `switch' = real(`1')
        char rename `1' `switch'
        move `switch' `1'
        local vl: variable label `1'
        drop `1'
        if "`float'" == "" {c -(}
        qui gen double `1' = `switch'
        {c )-}
        else {c -(}
        qui gen float `1' = `switch'
        {c )-}
        move `1' `switch'
        label variable `1' `"`vl'"'
        char rename `switch' `1'
        char `1'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
        qui replace `con' = 0
        qui compress `1'
        local type : type `1'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        local jj 1
        local yy 1
        drop `switch'
        mac shift
        {c )-}
        drop `temp'
        {c )-}
      - {c )-}
      - while "`1'" != "" {c -(}
      = while "" != "" {c -(}
        capture confirm string variable `1'
        if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
        else {c -(}
        tempvar temp
        qui gen str1 `temp' = ""
        qui replace `temp' = `1'
        qui compress `temp'
        while `"`char`jj''"' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
        qui replace `temp' = trim(`temp')
        qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        local r = r(N)
        qui count if real(`temp') >= .
        local s = r(N)
        if `r' != `s' {c -(}
        local flag 1
        {c )-}
        if `flag' == 1 & "`force'" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
        else {c -(}
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        tempvar switch
        local type = cond("`float'" == "float", "float", "double")
        qui gen `type' `switch' = real(`1')
        char rename `1' `switch'
        move `switch' `1'
        local vl: variable label `1'
        drop `1'
        if "`float'" == "" {c -(}
        qui gen double `1' = `switch'
        {c )-}
        else {c -(}
        qui gen float `1' = `switch'
        {c )-}
        move `1' `switch'
        label variable `1' `"`vl'"'
        char rename `switch' `1'
        char `1'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
        qui replace `con' = 0
        qui compress `1'
        local type : type `1'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        local jj 1
        local yy 1
        drop `switch'
        mac shift
        {c )-}
        drop `temp'
        {c )-}
        {c )-}
      - {c )-}
      {hline 76} end destring {hline}
    - cap label drop lab
      {hline 77} begin label {hline}
      - version 10.0
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("drop", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - _label `macval(0)'
      = _label drop lab
        {c )-}
      {hline 79} end label {hline}
    - label define lab_`var' `lab_`var''
    = label define lab_floor 1 "ceramic/marble/granite" 2 "tile" 3 "cement/red brick" 4 "wood" 5 "bamboo" 6 "soil" 7 "other "
      {hline 77} begin label {hline}
      - version 10.0
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - _label `macval(0)'
      = _label define lab_floor 1 "ceramic/marble/granite" 2 "tile" 3 "cement/red brick" 4 "wood" 5 "bamboo" 6 "soil" 7 "other "
      - {c )-}
      {hline 79} end label {hline}
    - label values `var' lab_`var'
    = label values floor lab_floor
      {hline 77} begin label {hline}
      - version 10.0
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("values", "val") > 0 ) {c -(}
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {c -(}
      = if "" != "" {c -(}
        local fix ", nofix"
        {c )-}
      - gettoken var rest : anything
      - while `"`rest'"' != "" {c -(}
      = while `" lab_floor"' != "" {c -(}
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "lab_floor"
      - {c )-}
      - while `"`rest'"' != "" {c -(}
      = while `""' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
      - local vlist : list anything - lab
      - if "`lab'" == "." {c -(}
      = if "lab_floor" == "." {c -(}
        local lab ""
        {c )-}
      - foreach var of varlist `vlist' {c -(}
      = foreach var of varlist floor {c -(}
      - _label `val' `var' `lab' `fix'
      = _label values floor lab_floor 
      - {c )-}
      - {c )-}
      - else {c -(}
        _label `macval(0)'
        {c )-}
      {hline 79} end label {hline}
    - di as error "Label Values || Labeling values for variable (`var')"
    = di as error "Label Values || Labeling values for variable (floor)"
{err}Label Values || Labeling values for variable (floor)
    {txt}- {c )-}
    - else {c -(}
      di as error "Label Values || Variable (`var') not in label database for file (`file_path')"
      {c )-}
    - {c )-}
    - cap confirm variable `var'
    = cap confirm variable lighting
    - if !_rc {c -(}
    - destring `var', replace force
    = destring lighting, replace force
      {hline 74} begin destring {hline}
      - version 7.0
      - syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(string)] [percent] [dpcomma]
      - if "`percent'" == "percent" {c -(}
      = if "" == "percent" {c -(}
        if !index(`"`ignore'"', "%") {c -(}
        local ignore `"`ignore'%"'
        {c )-}
        {c )-}
      - if "`generate'" != "" & "`replace'" != "" {c -(}
      = if "" != "" & "replace" != "" {c -(}
        di as err "options generate and replace are mutually exclusive"
        exit 198
        {c )-}
      - if "`generate'" == "" & "`replace'" == "" {c -(}
      = if "" == "" & "replace" == "" {c -(}
        di as err "must specify either generate or replace option"
        exit 198
        {c )-}
      - if "`generate'" != "" {c -(}
      = if "" != "" {c -(}
        local ct1: word count `varlist'
        local save "`varlist'"
        local 0 "`generate'"
        capture syntax newvarlist
        if _rc {c -(}
        di as err "generate(newvarlist) invalid"
        exit _rc
        {c )-}
        local generate "`varlist'"
        local varlist "`save'"
        local ct2: word count `generate'
        if `ct1' != `ct2' {c -(}
        di as err "number of variables in varlist must equal"
        di as err "number of variables in generate(newvarlist)"
        exit 198
        {c )-}
        {c )-}
      - local m 1
      - if `"`ignore'"' == "" {c -(}
      = if `""' == "" {c -(}
      - local ignore ""
      - {c )-}
      - local l = length(`"`ignore'"')
      = local l = length(`""')
      - while `m' <= `l' {c -(}
      = while 1 <= 0 {c -(}
        local char`m' = substr(`"`ignore'"', `m', 1)
        if substr(`"`ignore'"', `m', 1) == " " {c -(}
        local char`m' " "
        {c )-}
        local m = `m' + 1
        {c )-}
      - if "`generate'" != "" {c -(}
      = if "" != "" {c -(}
        tokenize `varlist'
        local flag 0
        local jj 1
        local yy 1
        local varno 0
        while "`1'" != "" {c -(}
        local varno = `varno' + 1
        capture confirm string variable `1'
        if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "generate"
        local newvar : word `varno' of `generate'
        mac shift
        {c )-}
        else {c -(}
        tempvar temp
        qui gen str1 `temp' = ""
        qui replace `temp' = `1'
        qui compress `temp'
        while `"`char`jj''"' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
        qui replace `temp' = trim(`temp')
        qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        local r = r(N)
        qui count if real(`temp') >= .
        local s = r(N)
        if `r' != `s' {c -(}
        local flag 1
        {c )-}
        if `flag' == 1 & "`force'" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "generate"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "generate"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
        else {c -(}
        tempvar OLDVAR ind con
        qui gen str1 `OLDVAR' = ""
        qui replace `OLDVAR' = `1'
        qui gen byte `ind' = .
        qui gen byte `con' = 0
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`OLDVAR', `"`t'"') != 0
        qui count if `ind' == 1
        if r(N) > 0 {c -(}
        if `"`t'"' == " " {c -(}
        local b `"`b' space"'
        {c )-}
        else {c -(}
        local b `"`b' `t'"'
        {c )-}
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`OLDVAR', `"`t'"') != 0
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `OLDVAR' = subinstr(`OLDVAR', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        local newvar : word `varno' of `generate'
        local vl: variable label `1'
        if "`float'" == "" {c -(}
        qui gen double `newvar' = real(`OLDVAR')
        {c )-}
        else {c -(}
        qui gen float `newvar' = real(`OLDVAR')
        {c )-}
        move `newvar' `1'
        move `1' `newvar'
        Charcopy `1' `newvar'
        label variable `newvar' `"`vl'"'
        char `newvar'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) > 0 {c -(}
        qui replace `newvar' = `newvar'/100
        {c )-}
        qui compress `newvar'
        local type : type `newvar'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; `newvar' " as res "generated " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1': characters" as res `"`b'"' as txt " removed; `newvar' " as res "generated " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; `newvar' " as res "generated " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        drop `ind' `con' `OLDVAR'
        local jj 1
        local yy 1
        mac shift
        {c )-}
        drop `temp'
        {c )-}
        {c )-}
        {c )-}
      - else if "`replace'" != "" {c -(}
      = else if "replace" != "" {c -(}
      - tokenize `varlist'
      = tokenize lighting
      - tempvar ind con
      - qui gen byte `con' = 0
      = qui gen byte __000001 = 0
      - qui gen byte `ind' = .
      = qui gen byte __000000 = .
      - local flag 0
      - local yy 1
      - local jj 1
      - while "`1'" != "" {c -(}
      = while "lighting" != "" {c -(}
      - capture confirm string variable `1'
      = capture confirm string variable lighting
      - if _rc != 0 {c -(}
      - di as txt "`1' already numeric; no " as res "replace"
      = di as txt "lighting already numeric; no " as res "replace"
      - mac shift
      - {c )-}
      - else {c -(}
        tempvar temp
        qui gen str1 `temp' = ""
        qui replace `temp' = `1'
        qui compress `temp'
        while `"`char`jj''"' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
        qui replace `temp' = trim(`temp')
        qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        local r = r(N)
        qui count if real(`temp') >= .
        local s = r(N)
        if `r' != `s' {c -(}
        local flag 1
        {c )-}
        if `flag' == 1 & "`force'" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
        else {c -(}
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        tempvar switch
        local type = cond("`float'" == "float", "float", "double")
        qui gen `type' `switch' = real(`1')
        char rename `1' `switch'
        move `switch' `1'
        local vl: variable label `1'
        drop `1'
        if "`float'" == "" {c -(}
        qui gen double `1' = `switch'
        {c )-}
        else {c -(}
        qui gen float `1' = `switch'
        {c )-}
        move `1' `switch'
        label variable `1' `"`vl'"'
        char rename `switch' `1'
        char `1'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
        qui replace `con' = 0
        qui compress `1'
        local type : type `1'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        local jj 1
        local yy 1
        drop `switch'
        mac shift
        {c )-}
        drop `temp'
        {c )-}
      - {c )-}
      - while "`1'" != "" {c -(}
      = while "" != "" {c -(}
        capture confirm string variable `1'
        if _rc != 0 {c -(}
        di as txt "`1' already numeric; no " as res "replace"
        mac shift
        {c )-}
        else {c -(}
        tempvar temp
        qui gen str1 `temp' = ""
        qui replace `temp' = `1'
        qui compress `temp'
        while `"`char`jj''"' != "" {c -(}
        local t `"`char`jj''"'
        qui replace `temp' = subinstr(`temp', `"`t'"', "", .)
        local jj = `jj' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `temp' = subinstr(`temp', `","', ".", 1)
        {c )-}
        qui replace `temp' = trim(`temp')
        qui count if `temp'=="" | `temp'=="." | (length(`temp')==2 & inrange(`temp',".a",".z"))
        local r = r(N)
        qui count if real(`temp') >= .
        local s = r(N)
        if `r' != `s' {c -(}
        local flag 1
        {c )-}
        if `flag' == 1 & "`force'" == "" {c -(}
        if `"`ignore'"' != "" {c -(}
        di as txt "`1' contains " "characters not specified in " as res "ignore()" as txt "; no " as res "replace"
        {c )-}
        else {c -(}
        di as txt "`1' contains " "nonnumeric characters; no " as res "replace"
        {c )-}
        local flag 0
        local jj 1
        mac shift
        {c )-}
        else {c -(}
        while `"`char`yy''"' != "" {c -(}
        local t `"`char`yy''"'
        qui replace `ind' = 1 if index(`1', `"`t'"')!=0
        qui count if `ind' == 1
        if `"`t'"' == " " & r(N) > 0 {c -(}
        local b `"`b' space"'
        {c )-}
        if r(N) > 0 {c -(}
        local b `"`b' `t'"'
        {c )-}
        qui replace `ind' = .
        qui replace `con' = 1 if `"`t'"' == "%" & index(`1', `"`t'"') != 0
        qui replace `1' = subinstr(`1', `"`t'"', "", .)
        local yy = `yy' + 1
        {c )-}
        if ("`dpcomma'" != "") {c -(}
        qui replace `1' = subinstr(`1', `","', ".", 1)
        {c )-}
        local c Characters removed were: `b'
        tempvar switch
        local type = cond("`float'" == "float", "float", "double")
        qui gen `type' `switch' = real(`1')
        char rename `1' `switch'
        move `switch' `1'
        local vl: variable label `1'
        drop `1'
        if "`float'" == "" {c -(}
        qui gen double `1' = `switch'
        {c )-}
        else {c -(}
        qui gen float `1' = `switch'
        {c )-}
        move `1' `switch'
        label variable `1' `"`vl'"'
        char rename `switch' `1'
        char `1'[destring] `c'
        qui count if `con' == 1
        if "`percent'" != "" & r(N) != 0 {c -(}
        qui replace `1' = `1'/100
        {c )-}
        qui replace `con' = 0
        qui compress `1'
        local type : type `1'
        if "`force'" != "" {c -(}
        di as txt "`1' contains nonnumeric " "characters; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `"`b'"' != "" {c -(}
        di as txt "`1'"": characters" as res `"`b'"' as txt " removed; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        else if `"`b'"' == "" & "`force'" == "" {c -(}
        di as txt "`1' has all " "characters numeric; " as res "replaced " as txt "as " as res "`type'"
        {c )-}
        if `s' != 0 {c -(}
        local valmsg = cond(`s' > 1, "values", "value")
        di as txt "(`s' missing `valmsg' generated)"
        {c )-}
        local b ""
        local c ""
        local jj 1
        local yy 1
        drop `switch'
        mac shift
        {c )-}
        drop `temp'
        {c )-}
        {c )-}
      - {c )-}
      {hline 76} end destring {hline}
    - cap label drop lab
      {hline 77} begin label {hline}
      - version 10.0
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("drop", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - _label `macval(0)'
      = _label drop lab
        {c )-}
      {hline 79} end label {hline}
    - label define lab_`var' `lab_`var''
    = label define lab_lighting 
      {hline 77} begin label {hline}
      - version 10.0
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - _label `macval(0)'
      = _label define lab_lighting 
{err}invalid syntax
       {txt} {c )-}
      {hline 79} end label {hline}
      label values `var' lab_`var'
      di as error "Label Values || Labeling values for variable (`var')"
      {c )-}
      else {c -(}
      di as error "Label Values || Variable (`var') not in label database for file (`file_path')"
      {c )-}
      {c )-}
      {c )-}
    {hline 76} end label_vals {hline}
    di as error "||||||||||||||||||||||||||||||||||||"
    di as error "||||||||| BEGIN EXTRACTION |||||||||"
    di as error "||||||||||||||||||||||||||||||||||||"
    create_indicators, indicators($indicators)
    global created_indicators `r(vars)'
    if !mi("$map_indicators") {c -(}
    di as error "||||||||||||||||||||||||||||||||||||"
    di as error "||||||||| STORE VALUE MAPS |||||||||"
    di as error "||||||||||||||||||||||||||||||||||||"
    local map_args
    foreach topic in $map_topics {c -(}
    if !mi("`store_vals_path'") local map_args cluster output_path(`store_vals_path')
    map_indicators, topic(`topic') `bypass_map' `store_vals' `map_args'
    global created_indicators $created_indicators `r(map_out)'
    {c )-}
    {c )-}
    di as error "|||||||||||||||||||||||||||||||||||||||||||"
    di as error "||||||||| BEGIN TOPIC CUSTOM CODE |||||||||"
    di as error "|||||||||||||||||||||||||||||||||||||||||||"
    run_custom_code, type(topic) topics($topics) `trace'
    di as error "||||||||||||||||||||||||||||||||||||"
    di as error "||||||||| BEGIN VALIDATION |||||||||"
    di as error "||||||||||||||||||||||||||||||||||||"
    run_validation, indicators($indicators)
    check_clean, indicators($created_indicators) `bypass' `keep'
    inlist2, obj($ihme_loc_id) vals($gbd_subnat_locs) string
    if `r(cmd)' {c -(}
    di as error "||||||||||||||||||||||||||||||||||||"
    di as error "||||||||| MAP GBD SUBNAT  ||||||||||"
    di as error "||||||||||||||||||||||||||||||||||||"
    map_gbd_subnat, `bypass_map'
    {c )-}
    if regexm("$ihme_loc_id", "IND") {c -(}
    if regexm("$ihme_loc_id", "_") gen admin_1_id = "$ihme_loc_id"
    india_urban
    {c )-}
    {c )-}
  {hline 77} end run_extract {hline}
  tostring year_start, gen(year)
  tostring year_end, gen(end_year)
  tostring nid, gen(nid_n)
  local filename = ihme_loc_id + "_" + survey_name + "_" + year + "_" + end_year + "_" + nid_n
  local filename = subinstr("`filename'", "/", "_",.)
  drop year end_year nid_n
  cd `outpath'
  outsheet using "`filename'.csv", comma names replace
  {c )-}
{search r(198):r(198);}

end of do-file

{search r(198):r(198);}

{com}. 